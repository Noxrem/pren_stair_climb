
pren_stari_climb.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__Vectors>:
       0:	00 00 01 20 91 01 00 00 11 02 00 00 99 2f 00 00     ... ........./..
      10:	15 02 00 00 17 02 00 00 19 02 00 00 00 00 00 00     ................
	...
      2c:	1b 02 00 00 1d 02 00 00 00 00 00 00 1f 02 00 00     ................
      3c:	21 02 00 00 75 2d 00 00 7d 2d 00 00 85 2d 00 00     !...u-..}-...-..
      4c:	8d 2d 00 00 95 2d 00 00 9d 2d 00 00 a5 2d 00 00     .-...-...-...-..
      5c:	ad 2d 00 00 b5 2d 00 00 bd 2d 00 00 c5 2d 00 00     .-...-...-...-..
      6c:	cd 2d 00 00 d5 2d 00 00 dd 2d 00 00 e5 2d 00 00     .-...-...-...-..
      7c:	ed 2d 00 00 f5 2d 00 00 fd 2d 00 00 05 2e 00 00     .-...-...-......
      8c:	0d 2e 00 00 15 2e 00 00 1d 2e 00 00 25 2e 00 00     ............%...
      9c:	2d 2e 00 00 35 2e 00 00 3d 2e 00 00 45 2e 00 00     -...5...=...E...
      ac:	4d 2e 00 00 55 2e 00 00 5d 2e 00 00 65 2e 00 00     M...U...]...e...
      bc:	c9 13 00 00 a5 14 00 00 b9 17 00 00 95 18 00 00     ................
      cc:	6d 2e 00 00 75 2e 00 00 7d 2e 00 00 85 2e 00 00     m...u...}.......
      dc:	8d 2e 00 00 95 2e 00 00 9d 2e 00 00 65 06 00 00     ............e...
      ec:	55 0b 00 00 a9 0d 00 00 a5 2e 00 00 ad 2e 00 00     U...............
      fc:	b5 2e 00 00 bd 2e 00 00 c5 2e 00 00 cd 2e 00 00     ................
     10c:	d5 2e 00 00 dd 2e 00 00 e5 2e 00 00 ed 2e 00 00     ................
     11c:	f5 2e 00 00 fd 2e 00 00 05 2f 00 00 0d 2f 00 00     ........./.../..
     12c:	15 2f 00 00 1d 2f 00 00 25 2f 00 00 2d 2f 00 00     ./.../..%/..-/..
     13c:	35 2f 00 00 3d 2f 00 00 45 2f 00 00 4d 2f 00 00     5/..=/..E/..M/..
     14c:	55 2f 00 00 5d 2f 00 00 65 2f 00 00 6d 2f 00 00     U/..]/..e/..m/..
     15c:	d5 07 00 00 75 2f 00 00 7d 2f 00 00                 ....u/..}/..

00000168 <__data_section_table>:
     168:	000039c8 	.word	0x000039c8
     16c:	20000000 	.word	0x20000000
     170:	0000006c 	.word	0x0000006c
     174:	000039c8 	.word	0x000039c8
     178:	1fff0000 	.word	0x1fff0000
     17c:	00000000 	.word	0x00000000

00000180 <__bss_section_table>:
     180:	2000006c 	.word	0x2000006c
     184:	000008f8 	.word	0x000008f8
     188:	1fff0000 	.word	0x1fff0000
     18c:	00000000 	.word	0x00000000

00000190 <ResetISR>:
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//*****************************************************************************
__attribute__ ((section(".after_vectors.reset")))
void ResetISR(void) {
     190:	b510      	push	{r4, lr}

    // Disable interrupts
    __asm volatile ("cpsid i");
     192:	b672      	cpsid	i


#if defined (__USE_CMSIS)
// If __USE_CMSIS defined, then call CMSIS SystemInit code
    SystemInit();
     194:	f001 fec2 	bl	1f1c <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
     198:	4b0e      	ldr	r3, [pc, #56]	; (1d4 <ResetISR+0x44>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
     19a:	e007      	b.n	1ac <ResetISR+0x1c>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
     19c:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
     1a0:	689a      	ldr	r2, [r3, #8]
     1a2:	6859      	ldr	r1, [r3, #4]
     1a4:	6818      	ldr	r0, [r3, #0]
     1a6:	f000 f81b 	bl	1e0 <data_init>
        SectionLen = *SectionTableAddr++;
     1aa:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
     1ac:	4a0a      	ldr	r2, [pc, #40]	; (1d8 <ResetISR+0x48>)
     1ae:	4293      	cmp	r3, r2
     1b0:	d3f4      	bcc.n	19c <ResetISR+0xc>
     1b2:	e006      	b.n	1c2 <ResetISR+0x32>
    }

    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
     1b4:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
     1b6:	6859      	ldr	r1, [r3, #4]
     1b8:	f854 0b08 	ldr.w	r0, [r4], #8
     1bc:	f000 f81f 	bl	1fe <bss_init>
        SectionLen = *SectionTableAddr++;
     1c0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
     1c2:	4a06      	ldr	r2, [pc, #24]	; (1dc <ResetISR+0x4c>)
     1c4:	4293      	cmp	r3, r2
     1c6:	d3f5      	bcc.n	1b4 <ResetISR+0x24>
    //
    __libc_init_array();
#endif

    // Reenable interrupts
    __asm volatile ("cpsie i");
     1c8:	b662      	cpsie	i

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    systemPostInit();
     1ca:	f002 fedb 	bl	2f84 <systemPostInit>
    main();
     1ce:	f001 fca9 	bl	1b24 <main>
     1d2:	e7fe      	b.n	1d2 <ResetISR+0x42>
     1d4:	00000168 	.word	0x00000168
     1d8:	00000180 	.word	0x00000180
     1dc:	00000190 	.word	0x00000190

000001e0 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
     1e0:	2300      	movs	r3, #0
     1e2:	4293      	cmp	r3, r2
     1e4:	d20a      	bcs.n	1fc <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
     1e6:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
     1e8:	f850 4b04 	ldr.w	r4, [r0], #4
     1ec:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
     1f0:	3304      	adds	r3, #4
     1f2:	4293      	cmp	r3, r2
     1f4:	d3f8      	bcc.n	1e8 <data_init+0x8>
}
     1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
     1fa:	4770      	bx	lr
     1fc:	4770      	bx	lr

000001fe <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
     1fe:	2300      	movs	r3, #0
     200:	428b      	cmp	r3, r1
     202:	d204      	bcs.n	20e <bss_init+0x10>
        *pulDest++ = 0;
     204:	2200      	movs	r2, #0
     206:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
     20a:	3304      	adds	r3, #4
     20c:	e7f8      	b.n	200 <bss_init+0x2>
}
     20e:	4770      	bx	lr

00000210 <NMI_Handler>:
//*****************************************************************************
// Default core exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
WEAK_AV void NMI_Handler(void)
{ while(1) {}
     210:	e7fe      	b.n	210 <NMI_Handler>
}

WEAK_AV void HardFault_Handler(void)
{ while(1) {}
     212:	e7fe      	b.n	212 <NMI_Handler+0x2>

00000214 <MemManage_Handler>:
}

WEAK_AV void MemManage_Handler(void)
{ while(1) {}
     214:	e7fe      	b.n	214 <MemManage_Handler>

00000216 <BusFault_Handler>:
}

WEAK_AV void BusFault_Handler(void)
{ while(1) {}
     216:	e7fe      	b.n	216 <BusFault_Handler>

00000218 <UsageFault_Handler>:
}

WEAK_AV void UsageFault_Handler(void)
{ while(1) {}
     218:	e7fe      	b.n	218 <UsageFault_Handler>

0000021a <SVC_Handler>:
}

WEAK_AV void SVC_Handler(void)
{ while(1) {}
     21a:	e7fe      	b.n	21a <SVC_Handler>

0000021c <DebugMon_Handler>:
}

WEAK_AV void DebugMon_Handler(void)
{ while(1) {}
     21c:	e7fe      	b.n	21c <DebugMon_Handler>

0000021e <PendSV_Handler>:
}

WEAK_AV void PendSV_Handler(void)
{ while(1) {}
     21e:	e7fe      	b.n	21e <PendSV_Handler>

00000220 <SysTick_Handler>:
}

WEAK_AV void SysTick_Handler(void)
{ while(1) {}
     220:	e7fe      	b.n	220 <SysTick_Handler>

00000222 <ADC0_DriverIRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//*****************************************************************************
WEAK_AV void IntDefaultHandler(void)
{
  while(1) { __asm("BKPT #0");}
     222:	be00      	bkpt	0x0000
     224:	e7fd      	b.n	222 <ADC0_DriverIRQHandler>
     226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     22a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     22e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     23e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     24e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     25e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     26e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     27e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     28e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     29e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     2fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     302:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     306:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     30a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     30e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     312:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     316:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     31a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     31e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     322:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     326:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     32a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     32e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     332:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     336:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     33a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     33e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     342:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     346:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     34a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     34e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     352:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     356:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     35a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     35e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     362:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     366:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     36a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     36e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     372:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     376:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     37a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     37e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     382:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     386:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     38a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     38e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     392:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     396:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     39a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     39e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
     3fe:	Address 0x000003fe is out of bounds.


00000400 <Flash_Config>:
     400:	ffff ffff ffff ffff ffff ffff fbfe ffff     ................

00000410 <memchr>:
     410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     414:	2a10      	cmp	r2, #16
     416:	db2b      	blt.n	470 <memchr+0x60>
     418:	f010 0f07 	tst.w	r0, #7
     41c:	d008      	beq.n	430 <memchr+0x20>
     41e:	f810 3b01 	ldrb.w	r3, [r0], #1
     422:	3a01      	subs	r2, #1
     424:	428b      	cmp	r3, r1
     426:	d02d      	beq.n	484 <memchr+0x74>
     428:	f010 0f07 	tst.w	r0, #7
     42c:	b342      	cbz	r2, 480 <memchr+0x70>
     42e:	d1f6      	bne.n	41e <memchr+0xe>
     430:	b4f0      	push	{r4, r5, r6, r7}
     432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     43a:	f022 0407 	bic.w	r4, r2, #7
     43e:	f07f 0700 	mvns.w	r7, #0
     442:	2300      	movs	r3, #0
     444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     448:	3c08      	subs	r4, #8
     44a:	ea85 0501 	eor.w	r5, r5, r1
     44e:	ea86 0601 	eor.w	r6, r6, r1
     452:	fa85 f547 	uadd8	r5, r5, r7
     456:	faa3 f587 	sel	r5, r3, r7
     45a:	fa86 f647 	uadd8	r6, r6, r7
     45e:	faa5 f687 	sel	r6, r5, r7
     462:	b98e      	cbnz	r6, 488 <memchr+0x78>
     464:	d1ee      	bne.n	444 <memchr+0x34>
     466:	bcf0      	pop	{r4, r5, r6, r7}
     468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     46c:	f002 0207 	and.w	r2, r2, #7
     470:	b132      	cbz	r2, 480 <memchr+0x70>
     472:	f810 3b01 	ldrb.w	r3, [r0], #1
     476:	3a01      	subs	r2, #1
     478:	ea83 0301 	eor.w	r3, r3, r1
     47c:	b113      	cbz	r3, 484 <memchr+0x74>
     47e:	d1f8      	bne.n	472 <memchr+0x62>
     480:	2000      	movs	r0, #0
     482:	4770      	bx	lr
     484:	3801      	subs	r0, #1
     486:	4770      	bx	lr
     488:	2d00      	cmp	r5, #0
     48a:	bf06      	itte	eq
     48c:	4635      	moveq	r5, r6
     48e:	3803      	subeq	r0, #3
     490:	3807      	subne	r0, #7
     492:	f015 0f01 	tst.w	r5, #1
     496:	d107      	bne.n	4a8 <memchr+0x98>
     498:	3001      	adds	r0, #1
     49a:	f415 7f80 	tst.w	r5, #256	; 0x100
     49e:	bf02      	ittt	eq
     4a0:	3001      	addeq	r0, #1
     4a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     4a6:	3001      	addeq	r0, #1
     4a8:	bcf0      	pop	{r4, r5, r6, r7}
     4aa:	3801      	subs	r0, #1
     4ac:	4770      	bx	lr
     4ae:	bf00      	nop

000004b0 <SystemInitHook>:

#define SEMIHOSTING 0


void SystemInitHook(void)
{
     4b0:	b480      	push	{r7}
     4b2:	af00      	add	r7, sp, #0
  __asm(
     4b4:	490d      	ldr	r1, [pc, #52]	; (4ec <.endLoop0+0x26>)
     4b6:	466a      	mov	r2, sp
     4b8:	1a52      	subs	r2, r2, r1
     4ba:	3a04      	subs	r2, #4
     4bc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
     4c0:	5088      	str	r0, [r1, r2]
     4c2:	3a04      	subs	r2, #4
     4c4:	dafc      	bge.n	4c0 <SystemInitHook+0x10>

000004c6 <.endLoop0>:
    "subs    r2, 4\n"                 /* r2 = r2 - 4 */
    "bge     .Loop0\n"                /* springe falls >=0 zu Loop0 */
  ".endLoop0:\n");

  // Clock Gating
  SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK  | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTE_MASK;
     4c6:	4b08      	ldr	r3, [pc, #32]	; (4e8 <.endLoop0+0x22>)
     4c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
     4cc:	3318      	adds	r3, #24
     4ce:	681b      	ldr	r3, [r3, #0]
     4d0:	4905      	ldr	r1, [pc, #20]	; (4e8 <.endLoop0+0x22>)
     4d2:	f443 5278 	orr.w	r2, r3, #15872	; 0x3e00
     4d6:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
     4da:	3318      	adds	r3, #24
     4dc:	601a      	str	r2, [r3, #0]
}
     4de:	bf00      	nop
     4e0:	46bd      	mov	sp, r7
     4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e6:	4770      	bx	lr
     4e8:	40047000 	.word	0x40047000
     4ec:	2000f000 	.word	0x2000f000

000004f0 <McuHardFault_HandlerC>:
}


#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
void McuHardFault_HandlerC(uint32_t *hardfault_args)
{
     4f0:	b480      	push	{r7}
     4f2:	b083      	sub	sp, #12
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
  static volatile unsigned long _HFSR;
  static volatile unsigned long _DFSR;
  static volatile unsigned long _AFSR;
  static volatile unsigned long _BFAR;
  static volatile unsigned long _MMAR;
  stacked_r0 = ((unsigned long)hardfault_args[0]);
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	4a21      	ldr	r2, [pc, #132]	; (584 <McuHardFault_HandlerC+0x94>)
     4fe:	6013      	str	r3, [r2, #0]
  stacked_r1 = ((unsigned long)hardfault_args[1]);
     500:	687b      	ldr	r3, [r7, #4]
     502:	3304      	adds	r3, #4
     504:	681b      	ldr	r3, [r3, #0]
     506:	4a20      	ldr	r2, [pc, #128]	; (588 <McuHardFault_HandlerC+0x98>)
     508:	6013      	str	r3, [r2, #0]
  stacked_r2 = ((unsigned long)hardfault_args[2]);
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	3308      	adds	r3, #8
     50e:	681b      	ldr	r3, [r3, #0]
     510:	4a1e      	ldr	r2, [pc, #120]	; (58c <McuHardFault_HandlerC+0x9c>)
     512:	6013      	str	r3, [r2, #0]
  stacked_r3 = ((unsigned long)hardfault_args[3]);
     514:	687b      	ldr	r3, [r7, #4]
     516:	330c      	adds	r3, #12
     518:	681b      	ldr	r3, [r3, #0]
     51a:	4a1d      	ldr	r2, [pc, #116]	; (590 <McuHardFault_HandlerC+0xa0>)
     51c:	6013      	str	r3, [r2, #0]
  stacked_r12 = ((unsigned long)hardfault_args[4]);
     51e:	687b      	ldr	r3, [r7, #4]
     520:	3310      	adds	r3, #16
     522:	681b      	ldr	r3, [r3, #0]
     524:	4a1b      	ldr	r2, [pc, #108]	; (594 <McuHardFault_HandlerC+0xa4>)
     526:	6013      	str	r3, [r2, #0]
  stacked_lr = ((unsigned long)hardfault_args[5]);
     528:	687b      	ldr	r3, [r7, #4]
     52a:	3314      	adds	r3, #20
     52c:	681b      	ldr	r3, [r3, #0]
     52e:	4a1a      	ldr	r2, [pc, #104]	; (598 <McuHardFault_HandlerC+0xa8>)
     530:	6013      	str	r3, [r2, #0]
  stacked_pc = ((unsigned long)hardfault_args[6]);
     532:	687b      	ldr	r3, [r7, #4]
     534:	3318      	adds	r3, #24
     536:	681b      	ldr	r3, [r3, #0]
     538:	4a18      	ldr	r2, [pc, #96]	; (59c <McuHardFault_HandlerC+0xac>)
     53a:	6013      	str	r3, [r2, #0]
  stacked_psr = ((unsigned long)hardfault_args[7]);
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	331c      	adds	r3, #28
     540:	681b      	ldr	r3, [r3, #0]
     542:	4a17      	ldr	r2, [pc, #92]	; (5a0 <McuHardFault_HandlerC+0xb0>)
     544:	6013      	str	r3, [r2, #0]

  /* Configurable Fault Status Register */
  /* Consists of MMSR, BFSR and UFSR */
  _CFSR = (*((volatile unsigned long *)(0xE000ED28)));
     546:	4b17      	ldr	r3, [pc, #92]	; (5a4 <McuHardFault_HandlerC+0xb4>)
     548:	681b      	ldr	r3, [r3, #0]
     54a:	4a17      	ldr	r2, [pc, #92]	; (5a8 <McuHardFault_HandlerC+0xb8>)
     54c:	6013      	str	r3, [r2, #0]

  /* Hard Fault Status Register */
  _HFSR = (*((volatile unsigned long *)(0xE000ED2C)));
     54e:	4b17      	ldr	r3, [pc, #92]	; (5ac <McuHardFault_HandlerC+0xbc>)
     550:	681b      	ldr	r3, [r3, #0]
     552:	4a17      	ldr	r2, [pc, #92]	; (5b0 <McuHardFault_HandlerC+0xc0>)
     554:	6013      	str	r3, [r2, #0]

  /* Debug Fault Status Register */
  _DFSR = (*((volatile unsigned long *)(0xE000ED30)));
     556:	4b17      	ldr	r3, [pc, #92]	; (5b4 <McuHardFault_HandlerC+0xc4>)
     558:	681b      	ldr	r3, [r3, #0]
     55a:	4a17      	ldr	r2, [pc, #92]	; (5b8 <McuHardFault_HandlerC+0xc8>)
     55c:	6013      	str	r3, [r2, #0]

  /* Auxiliary Fault Status Register */
  _AFSR = (*((volatile unsigned long *)(0xE000ED3C)));    //                             oooo$$$$$$$$$$$$oooo
     55e:	4b17      	ldr	r3, [pc, #92]	; (5bc <McuHardFault_HandlerC+0xcc>)
     560:	681b      	ldr	r3, [r3, #0]
     562:	4a17      	ldr	r2, [pc, #92]	; (5c0 <McuHardFault_HandlerC+0xd0>)
     564:	6013      	str	r3, [r2, #0]
  /* Read the Fault Address Registers. */                 //        o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$
  /* These may not contain valid values. */               //     oo $ $ "$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$
  /* Check BFARVALID/MMARVALID to see */                  //     "$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$
  /* if they are valid values */                          //       $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$
  /* MemManage Fault Address Register */                  //       $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  """$$$
  _MMAR = (*((volatile unsigned long *)(0xE000ED34)));    //        "$$$""""$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     "$$$
     566:	4b17      	ldr	r3, [pc, #92]	; (5c4 <McuHardFault_HandlerC+0xd4>)
     568:	681b      	ldr	r3, [r3, #0]
     56a:	4a17      	ldr	r2, [pc, #92]	; (5c8 <McuHardFault_HandlerC+0xd8>)
     56c:	6013      	str	r3, [r2, #0]
  /* Bus Fault Address Register */                        //         $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     "$$$o
  _BFAR = (*((volatile unsigned long *)(0xE000ED38)));    //        o$$"   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o
     56e:	4b17      	ldr	r3, [pc, #92]	; (5cc <McuHardFault_HandlerC+0xdc>)
     570:	681b      	ldr	r3, [r3, #0]
     572:	4a17      	ldr	r2, [pc, #92]	; (5d0 <McuHardFault_HandlerC+0xe0>)
     574:	6013      	str	r3, [r2, #0]
                                                          //        $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" "$$$$$$ooooo$$$$o
  __asm("BKPT #0\n") ; /* cause the debugger to stop */   //       o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$
     576:	be00      	bkpt	0x0000
  /*lint -restore */                                      //       $$$$$$$$"$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$""""""""
} /*                                                              """"       $$$$    "$$$$$$$$$$$$$$$$$$$$$$$$$$$$"      o$$$
     578:	bf00      	nop
     57a:	370c      	adds	r7, #12
     57c:	46bd      	mov	sp, r7
     57e:	f85d 7b04 	ldr.w	r7, [sp], #4
     582:	4770      	bx	lr
     584:	2000006c 	.word	0x2000006c
     588:	20000070 	.word	0x20000070
     58c:	20000074 	.word	0x20000074
     590:	20000078 	.word	0x20000078
     594:	2000007c 	.word	0x2000007c
     598:	20000080 	.word	0x20000080
     59c:	20000084 	.word	0x20000084
     5a0:	20000088 	.word	0x20000088
     5a4:	e000ed28 	.word	0xe000ed28
     5a8:	2000008c 	.word	0x2000008c
     5ac:	e000ed2c 	.word	0xe000ed2c
     5b0:	20000090 	.word	0x20000090
     5b4:	e000ed30 	.word	0xe000ed30
     5b8:	20000094 	.word	0x20000094
     5bc:	e000ed3c 	.word	0xe000ed3c
     5c0:	20000098 	.word	0x20000098
     5c4:	e000ed34 	.word	0xe000ed34
     5c8:	2000009c 	.word	0x2000009c
     5cc:	e000ed38 	.word	0xe000ed38
     5d0:	200000a0 	.word	0x200000a0

000005d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
     5d4:	b480      	push	{r7}
     5d6:	b083      	sub	sp, #12
     5d8:	af00      	add	r7, sp, #0
     5da:	4603      	mov	r3, r0
     5dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     5de:	f997 3007 	ldrsb.w	r3, [r7, #7]
     5e2:	2b00      	cmp	r3, #0
     5e4:	db0b      	blt.n	5fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     5e6:	79fb      	ldrb	r3, [r7, #7]
     5e8:	f003 021f 	and.w	r2, r3, #31
     5ec:	4907      	ldr	r1, [pc, #28]	; (60c <__NVIC_EnableIRQ+0x38>)
     5ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
     5f2:	095b      	lsrs	r3, r3, #5
     5f4:	2001      	movs	r0, #1
     5f6:	fa00 f202 	lsl.w	r2, r0, r2
     5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
     5fe:	bf00      	nop
     600:	370c      	adds	r7, #12
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	e000e100 	.word	0xe000e100

00000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     610:	b480      	push	{r7}
     612:	b083      	sub	sp, #12
     614:	af00      	add	r7, sp, #0
     616:	4603      	mov	r3, r0
     618:	6039      	str	r1, [r7, #0]
     61a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     61c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     620:	2b00      	cmp	r3, #0
     622:	db0a      	blt.n	63a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     624:	683b      	ldr	r3, [r7, #0]
     626:	b2da      	uxtb	r2, r3
     628:	490c      	ldr	r1, [pc, #48]	; (65c <__NVIC_SetPriority+0x4c>)
     62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
     62e:	0112      	lsls	r2, r2, #4
     630:	b2d2      	uxtb	r2, r2
     632:	440b      	add	r3, r1
     634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     638:	e00a      	b.n	650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     63a:	683b      	ldr	r3, [r7, #0]
     63c:	b2da      	uxtb	r2, r3
     63e:	4908      	ldr	r1, [pc, #32]	; (660 <__NVIC_SetPriority+0x50>)
     640:	79fb      	ldrb	r3, [r7, #7]
     642:	f003 030f 	and.w	r3, r3, #15
     646:	3b04      	subs	r3, #4
     648:	0112      	lsls	r2, r2, #4
     64a:	b2d2      	uxtb	r2, r2
     64c:	440b      	add	r3, r1
     64e:	761a      	strb	r2, [r3, #24]
}
     650:	bf00      	nop
     652:	370c      	adds	r7, #12
     654:	46bd      	mov	sp, r7
     656:	f85d 7b04 	ldr.w	r7, [sp], #4
     65a:	4770      	bx	lr
     65c:	e000e100 	.word	0xe000e100
     660:	e000ed00 	.word	0xe000ed00

00000664 <FTM0_IRQHandler>:
 * Interrupt handler to distribute the different interrupt sources of the FTM0:
 * - channel 0..7
 * - timer overflow
 */
void FTM0_IRQHandler(void)
{
     664:	b580      	push	{r7, lr}
     666:	af00      	add	r7, sp, #0
  if ((FTM0->CONTROLS[0].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH0_IRQHandler();
     668:	4b24      	ldr	r3, [pc, #144]	; (6fc <FTM0_IRQHandler+0x98>)
     66a:	68db      	ldr	r3, [r3, #12]
     66c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     670:	2bc0      	cmp	r3, #192	; 0xc0
     672:	d101      	bne.n	678 <FTM0_IRQHandler+0x14>
     674:	f000 f994 	bl	9a0 <FTM0CH0_IRQHandler>
  if ((FTM0->CONTROLS[1].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH1_IRQHandler();
     678:	4b20      	ldr	r3, [pc, #128]	; (6fc <FTM0_IRQHandler+0x98>)
     67a:	695b      	ldr	r3, [r3, #20]
     67c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     680:	2bc0      	cmp	r3, #192	; 0xc0
     682:	d101      	bne.n	688 <FTM0_IRQHandler+0x24>
     684:	f002 fc95 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->CONTROLS[2].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH2_IRQHandler();
     688:	4b1c      	ldr	r3, [pc, #112]	; (6fc <FTM0_IRQHandler+0x98>)
     68a:	69db      	ldr	r3, [r3, #28]
     68c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     690:	2bc0      	cmp	r3, #192	; 0xc0
     692:	d101      	bne.n	698 <FTM0_IRQHandler+0x34>
     694:	f002 fc8d 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->CONTROLS[3].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH3_IRQHandler();
     698:	4b18      	ldr	r3, [pc, #96]	; (6fc <FTM0_IRQHandler+0x98>)
     69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     69c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     6a0:	2bc0      	cmp	r3, #192	; 0xc0
     6a2:	d101      	bne.n	6a8 <FTM0_IRQHandler+0x44>
     6a4:	f002 fc85 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->CONTROLS[4].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH4_IRQHandler();
     6a8:	4b14      	ldr	r3, [pc, #80]	; (6fc <FTM0_IRQHandler+0x98>)
     6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     6ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     6b0:	2bc0      	cmp	r3, #192	; 0xc0
     6b2:	d101      	bne.n	6b8 <FTM0_IRQHandler+0x54>
     6b4:	f002 fc7d 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->CONTROLS[5].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH5_IRQHandler();
     6b8:	4b10      	ldr	r3, [pc, #64]	; (6fc <FTM0_IRQHandler+0x98>)
     6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     6bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     6c0:	2bc0      	cmp	r3, #192	; 0xc0
     6c2:	d101      	bne.n	6c8 <FTM0_IRQHandler+0x64>
     6c4:	f002 fc75 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->CONTROLS[6].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH6_IRQHandler();
     6c8:	4b0c      	ldr	r3, [pc, #48]	; (6fc <FTM0_IRQHandler+0x98>)
     6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     6cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     6d0:	2bc0      	cmp	r3, #192	; 0xc0
     6d2:	d101      	bne.n	6d8 <FTM0_IRQHandler+0x74>
     6d4:	f002 fc6d 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->CONTROLS[7].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM0CH7_IRQHandler();
     6d8:	4b08      	ldr	r3, [pc, #32]	; (6fc <FTM0_IRQHandler+0x98>)
     6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     6dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     6e0:	2bc0      	cmp	r3, #192	; 0xc0
     6e2:	d101      	bne.n	6e8 <FTM0_IRQHandler+0x84>
     6e4:	f002 fc65 	bl	2fb2 <Default_Handler_FTM0>
  if ((FTM0->SC & TOF_TOIE_MASK) == TOF_TOIE_MASK) FTM0TOF_IRQHandler();
     6e8:	4b04      	ldr	r3, [pc, #16]	; (6fc <FTM0_IRQHandler+0x98>)
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     6f0:	2bc0      	cmp	r3, #192	; 0xc0
     6f2:	d101      	bne.n	6f8 <FTM0_IRQHandler+0x94>
     6f4:	f002 fc5d 	bl	2fb2 <Default_Handler_FTM0>
}
     6f8:	bf00      	nop
     6fa:	bd80      	pop	{r7, pc}
     6fc:	40038000 	.word	0x40038000

00000700 <ftm0Init>:

void ftm0Init(void)
{
     700:	b580      	push	{r7, lr}
     702:	af00      	add	r7, sp, #0
  // set clockgating for FTM0
  SIM->SCGC6 |= SIM_SCGC6_FTM0(1);
     704:	4b0d      	ldr	r3, [pc, #52]	; (73c <ftm0Init+0x3c>)
     706:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
     70a:	331c      	adds	r3, #28
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	490b      	ldr	r1, [pc, #44]	; (73c <ftm0Init+0x3c>)
     710:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
     714:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
     718:	331c      	adds	r3, #28
     71a:	601a      	str	r2, [r3, #0]

  // set the modulo value for a frequency of 100Hz
  FTM0->MOD = FTM0_MODULO;
     71c:	4b08      	ldr	r3, [pc, #32]	; (740 <ftm0Init+0x40>)
     71e:	f640 12c4 	movw	r2, #2500	; 0x9c4
     722:	609a      	str	r2, [r3, #8]

  // configure the timer with "Fixed frequency clock" as clocksource and with a "Prescaler" of 1 => 250 kHz
  FTM0->SC = FTM_SC_CLKS(2) |  FTM_SC_PS(0);
     724:	4b06      	ldr	r3, [pc, #24]	; (740 <ftm0Init+0x40>)
     726:	2210      	movs	r2, #16
     728:	601a      	str	r2, [r3, #0]

  // Enable FTM0 interrupt on NVIC with Prio: PRIO_FTM0 (defined in platform.h)
  NVIC_SetPriority(FTM0_IRQn, PRIO_FTM0);       // set interrupt priority
     72a:	2108      	movs	r1, #8
     72c:	202a      	movs	r0, #42	; 0x2a
     72e:	f7ff ff6f 	bl	610 <__NVIC_SetPriority>
  NVIC_EnableIRQ(FTM0_IRQn);                    // enable interrupt
     732:	202a      	movs	r0, #42	; 0x2a
     734:	f7ff ff4e 	bl	5d4 <__NVIC_EnableIRQ>
}
     738:	bf00      	nop
     73a:	bd80      	pop	{r7, pc}
     73c:	40047000 	.word	0x40047000
     740:	40038000 	.word	0x40038000

00000744 <__NVIC_EnableIRQ>:
{
     744:	b480      	push	{r7}
     746:	b083      	sub	sp, #12
     748:	af00      	add	r7, sp, #0
     74a:	4603      	mov	r3, r0
     74c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
     752:	2b00      	cmp	r3, #0
     754:	db0b      	blt.n	76e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     756:	79fb      	ldrb	r3, [r7, #7]
     758:	f003 021f 	and.w	r2, r3, #31
     75c:	4907      	ldr	r1, [pc, #28]	; (77c <__NVIC_EnableIRQ+0x38>)
     75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
     762:	095b      	lsrs	r3, r3, #5
     764:	2001      	movs	r0, #1
     766:	fa00 f202 	lsl.w	r2, r0, r2
     76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     76e:	bf00      	nop
     770:	370c      	adds	r7, #12
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop
     77c:	e000e100 	.word	0xe000e100

00000780 <__NVIC_SetPriority>:
{
     780:	b480      	push	{r7}
     782:	b083      	sub	sp, #12
     784:	af00      	add	r7, sp, #0
     786:	4603      	mov	r3, r0
     788:	6039      	str	r1, [r7, #0]
     78a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
     78c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     790:	2b00      	cmp	r3, #0
     792:	db0a      	blt.n	7aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     794:	683b      	ldr	r3, [r7, #0]
     796:	b2da      	uxtb	r2, r3
     798:	490c      	ldr	r1, [pc, #48]	; (7cc <__NVIC_SetPriority+0x4c>)
     79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
     79e:	0112      	lsls	r2, r2, #4
     7a0:	b2d2      	uxtb	r2, r2
     7a2:	440b      	add	r3, r1
     7a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     7a8:	e00a      	b.n	7c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     7aa:	683b      	ldr	r3, [r7, #0]
     7ac:	b2da      	uxtb	r2, r3
     7ae:	4908      	ldr	r1, [pc, #32]	; (7d0 <__NVIC_SetPriority+0x50>)
     7b0:	79fb      	ldrb	r3, [r7, #7]
     7b2:	f003 030f 	and.w	r3, r3, #15
     7b6:	3b04      	subs	r3, #4
     7b8:	0112      	lsls	r2, r2, #4
     7ba:	b2d2      	uxtb	r2, r2
     7bc:	440b      	add	r3, r1
     7be:	761a      	strb	r2, [r3, #24]
}
     7c0:	bf00      	nop
     7c2:	370c      	adds	r7, #12
     7c4:	46bd      	mov	sp, r7
     7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     7ca:	4770      	bx	lr
     7cc:	e000e100 	.word	0xe000e100
     7d0:	e000ed00 	.word	0xe000ed00

000007d4 <FTM3_IRQHandler>:
 * Interrupt handler to distribute the different interrupt sources of the FTM:
 * - channel 0..7
 * - timer overflow
 */
void FTM3_IRQHandler(void)
{
     7d4:	b580      	push	{r7, lr}
     7d6:	af00      	add	r7, sp, #0
  if ((FTM3->CONTROLS[0].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH0_IRQHandler();
     7d8:	4b24      	ldr	r3, [pc, #144]	; (86c <FTM3_IRQHandler+0x98>)
     7da:	68db      	ldr	r3, [r3, #12]
     7dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     7e0:	2bc0      	cmp	r3, #192	; 0xc0
     7e2:	d101      	bne.n	7e8 <FTM3_IRQHandler+0x14>
     7e4:	f002 fbed 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[1].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH1_IRQHandler();
     7e8:	4b20      	ldr	r3, [pc, #128]	; (86c <FTM3_IRQHandler+0x98>)
     7ea:	695b      	ldr	r3, [r3, #20]
     7ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     7f0:	2bc0      	cmp	r3, #192	; 0xc0
     7f2:	d101      	bne.n	7f8 <FTM3_IRQHandler+0x24>
     7f4:	f002 fbe5 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[2].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH2_IRQHandler();
     7f8:	4b1c      	ldr	r3, [pc, #112]	; (86c <FTM3_IRQHandler+0x98>)
     7fa:	69db      	ldr	r3, [r3, #28]
     7fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     800:	2bc0      	cmp	r3, #192	; 0xc0
     802:	d101      	bne.n	808 <FTM3_IRQHandler+0x34>
     804:	f002 fbdd 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[3].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH3_IRQHandler();
     808:	4b18      	ldr	r3, [pc, #96]	; (86c <FTM3_IRQHandler+0x98>)
     80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     80c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     810:	2bc0      	cmp	r3, #192	; 0xc0
     812:	d101      	bne.n	818 <FTM3_IRQHandler+0x44>
     814:	f002 fbd5 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[4].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH4_IRQHandler();
     818:	4b14      	ldr	r3, [pc, #80]	; (86c <FTM3_IRQHandler+0x98>)
     81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     81c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     820:	2bc0      	cmp	r3, #192	; 0xc0
     822:	d101      	bne.n	828 <FTM3_IRQHandler+0x54>
     824:	f002 fbcd 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[5].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH5_IRQHandler();
     828:	4b10      	ldr	r3, [pc, #64]	; (86c <FTM3_IRQHandler+0x98>)
     82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     82c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     830:	2bc0      	cmp	r3, #192	; 0xc0
     832:	d101      	bne.n	838 <FTM3_IRQHandler+0x64>
     834:	f002 fbc5 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[6].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH6_IRQHandler();
     838:	4b0c      	ldr	r3, [pc, #48]	; (86c <FTM3_IRQHandler+0x98>)
     83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     83c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     840:	2bc0      	cmp	r3, #192	; 0xc0
     842:	d101      	bne.n	848 <FTM3_IRQHandler+0x74>
     844:	f002 fbbd 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->CONTROLS[7].CnSC & CHF_CHIE_MASK) == CHF_CHIE_MASK) FTM3CH7_IRQHandler();
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <FTM3_IRQHandler+0x98>)
     84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     84c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     850:	2bc0      	cmp	r3, #192	; 0xc0
     852:	d101      	bne.n	858 <FTM3_IRQHandler+0x84>
     854:	f002 fbb5 	bl	2fc2 <Default_Handler_FTM3>
  if ((FTM3->SC & TOF_TOIE_MASK) == TOF_TOIE_MASK) FTM3TOF_IRQHandler();
     858:	4b04      	ldr	r3, [pc, #16]	; (86c <FTM3_IRQHandler+0x98>)
     85a:	681b      	ldr	r3, [r3, #0]
     85c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
     860:	2bc0      	cmp	r3, #192	; 0xc0
     862:	d101      	bne.n	868 <FTM3_IRQHandler+0x94>
     864:	f002 fbad 	bl	2fc2 <Default_Handler_FTM3>
}
     868:	bf00      	nop
     86a:	bd80      	pop	{r7, pc}
     86c:	40026000 	.word	0x40026000

00000870 <ftm3Init>:

void ftm3Init(void)
{
     870:	b580      	push	{r7, lr}
     872:	af00      	add	r7, sp, #0
  // set clockgating for FTM3
  SIM->SCGC6 |= SIM_SCGC6_FTM3(1);
     874:	4b0d      	ldr	r3, [pc, #52]	; (8ac <ftm3Init+0x3c>)
     876:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
     87a:	331c      	adds	r3, #28
     87c:	681b      	ldr	r3, [r3, #0]
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <ftm3Init+0x3c>)
     880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     884:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
     888:	331c      	adds	r3, #28
     88a:	601a      	str	r2, [r3, #0]

  // sets the modulo
  FTM3->MOD = FTM3_MODULO;
     88c:	4b08      	ldr	r3, [pc, #32]	; (8b0 <ftm3Init+0x40>)
     88e:	f640 72ff 	movw	r2, #4095	; 0xfff
     892:	609a      	str	r2, [r3, #8]

  // configure the timer with "system clock" as clocksource and with a "Prescaler" of 1 => 60 MHz
  FTM3->SC = FTM_SC_CLKS(1) |  FTM_SC_PS(0);
     894:	4b06      	ldr	r3, [pc, #24]	; (8b0 <ftm3Init+0x40>)
     896:	2208      	movs	r2, #8
     898:	601a      	str	r2, [r3, #0]

  // Enable FTM3 interrupt on NVIC with Prio: PRIO_FTM3 (defined in platform.h)
  NVIC_SetPriority(FTM3_IRQn, PRIO_FTM3);       // set interrupt priority
     89a:	210c      	movs	r1, #12
     89c:	2047      	movs	r0, #71	; 0x47
     89e:	f7ff ff6f 	bl	780 <__NVIC_SetPriority>
  NVIC_EnableIRQ(FTM3_IRQn);                    // enable interrupt
     8a2:	2047      	movs	r0, #71	; 0x47
     8a4:	f7ff ff4e 	bl	744 <__NVIC_EnableIRQ>
}
     8a8:	bf00      	nop
     8aa:	bd80      	pop	{r7, pc}
     8ac:	40047000 	.word	0x40047000
     8b0:	40026000 	.word	0x40026000

000008b4 <utilNum16uToStr>:
 *    Size of the destination buffer in bytes.
 * @param[in] num
 *    16bit unsigned number to convert.
 */
void utilNum16uToStr(char *dst, uint16_t dstSize, uint16_t num)
{
     8b4:	b480      	push	{r7}
     8b6:	b087      	sub	sp, #28
     8b8:	af00      	add	r7, sp, #0
     8ba:	6078      	str	r0, [r7, #4]
     8bc:	460b      	mov	r3, r1
     8be:	807b      	strh	r3, [r7, #2]
     8c0:	4613      	mov	r3, r2
     8c2:	803b      	strh	r3, [r7, #0]
  char *ptr = ((char *)dst);
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	613b      	str	r3, [r7, #16]
  unsigned char i=0, j;
     8c8:	2300      	movs	r3, #0
     8ca:	75fb      	strb	r3, [r7, #23]
  char tmp;

  dstSize--; /* for zero byte */
     8cc:	887b      	ldrh	r3, [r7, #2]
     8ce:	3b01      	subs	r3, #1
     8d0:	807b      	strh	r3, [r7, #2]
  if (num == 0 && dstSize > 0){
     8d2:	883b      	ldrh	r3, [r7, #0]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d12c      	bne.n	932 <utilNum16uToStr+0x7e>
     8d8:	887b      	ldrh	r3, [r7, #2]
     8da:	2b00      	cmp	r3, #0
     8dc:	d029      	beq.n	932 <utilNum16uToStr+0x7e>
    ptr[i++] = '0';
     8de:	7dfb      	ldrb	r3, [r7, #23]
     8e0:	1c5a      	adds	r2, r3, #1
     8e2:	75fa      	strb	r2, [r7, #23]
     8e4:	461a      	mov	r2, r3
     8e6:	693b      	ldr	r3, [r7, #16]
     8e8:	4413      	add	r3, r2
     8ea:	2230      	movs	r2, #48	; 0x30
     8ec:	701a      	strb	r2, [r3, #0]
    dstSize--;
     8ee:	887b      	ldrh	r3, [r7, #2]
     8f0:	3b01      	subs	r3, #1
     8f2:	807b      	strh	r3, [r7, #2]
  }
  while (num > 0 && dstSize > 0) {
     8f4:	e01d      	b.n	932 <utilNum16uToStr+0x7e>
    ptr[i++] = (char)((num % 10) + '0');
     8f6:	883a      	ldrh	r2, [r7, #0]
     8f8:	4b28      	ldr	r3, [pc, #160]	; (99c <utilNum16uToStr+0xe8>)
     8fa:	fba3 1302 	umull	r1, r3, r3, r2
     8fe:	08d9      	lsrs	r1, r3, #3
     900:	460b      	mov	r3, r1
     902:	009b      	lsls	r3, r3, #2
     904:	440b      	add	r3, r1
     906:	005b      	lsls	r3, r3, #1
     908:	1ad3      	subs	r3, r2, r3
     90a:	b29b      	uxth	r3, r3
     90c:	b2da      	uxtb	r2, r3
     90e:	7dfb      	ldrb	r3, [r7, #23]
     910:	1c59      	adds	r1, r3, #1
     912:	75f9      	strb	r1, [r7, #23]
     914:	4619      	mov	r1, r3
     916:	693b      	ldr	r3, [r7, #16]
     918:	440b      	add	r3, r1
     91a:	3230      	adds	r2, #48	; 0x30
     91c:	b2d2      	uxtb	r2, r2
     91e:	701a      	strb	r2, [r3, #0]
    dstSize--;
     920:	887b      	ldrh	r3, [r7, #2]
     922:	3b01      	subs	r3, #1
     924:	807b      	strh	r3, [r7, #2]
    num /= 10;
     926:	883b      	ldrh	r3, [r7, #0]
     928:	4a1c      	ldr	r2, [pc, #112]	; (99c <utilNum16uToStr+0xe8>)
     92a:	fba2 2303 	umull	r2, r3, r2, r3
     92e:	08db      	lsrs	r3, r3, #3
     930:	803b      	strh	r3, [r7, #0]
  while (num > 0 && dstSize > 0) {
     932:	883b      	ldrh	r3, [r7, #0]
     934:	2b00      	cmp	r3, #0
     936:	d002      	beq.n	93e <utilNum16uToStr+0x8a>
     938:	887b      	ldrh	r3, [r7, #2]
     93a:	2b00      	cmp	r3, #0
     93c:	d1db      	bne.n	8f6 <utilNum16uToStr+0x42>
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
     93e:	2300      	movs	r3, #0
     940:	75bb      	strb	r3, [r7, #22]
     942:	e01a      	b.n	97a <utilNum16uToStr+0xc6>
    tmp = ptr[j];
     944:	7dbb      	ldrb	r3, [r7, #22]
     946:	693a      	ldr	r2, [r7, #16]
     948:	4413      	add	r3, r2
     94a:	781b      	ldrb	r3, [r3, #0]
     94c:	73fb      	strb	r3, [r7, #15]
    ptr[j] = ptr[(i-j)-1];
     94e:	7dfa      	ldrb	r2, [r7, #23]
     950:	7dbb      	ldrb	r3, [r7, #22]
     952:	1ad3      	subs	r3, r2, r3
     954:	3b01      	subs	r3, #1
     956:	693a      	ldr	r2, [r7, #16]
     958:	441a      	add	r2, r3
     95a:	7dbb      	ldrb	r3, [r7, #22]
     95c:	6939      	ldr	r1, [r7, #16]
     95e:	440b      	add	r3, r1
     960:	7812      	ldrb	r2, [r2, #0]
     962:	701a      	strb	r2, [r3, #0]
    ptr[(i-j)-1] = tmp;
     964:	7dfa      	ldrb	r2, [r7, #23]
     966:	7dbb      	ldrb	r3, [r7, #22]
     968:	1ad3      	subs	r3, r2, r3
     96a:	3b01      	subs	r3, #1
     96c:	693a      	ldr	r2, [r7, #16]
     96e:	4413      	add	r3, r2
     970:	7bfa      	ldrb	r2, [r7, #15]
     972:	701a      	strb	r2, [r3, #0]
  for(j=0; j<(i/2); j++) { /* swap buffer */
     974:	7dbb      	ldrb	r3, [r7, #22]
     976:	3301      	adds	r3, #1
     978:	75bb      	strb	r3, [r7, #22]
     97a:	7dfb      	ldrb	r3, [r7, #23]
     97c:	085b      	lsrs	r3, r3, #1
     97e:	b2db      	uxtb	r3, r3
     980:	7dba      	ldrb	r2, [r7, #22]
     982:	429a      	cmp	r2, r3
     984:	d3de      	bcc.n	944 <utilNum16uToStr+0x90>
  }
  ptr[i] = '\0';
     986:	7dfb      	ldrb	r3, [r7, #23]
     988:	693a      	ldr	r2, [r7, #16]
     98a:	4413      	add	r3, r2
     98c:	2200      	movs	r2, #0
     98e:	701a      	strb	r2, [r3, #0]
}
     990:	bf00      	nop
     992:	371c      	adds	r7, #28
     994:	46bd      	mov	sp, r7
     996:	f85d 7b04 	ldr.w	r7, [sp], #4
     99a:	4770      	bx	lr
     99c:	cccccccd 	.word	0xcccccccd

000009a0 <FTM0CH0_IRQHandler>:
 * can be used to generate a pause (delay). After playing the tone or after the pause
 * this handler invokes an optional callback handler. This can be used to play the
 * next tone.
 */
void FTM0CH0_IRQHandler(void)
{
     9a0:	b580      	push	{r7, lr}
     9a2:	af00      	add	r7, sp, #0
  OnEnterSoundISR();

  // count down the tmrPlayTimeTicks until it is smaller or equal to tmrFrequencyTicks
  if (tmrPlayTimeTicks >= tmrFrequencyTicks)
     9a4:	4b14      	ldr	r3, [pc, #80]	; (9f8 <FTM0CH0_IRQHandler+0x58>)
     9a6:	881b      	ldrh	r3, [r3, #0]
     9a8:	461a      	mov	r2, r3
     9aa:	4b14      	ldr	r3, [pc, #80]	; (9fc <FTM0CH0_IRQHandler+0x5c>)
     9ac:	681b      	ldr	r3, [r3, #0]
     9ae:	429a      	cmp	r2, r3
     9b0:	d807      	bhi.n	9c2 <FTM0CH0_IRQHandler+0x22>
  {
    tmrPlayTimeTicks -= tmrFrequencyTicks;
     9b2:	4b12      	ldr	r3, [pc, #72]	; (9fc <FTM0CH0_IRQHandler+0x5c>)
     9b4:	681b      	ldr	r3, [r3, #0]
     9b6:	4a10      	ldr	r2, [pc, #64]	; (9f8 <FTM0CH0_IRQHandler+0x58>)
     9b8:	8812      	ldrh	r2, [r2, #0]
     9ba:	1a9b      	subs	r3, r3, r2
     9bc:	4a0f      	ldr	r2, [pc, #60]	; (9fc <FTM0CH0_IRQHandler+0x5c>)
     9be:	6013      	str	r3, [r2, #0]
     9c0:	e009      	b.n	9d6 <FTM0CH0_IRQHandler+0x36>
  }
  else
  {
    // tmrPlayTimeTicky is lower as tmrFrequencyTicks (tmrPlayTimeTicky < tmrFrequencyTicks)
    // => disable the whole timer channel 0 of FTM0
    FTM0->CONTROLS[0].CnSC = 0;
     9c2:	4b0f      	ldr	r3, [pc, #60]	; (a00 <FTM0CH0_IRQHandler+0x60>)
     9c4:	2200      	movs	r2, #0
     9c6:	60da      	str	r2, [r3, #12]

    // invoke the soundFinishedCallback function if the functionpointer isn't null!
    if (soundFinishedCallback) soundFinishedCallback();
     9c8:	4b0e      	ldr	r3, [pc, #56]	; (a04 <FTM0CH0_IRQHandler+0x64>)
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d002      	beq.n	9d6 <FTM0CH0_IRQHandler+0x36>
     9d0:	4b0c      	ldr	r3, [pc, #48]	; (a04 <FTM0CH0_IRQHandler+0x64>)
     9d2:	681b      	ldr	r3, [r3, #0]
     9d4:	4798      	blx	r3
  }

  // clear the channel 0 flag
  FTM0->CONTROLS[0].CnSC &= ~FTM_CnSC_CHF(1);
     9d6:	4b0a      	ldr	r3, [pc, #40]	; (a00 <FTM0CH0_IRQHandler+0x60>)
     9d8:	68db      	ldr	r3, [r3, #12]
     9da:	4a09      	ldr	r2, [pc, #36]	; (a00 <FTM0CH0_IRQHandler+0x60>)
     9dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     9e0:	60d3      	str	r3, [r2, #12]

  // set next compare time (value is stored in tmrFrequencyTicks)
  // => add tmrFrequencyTicks to the channel 0 value and store the result in the channel 0 value register
  FTM0->CONTROLS[0].CnV += tmrFrequencyTicks;
     9e2:	4b07      	ldr	r3, [pc, #28]	; (a00 <FTM0CH0_IRQHandler+0x60>)
     9e4:	691b      	ldr	r3, [r3, #16]
     9e6:	4a04      	ldr	r2, [pc, #16]	; (9f8 <FTM0CH0_IRQHandler+0x58>)
     9e8:	8812      	ldrh	r2, [r2, #0]
     9ea:	4611      	mov	r1, r2
     9ec:	4a04      	ldr	r2, [pc, #16]	; (a00 <FTM0CH0_IRQHandler+0x60>)
     9ee:	440b      	add	r3, r1
     9f0:	6113      	str	r3, [r2, #16]

  OnExitSoundISR();
}
     9f2:	bf00      	nop
     9f4:	bd80      	pop	{r7, pc}
     9f6:	bf00      	nop
     9f8:	20000928 	.word	0x20000928
     9fc:	200000a4 	.word	0x200000a4
     a00:	40038000 	.word	0x40038000
     a04:	200000a8 	.word	0x200000a8

00000a08 <servoParseCommand>:
 *
 * @param[in] cmd
 *   the command to parse
 */
tError servoParseCommand(const char *cmd)
{
     a08:	b580      	push	{r7, lr}
     a0a:	b088      	sub	sp, #32
     a0c:	af02      	add	r7, sp, #8
     a0e:	6078      	str	r0, [r7, #4]
  tError result = EC_INVALID_ARG;
     a10:	2302      	movs	r3, #2
     a12:	75fb      	strb	r3, [r7, #23]
  if (strcmp(cmd, "help") == 0)
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	4935      	ldr	r1, [pc, #212]	; (aec <servoParseCommand+0xe4>)
     a18:	4618      	mov	r0, r3
     a1a:	f002 fd68 	bl	34ee <strcmp>
     a1e:	4603      	mov	r3, r0
     a20:	2b00      	cmp	r3, #0
     a22:	d10e      	bne.n	a42 <servoParseCommand+0x3a>
  {
    termWriteLine("srv (servo) commands:");
     a24:	4832      	ldr	r0, [pc, #200]	; (af0 <servoParseCommand+0xe8>)
     a26:	f002 fb5d 	bl	30e4 <termWriteLine>
    termWriteLine("  help");
     a2a:	4832      	ldr	r0, [pc, #200]	; (af4 <servoParseCommand+0xec>)
     a2c:	f002 fb5a 	bl	30e4 <termWriteLine>
    termWriteLine("  pta4 [0..180]");					// Servo on pin PTA4 with 0..180 degrees
     a30:	4831      	ldr	r0, [pc, #196]	; (af8 <servoParseCommand+0xf0>)
     a32:	f002 fb57 	bl	30e4 <termWriteLine>
    termWriteLine("  status");
     a36:	4831      	ldr	r0, [pc, #196]	; (afc <servoParseCommand+0xf4>)
     a38:	f002 fb54 	bl	30e4 <termWriteLine>
    result = EC_SUCCESS;
     a3c:	2300      	movs	r3, #0
     a3e:	75fb      	strb	r3, [r7, #23]
     a40:	e04f      	b.n	ae2 <servoParseCommand+0xda>
  }
  else if (strncmp(cmd, "pta4", sizeof("pta4")-1) == 0)
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	2204      	movs	r2, #4
     a46:	492e      	ldr	r1, [pc, #184]	; (b00 <servoParseCommand+0xf8>)
     a48:	4618      	mov	r0, r3
     a4a:	f002 fd62 	bl	3512 <strncmp>
     a4e:	4603      	mov	r3, r0
     a50:	2b00      	cmp	r3, #0
     a52:	d127      	bne.n	aa4 <servoParseCommand+0x9c>
  {
	  cmd += sizeof("pta4");											// adds chars to the command char[] the amount of "pta4\0"
     a54:	687b      	ldr	r3, [r7, #4]
     a56:	3305      	adds	r3, #5
     a58:	607b      	str	r3, [r7, #4]
	  uint16_t v;
	  result = utilScanDecimal16u(&cmd, &v);							// test if it is a decimal
     a5a:	f107 0212 	add.w	r2, r7, #18
     a5e:	1d3b      	adds	r3, r7, #4
     a60:	4611      	mov	r1, r2
     a62:	4618      	mov	r0, r3
     a64:	f002 fadb 	bl	301e <utilScanDecimal16u>
     a68:	4603      	mov	r3, r0
     a6a:	75fb      	strb	r3, [r7, #23]
	  if (result != EC_SUCCESS) return result;
     a6c:	7dfb      	ldrb	r3, [r7, #23]
     a6e:	2b00      	cmp	r3, #0
     a70:	d001      	beq.n	a76 <servoParseCommand+0x6e>
     a72:	7dfb      	ldrb	r3, [r7, #23]
     a74:	e036      	b.n	ae4 <servoParseCommand+0xdc>
	  if (v < 0 || v > 180) return EC_INVALID_ARG;						// if the value is out of bound (0...180) throw error
     a76:	8a7b      	ldrh	r3, [r7, #18]
     a78:	2bb4      	cmp	r3, #180	; 0xb4
     a7a:	d901      	bls.n	a80 <servoParseCommand+0x78>
     a7c:	2302      	movs	r3, #2
     a7e:	e031      	b.n	ae4 <servoParseCommand+0xdc>
	  {
		  uint16_t ch_value = mapRangeToAnother(v, 0, 180, SERVO_CnV_MIN, SERVO_CnV_MAX);	// Map the value from (0...180) to the range of the Servo pulse width
     a80:	8a7b      	ldrh	r3, [r7, #18]
     a82:	4618      	mov	r0, r3
     a84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     a88:	9300      	str	r3, [sp, #0]
     a8a:	23fa      	movs	r3, #250	; 0xfa
     a8c:	22b4      	movs	r2, #180	; 0xb4
     a8e:	2100      	movs	r1, #0
     a90:	f002 fa9f 	bl	2fd2 <mapRangeToAnother>
     a94:	4603      	mov	r3, r0
     a96:	82bb      	strh	r3, [r7, #20]
	  	  FTM0->CONTROLS[1].CnV = ch_value;								// Set PWM pulse width
     a98:	4a1a      	ldr	r2, [pc, #104]	; (b04 <servoParseCommand+0xfc>)
     a9a:	8abb      	ldrh	r3, [r7, #20]
     a9c:	6193      	str	r3, [r2, #24]
	  }
	  result = EC_SUCCESS;
     a9e:	2300      	movs	r3, #0
     aa0:	75fb      	strb	r3, [r7, #23]
     aa2:	e01e      	b.n	ae2 <servoParseCommand+0xda>
  }
  else if (strncmp(cmd, "status", sizeof("status")-1) == 0)
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	2206      	movs	r2, #6
     aa8:	4917      	ldr	r1, [pc, #92]	; (b08 <servoParseCommand+0x100>)
     aaa:	4618      	mov	r0, r3
     aac:	f002 fd31 	bl	3512 <strncmp>
     ab0:	4603      	mov	r3, r0
     ab2:	2b00      	cmp	r3, #0
     ab4:	d115      	bne.n	ae2 <servoParseCommand+0xda>
  {
	  char degree[8];
	  // TODO implement conversion from FTM0 channel value to range of degree (0...180)
	  utilNum16uToStr(degree, sizeof(degree), FTM0->CONTROLS[1].CnV);	// converts the channel 1 pwm value to string
     ab6:	4b13      	ldr	r3, [pc, #76]	; (b04 <servoParseCommand+0xfc>)
     ab8:	699b      	ldr	r3, [r3, #24]
     aba:	b29a      	uxth	r2, r3
     abc:	f107 0308 	add.w	r3, r7, #8
     ac0:	2108      	movs	r1, #8
     ac2:	4618      	mov	r0, r3
     ac4:	f7ff fef6 	bl	8b4 <utilNum16uToStr>
	  termWrite("Servo PTA4 at: ");
     ac8:	4810      	ldr	r0, [pc, #64]	; (b0c <servoParseCommand+0x104>)
     aca:	f002 faf3 	bl	30b4 <termWrite>
	  termWrite(degree);
     ace:	f107 0308 	add.w	r3, r7, #8
     ad2:	4618      	mov	r0, r3
     ad4:	f002 faee 	bl	30b4 <termWrite>
	  termWriteLine(" degrees");
     ad8:	480d      	ldr	r0, [pc, #52]	; (b10 <servoParseCommand+0x108>)
     ada:	f002 fb03 	bl	30e4 <termWriteLine>
	  result = EC_SUCCESS;
     ade:	2300      	movs	r3, #0
     ae0:	75fb      	strb	r3, [r7, #23]
  }
  return result;
     ae2:	7dfb      	ldrb	r3, [r7, #23]
}
     ae4:	4618      	mov	r0, r3
     ae6:	3718      	adds	r7, #24
     ae8:	46bd      	mov	sp, r7
     aea:	bd80      	pop	{r7, pc}
     aec:	0000370c 	.word	0x0000370c
     af0:	00003714 	.word	0x00003714
     af4:	0000372c 	.word	0x0000372c
     af8:	00003734 	.word	0x00003734
     afc:	00003744 	.word	0x00003744
     b00:	00003750 	.word	0x00003750
     b04:	40038000 	.word	0x40038000
     b08:	00003758 	.word	0x00003758
     b0c:	00003760 	.word	0x00003760
     b10:	00003770 	.word	0x00003770

00000b14 <servoInit>:
/**
 * Initializes the servo motor:
 *
 */
void servoInit(void)
{
     b14:	b580      	push	{r7, lr}
     b16:	af00      	add	r7, sp, #0
	#ifdef SERVO_PTA4_ENABLE
	// PTA4 Muxing for FTM0_CH1
	PORTA->PCR[4] = PORT_PCR_MUX(3);
     b18:	4b08      	ldr	r3, [pc, #32]	; (b3c <servoInit+0x28>)
     b1a:	f44f 7240 	mov.w	r2, #768	; 0x300
     b1e:	611a      	str	r2, [r3, #16]

	// initialy set servo PWM to a 1ms pulse
	FTM0->CONTROLS[1].CnV = 250;
     b20:	4b07      	ldr	r3, [pc, #28]	; (b40 <servoInit+0x2c>)
     b22:	22fa      	movs	r2, #250	; 0xfa
     b24:	619a      	str	r2, [r3, #24]

	// FTM0 channel configuration as edge-align pwm and high-true pulses
	FTM0->CONTROLS[1].CnSC = FTM_CnSC_MSx(2) | FTM_CnSC_ELSx(2);
     b26:	4b06      	ldr	r3, [pc, #24]	; (b40 <servoInit+0x2c>)
     b28:	2228      	movs	r2, #40	; 0x28
     b2a:	615a      	str	r2, [r3, #20]
	#endif

  // register terminal command line handler
  termRegisterCommandLineHandler(&clh, "srv", "(servo)", servoParseCommand);
     b2c:	4b05      	ldr	r3, [pc, #20]	; (b44 <servoInit+0x30>)
     b2e:	4a06      	ldr	r2, [pc, #24]	; (b48 <servoInit+0x34>)
     b30:	4906      	ldr	r1, [pc, #24]	; (b4c <servoInit+0x38>)
     b32:	4807      	ldr	r0, [pc, #28]	; (b50 <servoInit+0x3c>)
     b34:	f000 fa62 	bl	ffc <termRegisterCommandLineHandler>
}
     b38:	bf00      	nop
     b3a:	bd80      	pop	{r7, pc}
     b3c:	40049000 	.word	0x40049000
     b40:	40038000 	.word	0x40038000
     b44:	00000a09 	.word	0x00000a09
     b48:	0000377c 	.word	0x0000377c
     b4c:	00003784 	.word	0x00003784
     b50:	200000ac 	.word	0x200000ac

00000b54 <FTM1_IRQHandler>:
/**
 * Interrupt service routine handles the
 * left quadrature decoder
 */
void FTM1_IRQHandler(void)
{
     b54:	b480      	push	{r7}
     b56:	b083      	sub	sp, #12
     b58:	af00      	add	r7, sp, #0
  static uint32_t risingB, fallingB;
  static uint32_t risingA, fallingA;
  static bool init = TRUE;
  int8_t quadValue;
  uint16_t chValue;
  uint32_t time=0;
     b5a:	2300      	movs	r3, #0
     b5c:	603b      	str	r3, [r7, #0]
  OnEnterQuadLeftISR();

  if (FTM1->SC & FTM_SC_TOF_MASK) {                 // check for timer overflow
     b5e:	4b82      	ldr	r3, [pc, #520]	; (d68 <FTM1_IRQHandler+0x214>)
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
     b66:	2b00      	cmp	r3, #0
     b68:	d014      	beq.n	b94 <FTM1_IRQHandler+0x40>
    FTM1->SC &= ~FTM_SC_TOF_MASK;                   // Clear tof flag
     b6a:	4b7f      	ldr	r3, [pc, #508]	; (d68 <FTM1_IRQHandler+0x214>)
     b6c:	681b      	ldr	r3, [r3, #0]
     b6e:	4a7e      	ldr	r2, [pc, #504]	; (d68 <FTM1_IRQHandler+0x214>)
     b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     b74:	6013      	str	r3, [r2, #0]
    risingOkB = fallingOkB = FALSE;                 // timeout => v=0 => unsync, wait for rising or falling edge
     b76:	4b7d      	ldr	r3, [pc, #500]	; (d6c <FTM1_IRQHandler+0x218>)
     b78:	2200      	movs	r2, #0
     b7a:	701a      	strb	r2, [r3, #0]
     b7c:	4b7b      	ldr	r3, [pc, #492]	; (d6c <FTM1_IRQHandler+0x218>)
     b7e:	781a      	ldrb	r2, [r3, #0]
     b80:	4b7b      	ldr	r3, [pc, #492]	; (d70 <FTM1_IRQHandler+0x21c>)
     b82:	701a      	strb	r2, [r3, #0]
    risingOkA = fallingOkA = FALSE;
     b84:	4b7b      	ldr	r3, [pc, #492]	; (d74 <FTM1_IRQHandler+0x220>)
     b86:	2200      	movs	r2, #0
     b88:	701a      	strb	r2, [r3, #0]
     b8a:	4b7a      	ldr	r3, [pc, #488]	; (d74 <FTM1_IRQHandler+0x220>)
     b8c:	781a      	ldrb	r2, [r3, #0]
     b8e:	4b7a      	ldr	r3, [pc, #488]	; (d78 <FTM1_IRQHandler+0x224>)
     b90:	701a      	strb	r2, [r3, #0]
     b92:	e054      	b.n	c3e <FTM1_IRQHandler+0xea>
  }
  else {
    bits <<= 1;                                     // quad decoder => determine the state
     b94:	4b79      	ldr	r3, [pc, #484]	; (d7c <FTM1_IRQHandler+0x228>)
     b96:	781b      	ldrb	r3, [r3, #0]
     b98:	005b      	lsls	r3, r3, #1
     b9a:	b2da      	uxtb	r2, r3
     b9c:	4b77      	ldr	r3, [pc, #476]	; (d7c <FTM1_IRQHandler+0x228>)
     b9e:	701a      	strb	r2, [r3, #0]
    bits |= QuadLeftA;
     ba0:	4b77      	ldr	r3, [pc, #476]	; (d80 <FTM1_IRQHandler+0x22c>)
     ba2:	691b      	ldr	r3, [r3, #16]
     ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     ba8:	2b00      	cmp	r3, #0
     baa:	bf14      	ite	ne
     bac:	2301      	movne	r3, #1
     bae:	2300      	moveq	r3, #0
     bb0:	b2db      	uxtb	r3, r3
     bb2:	b25a      	sxtb	r2, r3
     bb4:	4b71      	ldr	r3, [pc, #452]	; (d7c <FTM1_IRQHandler+0x228>)
     bb6:	781b      	ldrb	r3, [r3, #0]
     bb8:	b25b      	sxtb	r3, r3
     bba:	4313      	orrs	r3, r2
     bbc:	b25b      	sxtb	r3, r3
     bbe:	b2da      	uxtb	r2, r3
     bc0:	4b6e      	ldr	r3, [pc, #440]	; (d7c <FTM1_IRQHandler+0x228>)
     bc2:	701a      	strb	r2, [r3, #0]
    bits <<= 1;
     bc4:	4b6d      	ldr	r3, [pc, #436]	; (d7c <FTM1_IRQHandler+0x228>)
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	005b      	lsls	r3, r3, #1
     bca:	b2da      	uxtb	r2, r3
     bcc:	4b6b      	ldr	r3, [pc, #428]	; (d7c <FTM1_IRQHandler+0x228>)
     bce:	701a      	strb	r2, [r3, #0]
    bits |= QuadLeftB;
     bd0:	4b6b      	ldr	r3, [pc, #428]	; (d80 <FTM1_IRQHandler+0x22c>)
     bd2:	691b      	ldr	r3, [r3, #16]
     bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     bd8:	2b00      	cmp	r3, #0
     bda:	bf14      	ite	ne
     bdc:	2301      	movne	r3, #1
     bde:	2300      	moveq	r3, #0
     be0:	b2db      	uxtb	r3, r3
     be2:	b25a      	sxtb	r2, r3
     be4:	4b65      	ldr	r3, [pc, #404]	; (d7c <FTM1_IRQHandler+0x228>)
     be6:	781b      	ldrb	r3, [r3, #0]
     be8:	b25b      	sxtb	r3, r3
     bea:	4313      	orrs	r3, r2
     bec:	b25b      	sxtb	r3, r3
     bee:	b2da      	uxtb	r2, r3
     bf0:	4b62      	ldr	r3, [pc, #392]	; (d7c <FTM1_IRQHandler+0x228>)
     bf2:	701a      	strb	r2, [r3, #0]

    if (init) init = FALSE;                         // ignore the first call
     bf4:	4b63      	ldr	r3, [pc, #396]	; (d84 <FTM1_IRQHandler+0x230>)
     bf6:	781b      	ldrb	r3, [r3, #0]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d003      	beq.n	c04 <FTM1_IRQHandler+0xb0>
     bfc:	4b61      	ldr	r3, [pc, #388]	; (d84 <FTM1_IRQHandler+0x230>)
     bfe:	2200      	movs	r2, #0
     c00:	701a      	strb	r2, [r3, #0]
     c02:	e01c      	b.n	c3e <FTM1_IRQHandler+0xea>
    else {
      quadValue = quadTable[bits & 0x0F];           // calc new value with lookup-table
     c04:	4b5d      	ldr	r3, [pc, #372]	; (d7c <FTM1_IRQHandler+0x228>)
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	f003 030f 	and.w	r3, r3, #15
     c0c:	4a5e      	ldr	r2, [pc, #376]	; (d88 <FTM1_IRQHandler+0x234>)
     c0e:	5cd3      	ldrb	r3, [r2, r3]
     c10:	71fb      	strb	r3, [r7, #7]
      if (quadValue != ERR) ticksLeft += quadValue; // add/sub tick
     c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
     c16:	2b05      	cmp	r3, #5
     c18:	d007      	beq.n	c2a <FTM1_IRQHandler+0xd6>
     c1a:	f997 2007 	ldrsb.w	r2, [r7, #7]
     c1e:	4b5b      	ldr	r3, [pc, #364]	; (d8c <FTM1_IRQHandler+0x238>)
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	4413      	add	r3, r2
     c24:	4a59      	ldr	r2, [pc, #356]	; (d8c <FTM1_IRQHandler+0x238>)
     c26:	6013      	str	r3, [r2, #0]
     c28:	e009      	b.n	c3e <FTM1_IRQHandler+0xea>
      else if (errorLeft < 255) errorLeft++;        // increment error counter if error has been occurred
     c2a:	4b59      	ldr	r3, [pc, #356]	; (d90 <FTM1_IRQHandler+0x23c>)
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2bff      	cmp	r3, #255	; 0xff
     c30:	d005      	beq.n	c3e <FTM1_IRQHandler+0xea>
     c32:	4b57      	ldr	r3, [pc, #348]	; (d90 <FTM1_IRQHandler+0x23c>)
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	3301      	adds	r3, #1
     c38:	b2da      	uxtb	r2, r3
     c3a:	4b55      	ldr	r3, [pc, #340]	; (d90 <FTM1_IRQHandler+0x23c>)
     c3c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (FTM1->CONTROLS[0].CnSC & FTM_CnSC_CHF_MASK) chValue = FTM1->CONTROLS[0].CnV;  // determine the channel chValue of this interrupt (CH0 or CH1)
     c3e:	4b4a      	ldr	r3, [pc, #296]	; (d68 <FTM1_IRQHandler+0x214>)
     c40:	68db      	ldr	r3, [r3, #12]
     c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
     c46:	2b00      	cmp	r3, #0
     c48:	d002      	beq.n	c50 <FTM1_IRQHandler+0xfc>
     c4a:	4b47      	ldr	r3, [pc, #284]	; (d68 <FTM1_IRQHandler+0x214>)
     c4c:	691b      	ldr	r3, [r3, #16]
     c4e:	80bb      	strh	r3, [r7, #4]
  if (FTM1->CONTROLS[1].CnSC & FTM_CnSC_CHF_MASK) chValue = FTM1->CONTROLS[1].CnV;
     c50:	4b45      	ldr	r3, [pc, #276]	; (d68 <FTM1_IRQHandler+0x214>)
     c52:	695b      	ldr	r3, [r3, #20]
     c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
     c58:	2b00      	cmp	r3, #0
     c5a:	d002      	beq.n	c62 <FTM1_IRQHandler+0x10e>
     c5c:	4b42      	ldr	r3, [pc, #264]	; (d68 <FTM1_IRQHandler+0x214>)
     c5e:	699b      	ldr	r3, [r3, #24]
     c60:	80bb      	strh	r3, [r7, #4]

  risingB += chValue;                         // add the channel chValue to all measurements
     c62:	88ba      	ldrh	r2, [r7, #4]
     c64:	4b4b      	ldr	r3, [pc, #300]	; (d94 <FTM1_IRQHandler+0x240>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	4413      	add	r3, r2
     c6a:	4a4a      	ldr	r2, [pc, #296]	; (d94 <FTM1_IRQHandler+0x240>)
     c6c:	6013      	str	r3, [r2, #0]
  fallingB += chValue;
     c6e:	88ba      	ldrh	r2, [r7, #4]
     c70:	4b49      	ldr	r3, [pc, #292]	; (d98 <FTM1_IRQHandler+0x244>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	4413      	add	r3, r2
     c76:	4a48      	ldr	r2, [pc, #288]	; (d98 <FTM1_IRQHandler+0x244>)
     c78:	6013      	str	r3, [r2, #0]
  risingA += chValue;
     c7a:	88ba      	ldrh	r2, [r7, #4]
     c7c:	4b47      	ldr	r3, [pc, #284]	; (d9c <FTM1_IRQHandler+0x248>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	4413      	add	r3, r2
     c82:	4a46      	ldr	r2, [pc, #280]	; (d9c <FTM1_IRQHandler+0x248>)
     c84:	6013      	str	r3, [r2, #0]
  fallingA += chValue;
     c86:	88ba      	ldrh	r2, [r7, #4]
     c88:	4b45      	ldr	r3, [pc, #276]	; (da0 <FTM1_IRQHandler+0x24c>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	4413      	add	r3, r2
     c8e:	4a44      	ldr	r2, [pc, #272]	; (da0 <FTM1_IRQHandler+0x24c>)
     c90:	6013      	str	r3, [r2, #0]

  if (FTM1->CONTROLS[0].CnSC & FTM_CnSC_CHF_MASK) { // check for channel 0 interrupt
     c92:	4b35      	ldr	r3, [pc, #212]	; (d68 <FTM1_IRQHandler+0x214>)
     c94:	68db      	ldr	r3, [r3, #12]
     c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
     c9a:	2b00      	cmp	r3, #0
     c9c:	d026      	beq.n	cec <FTM1_IRQHandler+0x198>
    FTM1->CONTROLS[0].CnSC &= ~FTM_CnSC_CHF_MASK;   // clear interrupt flag
     c9e:	4b32      	ldr	r3, [pc, #200]	; (d68 <FTM1_IRQHandler+0x214>)
     ca0:	68db      	ldr	r3, [r3, #12]
     ca2:	4a31      	ldr	r2, [pc, #196]	; (d68 <FTM1_IRQHandler+0x214>)
     ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     ca8:	60d3      	str	r3, [r2, #12]
    if (QuadLeftB) {                                // rising edge:
     caa:	4b35      	ldr	r3, [pc, #212]	; (d80 <FTM1_IRQHandler+0x22c>)
     cac:	691b      	ldr	r3, [r3, #16]
     cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     cb2:	2b00      	cmp	r3, #0
     cb4:	d00d      	beq.n	cd2 <FTM1_IRQHandler+0x17e>
      if (risingOkB) time = risingB;                //   if second or later call => period is valid
     cb6:	4b2e      	ldr	r3, [pc, #184]	; (d70 <FTM1_IRQHandler+0x21c>)
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	2b00      	cmp	r3, #0
     cbc:	d002      	beq.n	cc4 <FTM1_IRQHandler+0x170>
     cbe:	4b35      	ldr	r3, [pc, #212]	; (d94 <FTM1_IRQHandler+0x240>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	603b      	str	r3, [r7, #0]
      risingB = 0;                                  //   reset period measuring time
     cc4:	4b33      	ldr	r3, [pc, #204]	; (d94 <FTM1_IRQHandler+0x240>)
     cc6:	2200      	movs	r2, #0
     cc8:	601a      	str	r2, [r3, #0]
      risingOkB = TRUE;                             //   set the flag after first call
     cca:	4b29      	ldr	r3, [pc, #164]	; (d70 <FTM1_IRQHandler+0x21c>)
     ccc:	2201      	movs	r2, #1
     cce:	701a      	strb	r2, [r3, #0]
     cd0:	e00c      	b.n	cec <FTM1_IRQHandler+0x198>
    }
    else {                                          // falling edge:
      if (fallingOkB) time = fallingB;              //   if second or later call => period is valid
     cd2:	4b26      	ldr	r3, [pc, #152]	; (d6c <FTM1_IRQHandler+0x218>)
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d002      	beq.n	ce0 <FTM1_IRQHandler+0x18c>
     cda:	4b2f      	ldr	r3, [pc, #188]	; (d98 <FTM1_IRQHandler+0x244>)
     cdc:	681b      	ldr	r3, [r3, #0]
     cde:	603b      	str	r3, [r7, #0]
      fallingB = 0;                                 //   reset period measuring time
     ce0:	4b2d      	ldr	r3, [pc, #180]	; (d98 <FTM1_IRQHandler+0x244>)
     ce2:	2200      	movs	r2, #0
     ce4:	601a      	str	r2, [r3, #0]
      fallingOkB = TRUE;                            //   set the flag after first call
     ce6:	4b21      	ldr	r3, [pc, #132]	; (d6c <FTM1_IRQHandler+0x218>)
     ce8:	2201      	movs	r2, #1
     cea:	701a      	strb	r2, [r3, #0]
    }
  }

  if (FTM1->CONTROLS[1].CnSC & FTM_CnSC_CHF_MASK) { // check for channel 1 interrupte
     cec:	4b1e      	ldr	r3, [pc, #120]	; (d68 <FTM1_IRQHandler+0x214>)
     cee:	695b      	ldr	r3, [r3, #20]
     cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     cf4:	2b00      	cmp	r3, #0
     cf6:	d026      	beq.n	d46 <FTM1_IRQHandler+0x1f2>
    FTM1->CONTROLS[1].CnSC &= ~FTM_CnSC_CHF_MASK;   // clear interrupt fla
     cf8:	4b1b      	ldr	r3, [pc, #108]	; (d68 <FTM1_IRQHandler+0x214>)
     cfa:	695b      	ldr	r3, [r3, #20]
     cfc:	4a1a      	ldr	r2, [pc, #104]	; (d68 <FTM1_IRQHandler+0x214>)
     cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     d02:	6153      	str	r3, [r2, #20]
    if (QuadLeftA) {                                // rising edge:
     d04:	4b1e      	ldr	r3, [pc, #120]	; (d80 <FTM1_IRQHandler+0x22c>)
     d06:	691b      	ldr	r3, [r3, #16]
     d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     d0c:	2b00      	cmp	r3, #0
     d0e:	d00d      	beq.n	d2c <FTM1_IRQHandler+0x1d8>
      if (risingOkA) time = risingA;                //   if second or later call => period is valid
     d10:	4b19      	ldr	r3, [pc, #100]	; (d78 <FTM1_IRQHandler+0x224>)
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	2b00      	cmp	r3, #0
     d16:	d002      	beq.n	d1e <FTM1_IRQHandler+0x1ca>
     d18:	4b20      	ldr	r3, [pc, #128]	; (d9c <FTM1_IRQHandler+0x248>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	603b      	str	r3, [r7, #0]
      risingA = 0;                                  //   reset period measuring time
     d1e:	4b1f      	ldr	r3, [pc, #124]	; (d9c <FTM1_IRQHandler+0x248>)
     d20:	2200      	movs	r2, #0
     d22:	601a      	str	r2, [r3, #0]
      risingOkA = TRUE;                             //   set flag after first call
     d24:	4b14      	ldr	r3, [pc, #80]	; (d78 <FTM1_IRQHandler+0x224>)
     d26:	2201      	movs	r2, #1
     d28:	701a      	strb	r2, [r3, #0]
     d2a:	e00c      	b.n	d46 <FTM1_IRQHandler+0x1f2>
    }
    else {                                          // falling edge:
      if (fallingOkA) time = fallingA;              //   if second or later call => period is valid
     d2c:	4b11      	ldr	r3, [pc, #68]	; (d74 <FTM1_IRQHandler+0x220>)
     d2e:	781b      	ldrb	r3, [r3, #0]
     d30:	2b00      	cmp	r3, #0
     d32:	d002      	beq.n	d3a <FTM1_IRQHandler+0x1e6>
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <FTM1_IRQHandler+0x24c>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	603b      	str	r3, [r7, #0]
      fallingA = 0;                                 //   reset period measuring timer
     d3a:	4b19      	ldr	r3, [pc, #100]	; (da0 <FTM1_IRQHandler+0x24c>)
     d3c:	2200      	movs	r2, #0
     d3e:	601a      	str	r2, [r3, #0]
      fallingOkA = TRUE;                            //   set the flag after first call
     d40:	4b0c      	ldr	r3, [pc, #48]	; (d74 <FTM1_IRQHandler+0x220>)
     d42:	2201      	movs	r2, #1
     d44:	701a      	strb	r2, [r3, #0]
    }
  }
  timeLeft = (quadValue > 0) ? time : -time;        // determine forward/backward driving
     d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
     d4a:	2b00      	cmp	r3, #0
     d4c:	dc02      	bgt.n	d54 <FTM1_IRQHandler+0x200>
     d4e:	683b      	ldr	r3, [r7, #0]
     d50:	425b      	negs	r3, r3
     d52:	e000      	b.n	d56 <FTM1_IRQHandler+0x202>
     d54:	683b      	ldr	r3, [r7, #0]
     d56:	4a13      	ldr	r2, [pc, #76]	; (da4 <FTM1_IRQHandler+0x250>)
     d58:	6013      	str	r3, [r2, #0]
  OnExitQuadLeftISR();
}
     d5a:	bf00      	nop
     d5c:	370c      	adds	r7, #12
     d5e:	46bd      	mov	sp, r7
     d60:	f85d 7b04 	ldr.w	r7, [sp], #4
     d64:	4770      	bx	lr
     d66:	bf00      	nop
     d68:	40039000 	.word	0x40039000
     d6c:	20000946 	.word	0x20000946
     d70:	20000947 	.word	0x20000947
     d74:	20000948 	.word	0x20000948
     d78:	20000949 	.word	0x20000949
     d7c:	2000094a 	.word	0x2000094a
     d80:	400ff000 	.word	0x400ff000
     d84:	20000068 	.word	0x20000068
     d88:	00003788 	.word	0x00003788
     d8c:	200000e4 	.word	0x200000e4
     d90:	20000944 	.word	0x20000944
     d94:	200000f4 	.word	0x200000f4
     d98:	200000f8 	.word	0x200000f8
     d9c:	200000fc 	.word	0x200000fc
     da0:	20000100 	.word	0x20000100
     da4:	200000e8 	.word	0x200000e8

00000da8 <FTM2_IRQHandler>:
/**
 * Interrupt service routine handles the
 * right quadrature decoder
 */
void FTM2_IRQHandler(void)
{
     da8:	b480      	push	{r7}
     daa:	b083      	sub	sp, #12
     dac:	af00      	add	r7, sp, #0
  static uint32_t risingB, fallingB;
  static uint32_t risingA, fallingA;
  static bool init = TRUE;
  int8_t quadValue;
  uint16_t chValue;
  uint32_t time=0;
     dae:	2300      	movs	r3, #0
     db0:	603b      	str	r3, [r7, #0]
  OnEnterQuadRightISR();

  if (FTM2->SC & FTM_SC_TOF_MASK) {
     db2:	4b82      	ldr	r3, [pc, #520]	; (fbc <FTM2_IRQHandler+0x214>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
     dba:	2b00      	cmp	r3, #0
     dbc:	d014      	beq.n	de8 <FTM2_IRQHandler+0x40>
    FTM2->SC &= ~FTM_SC_TOF_MASK;
     dbe:	4b7f      	ldr	r3, [pc, #508]	; (fbc <FTM2_IRQHandler+0x214>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	4a7e      	ldr	r2, [pc, #504]	; (fbc <FTM2_IRQHandler+0x214>)
     dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     dc8:	6013      	str	r3, [r2, #0]
    risingOkB = fallingOkB = FALSE;
     dca:	4b7d      	ldr	r3, [pc, #500]	; (fc0 <FTM2_IRQHandler+0x218>)
     dcc:	2200      	movs	r2, #0
     dce:	701a      	strb	r2, [r3, #0]
     dd0:	4b7b      	ldr	r3, [pc, #492]	; (fc0 <FTM2_IRQHandler+0x218>)
     dd2:	781a      	ldrb	r2, [r3, #0]
     dd4:	4b7b      	ldr	r3, [pc, #492]	; (fc4 <FTM2_IRQHandler+0x21c>)
     dd6:	701a      	strb	r2, [r3, #0]
    risingOkA = fallingOkA = FALSE;
     dd8:	4b7b      	ldr	r3, [pc, #492]	; (fc8 <FTM2_IRQHandler+0x220>)
     dda:	2200      	movs	r2, #0
     ddc:	701a      	strb	r2, [r3, #0]
     dde:	4b7a      	ldr	r3, [pc, #488]	; (fc8 <FTM2_IRQHandler+0x220>)
     de0:	781a      	ldrb	r2, [r3, #0]
     de2:	4b7a      	ldr	r3, [pc, #488]	; (fcc <FTM2_IRQHandler+0x224>)
     de4:	701a      	strb	r2, [r3, #0]
     de6:	e054      	b.n	e92 <FTM2_IRQHandler+0xea>
  }
  else {
    bits <<= 1;
     de8:	4b79      	ldr	r3, [pc, #484]	; (fd0 <FTM2_IRQHandler+0x228>)
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	005b      	lsls	r3, r3, #1
     dee:	b2da      	uxtb	r2, r3
     df0:	4b77      	ldr	r3, [pc, #476]	; (fd0 <FTM2_IRQHandler+0x228>)
     df2:	701a      	strb	r2, [r3, #0]
    bits |= QuadRightA;
     df4:	4b77      	ldr	r3, [pc, #476]	; (fd4 <FTM2_IRQHandler+0x22c>)
     df6:	691b      	ldr	r3, [r3, #16]
     df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
     dfc:	2b00      	cmp	r3, #0
     dfe:	bf14      	ite	ne
     e00:	2301      	movne	r3, #1
     e02:	2300      	moveq	r3, #0
     e04:	b2db      	uxtb	r3, r3
     e06:	b25a      	sxtb	r2, r3
     e08:	4b71      	ldr	r3, [pc, #452]	; (fd0 <FTM2_IRQHandler+0x228>)
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	b25b      	sxtb	r3, r3
     e0e:	4313      	orrs	r3, r2
     e10:	b25b      	sxtb	r3, r3
     e12:	b2da      	uxtb	r2, r3
     e14:	4b6e      	ldr	r3, [pc, #440]	; (fd0 <FTM2_IRQHandler+0x228>)
     e16:	701a      	strb	r2, [r3, #0]
    bits <<= 1;
     e18:	4b6d      	ldr	r3, [pc, #436]	; (fd0 <FTM2_IRQHandler+0x228>)
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	005b      	lsls	r3, r3, #1
     e1e:	b2da      	uxtb	r2, r3
     e20:	4b6b      	ldr	r3, [pc, #428]	; (fd0 <FTM2_IRQHandler+0x228>)
     e22:	701a      	strb	r2, [r3, #0]
    bits |= QuadRightB;
     e24:	4b6b      	ldr	r3, [pc, #428]	; (fd4 <FTM2_IRQHandler+0x22c>)
     e26:	691b      	ldr	r3, [r3, #16]
     e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
     e2c:	2b00      	cmp	r3, #0
     e2e:	bf14      	ite	ne
     e30:	2301      	movne	r3, #1
     e32:	2300      	moveq	r3, #0
     e34:	b2db      	uxtb	r3, r3
     e36:	b25a      	sxtb	r2, r3
     e38:	4b65      	ldr	r3, [pc, #404]	; (fd0 <FTM2_IRQHandler+0x228>)
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	b25b      	sxtb	r3, r3
     e3e:	4313      	orrs	r3, r2
     e40:	b25b      	sxtb	r3, r3
     e42:	b2da      	uxtb	r2, r3
     e44:	4b62      	ldr	r3, [pc, #392]	; (fd0 <FTM2_IRQHandler+0x228>)
     e46:	701a      	strb	r2, [r3, #0]

    if (init) init = FALSE;
     e48:	4b63      	ldr	r3, [pc, #396]	; (fd8 <FTM2_IRQHandler+0x230>)
     e4a:	781b      	ldrb	r3, [r3, #0]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d003      	beq.n	e58 <FTM2_IRQHandler+0xb0>
     e50:	4b61      	ldr	r3, [pc, #388]	; (fd8 <FTM2_IRQHandler+0x230>)
     e52:	2200      	movs	r2, #0
     e54:	701a      	strb	r2, [r3, #0]
     e56:	e01c      	b.n	e92 <FTM2_IRQHandler+0xea>
    else {
      quadValue = quadTable[bits & 0x0F];
     e58:	4b5d      	ldr	r3, [pc, #372]	; (fd0 <FTM2_IRQHandler+0x228>)
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	f003 030f 	and.w	r3, r3, #15
     e60:	4a5e      	ldr	r2, [pc, #376]	; (fdc <FTM2_IRQHandler+0x234>)
     e62:	5cd3      	ldrb	r3, [r2, r3]
     e64:	71fb      	strb	r3, [r7, #7]
      if (quadValue != ERR) ticksRight -= quadValue;
     e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
     e6a:	2b05      	cmp	r3, #5
     e6c:	d007      	beq.n	e7e <FTM2_IRQHandler+0xd6>
     e6e:	4b5c      	ldr	r3, [pc, #368]	; (fe0 <FTM2_IRQHandler+0x238>)
     e70:	681a      	ldr	r2, [r3, #0]
     e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
     e76:	1ad3      	subs	r3, r2, r3
     e78:	4a59      	ldr	r2, [pc, #356]	; (fe0 <FTM2_IRQHandler+0x238>)
     e7a:	6013      	str	r3, [r2, #0]
     e7c:	e009      	b.n	e92 <FTM2_IRQHandler+0xea>
      else if (errorRight < 255) errorRight++;
     e7e:	4b59      	ldr	r3, [pc, #356]	; (fe4 <FTM2_IRQHandler+0x23c>)
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	2bff      	cmp	r3, #255	; 0xff
     e84:	d005      	beq.n	e92 <FTM2_IRQHandler+0xea>
     e86:	4b57      	ldr	r3, [pc, #348]	; (fe4 <FTM2_IRQHandler+0x23c>)
     e88:	781b      	ldrb	r3, [r3, #0]
     e8a:	3301      	adds	r3, #1
     e8c:	b2da      	uxtb	r2, r3
     e8e:	4b55      	ldr	r3, [pc, #340]	; (fe4 <FTM2_IRQHandler+0x23c>)
     e90:	701a      	strb	r2, [r3, #0]
    }
  }

  if (FTM2->CONTROLS[0].CnSC & FTM_CnSC_CHF_MASK) chValue = FTM2->CONTROLS[0].CnV;
     e92:	4b4a      	ldr	r3, [pc, #296]	; (fbc <FTM2_IRQHandler+0x214>)
     e94:	68db      	ldr	r3, [r3, #12]
     e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
     e9a:	2b00      	cmp	r3, #0
     e9c:	d002      	beq.n	ea4 <FTM2_IRQHandler+0xfc>
     e9e:	4b47      	ldr	r3, [pc, #284]	; (fbc <FTM2_IRQHandler+0x214>)
     ea0:	691b      	ldr	r3, [r3, #16]
     ea2:	80bb      	strh	r3, [r7, #4]
  if (FTM2->CONTROLS[1].CnSC & FTM_CnSC_CHF_MASK) chValue = FTM2->CONTROLS[1].CnV;
     ea4:	4b45      	ldr	r3, [pc, #276]	; (fbc <FTM2_IRQHandler+0x214>)
     ea6:	695b      	ldr	r3, [r3, #20]
     ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     eac:	2b00      	cmp	r3, #0
     eae:	d002      	beq.n	eb6 <FTM2_IRQHandler+0x10e>
     eb0:	4b42      	ldr	r3, [pc, #264]	; (fbc <FTM2_IRQHandler+0x214>)
     eb2:	699b      	ldr	r3, [r3, #24]
     eb4:	80bb      	strh	r3, [r7, #4]

  risingB += chValue;
     eb6:	88ba      	ldrh	r2, [r7, #4]
     eb8:	4b4b      	ldr	r3, [pc, #300]	; (fe8 <FTM2_IRQHandler+0x240>)
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	4413      	add	r3, r2
     ebe:	4a4a      	ldr	r2, [pc, #296]	; (fe8 <FTM2_IRQHandler+0x240>)
     ec0:	6013      	str	r3, [r2, #0]
  fallingB += chValue;
     ec2:	88ba      	ldrh	r2, [r7, #4]
     ec4:	4b49      	ldr	r3, [pc, #292]	; (fec <FTM2_IRQHandler+0x244>)
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	4413      	add	r3, r2
     eca:	4a48      	ldr	r2, [pc, #288]	; (fec <FTM2_IRQHandler+0x244>)
     ecc:	6013      	str	r3, [r2, #0]
  risingA += chValue;
     ece:	88ba      	ldrh	r2, [r7, #4]
     ed0:	4b47      	ldr	r3, [pc, #284]	; (ff0 <FTM2_IRQHandler+0x248>)
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	4413      	add	r3, r2
     ed6:	4a46      	ldr	r2, [pc, #280]	; (ff0 <FTM2_IRQHandler+0x248>)
     ed8:	6013      	str	r3, [r2, #0]
  fallingA += chValue;
     eda:	88ba      	ldrh	r2, [r7, #4]
     edc:	4b45      	ldr	r3, [pc, #276]	; (ff4 <FTM2_IRQHandler+0x24c>)
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	4413      	add	r3, r2
     ee2:	4a44      	ldr	r2, [pc, #272]	; (ff4 <FTM2_IRQHandler+0x24c>)
     ee4:	6013      	str	r3, [r2, #0]

  if (FTM2->CONTROLS[0].CnSC & FTM_CnSC_CHF_MASK) {
     ee6:	4b35      	ldr	r3, [pc, #212]	; (fbc <FTM2_IRQHandler+0x214>)
     ee8:	68db      	ldr	r3, [r3, #12]
     eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
     eee:	2b00      	cmp	r3, #0
     ef0:	d026      	beq.n	f40 <FTM2_IRQHandler+0x198>
    FTM2->CONTROLS[0].CnSC &= ~FTM_CnSC_CHF_MASK;
     ef2:	4b32      	ldr	r3, [pc, #200]	; (fbc <FTM2_IRQHandler+0x214>)
     ef4:	68db      	ldr	r3, [r3, #12]
     ef6:	4a31      	ldr	r2, [pc, #196]	; (fbc <FTM2_IRQHandler+0x214>)
     ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     efc:	60d3      	str	r3, [r2, #12]
    if (QuadRightB) {
     efe:	4b35      	ldr	r3, [pc, #212]	; (fd4 <FTM2_IRQHandler+0x22c>)
     f00:	691b      	ldr	r3, [r3, #16]
     f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
     f06:	2b00      	cmp	r3, #0
     f08:	d00d      	beq.n	f26 <FTM2_IRQHandler+0x17e>
      if (risingOkB) time = risingB;
     f0a:	4b2e      	ldr	r3, [pc, #184]	; (fc4 <FTM2_IRQHandler+0x21c>)
     f0c:	781b      	ldrb	r3, [r3, #0]
     f0e:	2b00      	cmp	r3, #0
     f10:	d002      	beq.n	f18 <FTM2_IRQHandler+0x170>
     f12:	4b35      	ldr	r3, [pc, #212]	; (fe8 <FTM2_IRQHandler+0x240>)
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	603b      	str	r3, [r7, #0]
      risingB = 0;
     f18:	4b33      	ldr	r3, [pc, #204]	; (fe8 <FTM2_IRQHandler+0x240>)
     f1a:	2200      	movs	r2, #0
     f1c:	601a      	str	r2, [r3, #0]
      risingOkB = TRUE;
     f1e:	4b29      	ldr	r3, [pc, #164]	; (fc4 <FTM2_IRQHandler+0x21c>)
     f20:	2201      	movs	r2, #1
     f22:	701a      	strb	r2, [r3, #0]
     f24:	e00c      	b.n	f40 <FTM2_IRQHandler+0x198>
    }
    else {
      if (fallingOkB) time = fallingB;
     f26:	4b26      	ldr	r3, [pc, #152]	; (fc0 <FTM2_IRQHandler+0x218>)
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d002      	beq.n	f34 <FTM2_IRQHandler+0x18c>
     f2e:	4b2f      	ldr	r3, [pc, #188]	; (fec <FTM2_IRQHandler+0x244>)
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	603b      	str	r3, [r7, #0]
      fallingB = 0;
     f34:	4b2d      	ldr	r3, [pc, #180]	; (fec <FTM2_IRQHandler+0x244>)
     f36:	2200      	movs	r2, #0
     f38:	601a      	str	r2, [r3, #0]
      fallingOkB = TRUE;
     f3a:	4b21      	ldr	r3, [pc, #132]	; (fc0 <FTM2_IRQHandler+0x218>)
     f3c:	2201      	movs	r2, #1
     f3e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (FTM2->CONTROLS[1].CnSC & FTM_CnSC_CHF_MASK) {
     f40:	4b1e      	ldr	r3, [pc, #120]	; (fbc <FTM2_IRQHandler+0x214>)
     f42:	695b      	ldr	r3, [r3, #20]
     f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
     f48:	2b00      	cmp	r3, #0
     f4a:	d026      	beq.n	f9a <FTM2_IRQHandler+0x1f2>
    FTM2->CONTROLS[1].CnSC &= ~FTM_CnSC_CHF_MASK;
     f4c:	4b1b      	ldr	r3, [pc, #108]	; (fbc <FTM2_IRQHandler+0x214>)
     f4e:	695b      	ldr	r3, [r3, #20]
     f50:	4a1a      	ldr	r2, [pc, #104]	; (fbc <FTM2_IRQHandler+0x214>)
     f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     f56:	6153      	str	r3, [r2, #20]
    if (QuadRightA) {
     f58:	4b1e      	ldr	r3, [pc, #120]	; (fd4 <FTM2_IRQHandler+0x22c>)
     f5a:	691b      	ldr	r3, [r3, #16]
     f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
     f60:	2b00      	cmp	r3, #0
     f62:	d00d      	beq.n	f80 <FTM2_IRQHandler+0x1d8>
      if (risingOkA) time = risingA;
     f64:	4b19      	ldr	r3, [pc, #100]	; (fcc <FTM2_IRQHandler+0x224>)
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	2b00      	cmp	r3, #0
     f6a:	d002      	beq.n	f72 <FTM2_IRQHandler+0x1ca>
     f6c:	4b20      	ldr	r3, [pc, #128]	; (ff0 <FTM2_IRQHandler+0x248>)
     f6e:	681b      	ldr	r3, [r3, #0]
     f70:	603b      	str	r3, [r7, #0]
      risingA = 0;
     f72:	4b1f      	ldr	r3, [pc, #124]	; (ff0 <FTM2_IRQHandler+0x248>)
     f74:	2200      	movs	r2, #0
     f76:	601a      	str	r2, [r3, #0]
      risingOkA = TRUE;
     f78:	4b14      	ldr	r3, [pc, #80]	; (fcc <FTM2_IRQHandler+0x224>)
     f7a:	2201      	movs	r2, #1
     f7c:	701a      	strb	r2, [r3, #0]
     f7e:	e00c      	b.n	f9a <FTM2_IRQHandler+0x1f2>
    }
    else {
      if (fallingOkA) time = fallingA;
     f80:	4b11      	ldr	r3, [pc, #68]	; (fc8 <FTM2_IRQHandler+0x220>)
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	2b00      	cmp	r3, #0
     f86:	d002      	beq.n	f8e <FTM2_IRQHandler+0x1e6>
     f88:	4b1a      	ldr	r3, [pc, #104]	; (ff4 <FTM2_IRQHandler+0x24c>)
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	603b      	str	r3, [r7, #0]
      fallingA = 0;
     f8e:	4b19      	ldr	r3, [pc, #100]	; (ff4 <FTM2_IRQHandler+0x24c>)
     f90:	2200      	movs	r2, #0
     f92:	601a      	str	r2, [r3, #0]
      fallingOkA = TRUE;
     f94:	4b0c      	ldr	r3, [pc, #48]	; (fc8 <FTM2_IRQHandler+0x220>)
     f96:	2201      	movs	r2, #1
     f98:	701a      	strb	r2, [r3, #0]
    }
  }
  timeRight = (quadValue > 0) ? -time : time;
     f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
     f9e:	2b00      	cmp	r3, #0
     fa0:	dd02      	ble.n	fa8 <FTM2_IRQHandler+0x200>
     fa2:	683b      	ldr	r3, [r7, #0]
     fa4:	425b      	negs	r3, r3
     fa6:	e000      	b.n	faa <FTM2_IRQHandler+0x202>
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	4a13      	ldr	r2, [pc, #76]	; (ff8 <FTM2_IRQHandler+0x250>)
     fac:	6013      	str	r3, [r2, #0]
  OnExitQuadRightISR();
}
     fae:	bf00      	nop
     fb0:	370c      	adds	r7, #12
     fb2:	46bd      	mov	sp, r7
     fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb8:	4770      	bx	lr
     fba:	bf00      	nop
     fbc:	4003a000 	.word	0x4003a000
     fc0:	2000094b 	.word	0x2000094b
     fc4:	2000094c 	.word	0x2000094c
     fc8:	2000094d 	.word	0x2000094d
     fcc:	2000094e 	.word	0x2000094e
     fd0:	2000094f 	.word	0x2000094f
     fd4:	400ff040 	.word	0x400ff040
     fd8:	20000069 	.word	0x20000069
     fdc:	00003788 	.word	0x00003788
     fe0:	200000ec 	.word	0x200000ec
     fe4:	20000945 	.word	0x20000945
     fe8:	20000104 	.word	0x20000104
     fec:	20000108 	.word	0x20000108
     ff0:	2000010c 	.word	0x2000010c
     ff4:	20000110 	.word	0x20000110
     ff8:	200000f0 	.word	0x200000f0

00000ffc <termRegisterCommandLineHandler>:

static tUart destination;
static tCommandLineHandler *head = NULL;

void termRegisterCommandLineHandler(tCommandLineHandler *clh, char* cmd, char *cmdDesc, cmdHandler h)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b084      	sub	sp, #16
    1000:	af00      	add	r7, sp, #0
    1002:	60f8      	str	r0, [r7, #12]
    1004:	60b9      	str	r1, [r7, #8]
    1006:	607a      	str	r2, [r7, #4]
    1008:	603b      	str	r3, [r7, #0]
  clh->next = head;
    100a:	4b10      	ldr	r3, [pc, #64]	; (104c <_HeapSize+0x4c>)
    100c:	681a      	ldr	r2, [r3, #0]
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	635a      	str	r2, [r3, #52]	; 0x34
  head = clh;
    1012:	4a0e      	ldr	r2, [pc, #56]	; (104c <_HeapSize+0x4c>)
    1014:	68fb      	ldr	r3, [r7, #12]
    1016:	6013      	str	r3, [r2, #0]

  strncpy(clh->cmd, cmd, sizeof(clh->cmd));
    1018:	68fb      	ldr	r3, [r7, #12]
    101a:	2210      	movs	r2, #16
    101c:	68b9      	ldr	r1, [r7, #8]
    101e:	4618      	mov	r0, r3
    1020:	f002 fa89 	bl	3536 <strncpy>
  strcat(clh->cmd, " ");
    1024:	68fb      	ldr	r3, [r7, #12]
    1026:	490a      	ldr	r1, [pc, #40]	; (1050 <_HeapSize+0x50>)
    1028:	4618      	mov	r0, r3
    102a:	f002 fa50 	bl	34ce <strcat>
  strncpy(clh->cmdDesc, cmdDesc, sizeof(clh->cmdDesc));
    102e:	68fb      	ldr	r3, [r7, #12]
    1030:	3310      	adds	r3, #16
    1032:	2220      	movs	r2, #32
    1034:	6879      	ldr	r1, [r7, #4]
    1036:	4618      	mov	r0, r3
    1038:	f002 fa7d 	bl	3536 <strncpy>
  clh->cmdHandler = h;
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	683a      	ldr	r2, [r7, #0]
    1040:	631a      	str	r2, [r3, #48]	; 0x30
}
    1042:	bf00      	nop
    1044:	3710      	adds	r7, #16
    1046:	46bd      	mov	sp, r7
    1048:	bd80      	pop	{r7, pc}
    104a:	bf00      	nop
    104c:	20000114 	.word	0x20000114
    1050:	00003798 	.word	0x00003798

00001054 <termWriteChar>:
 *
 * @param[in] ch
 *   the character to send
 */
void termWriteChar(char ch)
{
    1054:	b580      	push	{r7, lr}
    1056:	b082      	sub	sp, #8
    1058:	af00      	add	r7, sp, #0
    105a:	4603      	mov	r3, r0
    105c:	71fb      	strb	r3, [r7, #7]
  if (TGT_IS_MCCAR)
    105e:	4b15      	ldr	r3, [pc, #84]	; (10b4 <termWriteChar+0x60>)
    1060:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    1064:	3304      	adds	r3, #4
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	f003 030f 	and.w	r3, r3, #15
    106c:	2b08      	cmp	r3, #8
    106e:	d109      	bne.n	1084 <termWriteChar+0x30>
  {
    // check if uart0 is enabled
    #if (UART0_EN)
      if (destination & uart0) uart0WriteChar(ch);
    1070:	4b11      	ldr	r3, [pc, #68]	; (10b8 <termWriteChar+0x64>)
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	f003 0301 	and.w	r3, r3, #1
    1078:	2b00      	cmp	r3, #0
    107a:	d003      	beq.n	1084 <termWriteChar+0x30>
    107c:	79fb      	ldrb	r3, [r7, #7]
    107e:	4618      	mov	r0, r3
    1080:	f000 fa1e 	bl	14c0 <uart0WriteChar>
    #if (LPUART0_EN)
      if (destination & lpuart0) lpuart0WriteChar(ch);
    #endif
  }

  if (TGT_IS_TINYK22)
    1084:	4b0b      	ldr	r3, [pc, #44]	; (10b4 <termWriteChar+0x60>)
    1086:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    108a:	3304      	adds	r3, #4
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	f003 030f 	and.w	r3, r3, #15
    1092:	2b05      	cmp	r3, #5
    1094:	d109      	bne.n	10aa <termWriteChar+0x56>
  {
    // check if uart1 is enabled
    #if (UART1_EN)
      if (destination & uart1) uart1WriteChar(ch);
    1096:	4b08      	ldr	r3, [pc, #32]	; (10b8 <termWriteChar+0x64>)
    1098:	781b      	ldrb	r3, [r3, #0]
    109a:	f003 0302 	and.w	r3, r3, #2
    109e:	2b00      	cmp	r3, #0
    10a0:	d003      	beq.n	10aa <termWriteChar+0x56>
    10a2:	79fb      	ldrb	r3, [r7, #7]
    10a4:	4618      	mov	r0, r3
    10a6:	f000 fc03 	bl	18b0 <uart1WriteChar>
    #endif
  }
}
    10aa:	bf00      	nop
    10ac:	3708      	adds	r7, #8
    10ae:	46bd      	mov	sp, r7
    10b0:	bd80      	pop	{r7, pc}
    10b2:	bf00      	nop
    10b4:	40047000 	.word	0x40047000
    10b8:	20000950 	.word	0x20000950

000010bc <termParseCommand>:
 *
 * @param[in] cmd
 *   the null terminated string to process
 */
void termParseCommand(char *cmd)
{
    10bc:	b590      	push	{r4, r7, lr}
    10be:	b089      	sub	sp, #36	; 0x24
    10c0:	af00      	add	r7, sp, #0
    10c2:	6078      	str	r0, [r7, #4]
  uint8_t subCmdLength = 0;
    10c4:	2300      	movs	r3, #0
    10c6:	77fb      	strb	r3, [r7, #31]
  tError result = EC_INVALID_CMD;
    10c8:	2301      	movs	r3, #1
    10ca:	77bb      	strb	r3, [r7, #30]
  tCommandLineHandler *clh = head;
    10cc:	4b40      	ldr	r3, [pc, #256]	; (11d0 <termParseCommand+0x114>)
    10ce:	681b      	ldr	r3, [r3, #0]
    10d0:	61bb      	str	r3, [r7, #24]
  char buf[16];

  if (strcmp(cmd, "help") == 0)
    10d2:	4940      	ldr	r1, [pc, #256]	; (11d4 <termParseCommand+0x118>)
    10d4:	6878      	ldr	r0, [r7, #4]
    10d6:	f002 fa0a 	bl	34ee <strcmp>
    10da:	4603      	mov	r3, r0
    10dc:	2b00      	cmp	r3, #0
    10de:	d146      	bne.n	116e <termParseCommand+0xb2>
  {
    termWriteLine(NULL);
    10e0:	2000      	movs	r0, #0
    10e2:	f001 ffff 	bl	30e4 <termWriteLine>
    termWriteLine(">>> MC-Car v2 terminal ready <<<");
    10e6:	483c      	ldr	r0, [pc, #240]	; (11d8 <termParseCommand+0x11c>)
    10e8:	f001 fffc 	bl	30e4 <termWriteLine>
    termWriteLine("valid commands are:");
    10ec:	483b      	ldr	r0, [pc, #236]	; (11dc <termParseCommand+0x120>)
    10ee:	f001 fff9 	bl	30e4 <termWriteLine>
    while(clh != NULL)
    10f2:	e011      	b.n	1118 <termParseCommand+0x5c>
    {
      termWrite("  ");
    10f4:	483a      	ldr	r0, [pc, #232]	; (11e0 <termParseCommand+0x124>)
    10f6:	f001 ffdd 	bl	30b4 <termWrite>
      termWrite(clh->cmd);
    10fa:	69bb      	ldr	r3, [r7, #24]
    10fc:	4618      	mov	r0, r3
    10fe:	f001 ffd9 	bl	30b4 <termWrite>
      termWrite("-> ");
    1102:	4838      	ldr	r0, [pc, #224]	; (11e4 <termParseCommand+0x128>)
    1104:	f001 ffd6 	bl	30b4 <termWrite>
      termWriteLine(clh->cmdDesc);
    1108:	69bb      	ldr	r3, [r7, #24]
    110a:	3310      	adds	r3, #16
    110c:	4618      	mov	r0, r3
    110e:	f001 ffe9 	bl	30e4 <termWriteLine>
      clh = clh->next;
    1112:	69bb      	ldr	r3, [r7, #24]
    1114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1116:	61bb      	str	r3, [r7, #24]
    while(clh != NULL)
    1118:	69bb      	ldr	r3, [r7, #24]
    111a:	2b00      	cmp	r3, #0
    111c:	d1ea      	bne.n	10f4 <termParseCommand+0x38>
    }
    result = EC_SUCCESS;
    111e:	2300      	movs	r3, #0
    1120:	77bb      	strb	r3, [r7, #30]
    1122:	e027      	b.n	1174 <termParseCommand+0xb8>
  }
  else
  {
    while(clh != NULL)
    {
      if (strncmp(cmd, clh->cmd, strlen(clh->cmd)) == 0)
    1124:	69bc      	ldr	r4, [r7, #24]
    1126:	69bb      	ldr	r3, [r7, #24]
    1128:	4618      	mov	r0, r3
    112a:	f002 f9ea 	bl	3502 <strlen>
    112e:	4603      	mov	r3, r0
    1130:	461a      	mov	r2, r3
    1132:	4621      	mov	r1, r4
    1134:	6878      	ldr	r0, [r7, #4]
    1136:	f002 f9ec 	bl	3512 <strncmp>
    113a:	4603      	mov	r3, r0
    113c:	2b00      	cmp	r3, #0
    113e:	d113      	bne.n	1168 <termParseCommand+0xac>
      {
        subCmdLength = strlen(clh->cmd);
    1140:	69bb      	ldr	r3, [r7, #24]
    1142:	4618      	mov	r0, r3
    1144:	f002 f9dd 	bl	3502 <strlen>
    1148:	4603      	mov	r3, r0
    114a:	77fb      	strb	r3, [r7, #31]
        result = clh->cmdHandler(cmd + strlen(clh->cmd));
    114c:	69bb      	ldr	r3, [r7, #24]
    114e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    1150:	69bb      	ldr	r3, [r7, #24]
    1152:	4618      	mov	r0, r3
    1154:	f002 f9d5 	bl	3502 <strlen>
    1158:	4602      	mov	r2, r0
    115a:	687b      	ldr	r3, [r7, #4]
    115c:	4413      	add	r3, r2
    115e:	4618      	mov	r0, r3
    1160:	47a0      	blx	r4
    1162:	4603      	mov	r3, r0
    1164:	77bb      	strb	r3, [r7, #30]
        break;
    1166:	e005      	b.n	1174 <termParseCommand+0xb8>
      }
      clh = clh->next;
    1168:	69bb      	ldr	r3, [r7, #24]
    116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    116c:	61bb      	str	r3, [r7, #24]
    while(clh != NULL)
    116e:	69bb      	ldr	r3, [r7, #24]
    1170:	2b00      	cmp	r3, #0
    1172:	d1d7      	bne.n	1124 <termParseCommand+0x68>
    }
  }

  if (result != EC_SUCCESS)
    1174:	7fbb      	ldrb	r3, [r7, #30]
    1176:	2b00      	cmp	r3, #0
    1178:	d026      	beq.n	11c8 <termParseCommand+0x10c>
  {
    termWriteLine(NULL);
    117a:	2000      	movs	r0, #0
    117c:	f001 ffb2 	bl	30e4 <termWriteLine>
    termWrite(cmd);
    1180:	6878      	ldr	r0, [r7, #4]
    1182:	f001 ff97 	bl	30b4 <termWrite>
    termWriteLine(": command not found!");
    1186:	4818      	ldr	r0, [pc, #96]	; (11e8 <termParseCommand+0x12c>)
    1188:	f001 ffac 	bl	30e4 <termWriteLine>
    termWrite("Error Code: ");
    118c:	4817      	ldr	r0, [pc, #92]	; (11ec <termParseCommand+0x130>)
    118e:	f001 ff91 	bl	30b4 <termWrite>
    buf[0] = '\0';
    1192:	2300      	movs	r3, #0
    1194:	723b      	strb	r3, [r7, #8]
    utilNum16uToStr(buf, sizeof(buf), result);
    1196:	7fbb      	ldrb	r3, [r7, #30]
    1198:	b29a      	uxth	r2, r3
    119a:	f107 0308 	add.w	r3, r7, #8
    119e:	2110      	movs	r1, #16
    11a0:	4618      	mov	r0, r3
    11a2:	f7ff fb87 	bl	8b4 <utilNum16uToStr>
    termWriteLine(buf);
    11a6:	f107 0308 	add.w	r3, r7, #8
    11aa:	4618      	mov	r0, r3
    11ac:	f001 ff9a 	bl	30e4 <termWriteLine>
    termWrite("Enter '");
    11b0:	480f      	ldr	r0, [pc, #60]	; (11f0 <termParseCommand+0x134>)
    11b2:	f001 ff7f 	bl	30b4 <termWrite>
    termWriteSubString(cmd, 0, subCmdLength);
    11b6:	7ffb      	ldrb	r3, [r7, #31]
    11b8:	461a      	mov	r2, r3
    11ba:	2100      	movs	r1, #0
    11bc:	6878      	ldr	r0, [r7, #4]
    11be:	f001 ff9f 	bl	3100 <termWriteSubString>
    termWriteLine("help' for a list of valid commands.");
    11c2:	480c      	ldr	r0, [pc, #48]	; (11f4 <termParseCommand+0x138>)
    11c4:	f001 ff8e 	bl	30e4 <termWriteLine>
  }
}
    11c8:	bf00      	nop
    11ca:	3724      	adds	r7, #36	; 0x24
    11cc:	46bd      	mov	sp, r7
    11ce:	bd90      	pop	{r4, r7, pc}
    11d0:	20000114 	.word	0x20000114
    11d4:	0000370c 	.word	0x0000370c
    11d8:	0000379c 	.word	0x0000379c
    11dc:	000037c0 	.word	0x000037c0
    11e0:	000037d4 	.word	0x000037d4
    11e4:	000037d8 	.word	0x000037d8
    11e8:	000037dc 	.word	0x000037dc
    11ec:	000037f4 	.word	0x000037f4
    11f0:	00003804 	.word	0x00003804
    11f4:	0000380c 	.word	0x0000380c

000011f8 <termDoWork>:
 *
 * This function reads a line from the uart and calls the
 * termParseCommand function to process the command.
 */
void termDoWork(void)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    11fe:	af00      	add	r7, sp, #0
  char cmd[512];
  if (TGT_IS_MCCAR)
    1200:	4b1d      	ldr	r3, [pc, #116]	; (1278 <termDoWork+0x80>)
    1202:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    1206:	3304      	adds	r3, #4
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	f003 030f 	and.w	r3, r3, #15
    120e:	2b08      	cmp	r3, #8
    1210:	d111      	bne.n	1236 <termDoWork+0x3e>
  {
    #if (UART0_EN)
      if (uart0HasLineReceived())
    1212:	f000 f9c9 	bl	15a8 <uart0HasLineReceived>
    1216:	4603      	mov	r3, r0
    1218:	2b00      	cmp	r3, #0
    121a:	d00c      	beq.n	1236 <termDoWork+0x3e>
      {
        destination = uart0;
    121c:	4b17      	ldr	r3, [pc, #92]	; (127c <termDoWork+0x84>)
    121e:	2201      	movs	r2, #1
    1220:	701a      	strb	r2, [r3, #0]
        uart0ReadLine(cmd, sizeof(cmd));            // process uart data from debug interface
    1222:	463b      	mov	r3, r7
    1224:	f44f 7100 	mov.w	r1, #512	; 0x200
    1228:	4618      	mov	r0, r3
    122a:	f001 ff98 	bl	315e <uart0ReadLine>
        termParseCommand(cmd);
    122e:	463b      	mov	r3, r7
    1230:	4618      	mov	r0, r3
    1232:	f7ff ff43 	bl	10bc <termParseCommand>
        termParseCommand(cmd);
      }
    #endif
  }

  if (TGT_IS_TINYK22)
    1236:	4b10      	ldr	r3, [pc, #64]	; (1278 <termDoWork+0x80>)
    1238:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    123c:	3304      	adds	r3, #4
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	f003 030f 	and.w	r3, r3, #15
    1244:	2b05      	cmp	r3, #5
    1246:	d111      	bne.n	126c <termDoWork+0x74>
  {
    #if (UART1_EN)
      if (uart1HasLineReceived())                   // process uart data from debug interface
    1248:	f000 fba6 	bl	1998 <uart1HasLineReceived>
    124c:	4603      	mov	r3, r0
    124e:	2b00      	cmp	r3, #0
    1250:	d00c      	beq.n	126c <termDoWork+0x74>
      {
        destination = uart1;
    1252:	4b0a      	ldr	r3, [pc, #40]	; (127c <termDoWork+0x84>)
    1254:	2202      	movs	r2, #2
    1256:	701a      	strb	r2, [r3, #0]
        uart1ReadLine(cmd, sizeof(cmd));
    1258:	463b      	mov	r3, r7
    125a:	f44f 7100 	mov.w	r1, #512	; 0x200
    125e:	4618      	mov	r0, r3
    1260:	f001 ffb5 	bl	31ce <uart1ReadLine>
        termParseCommand(cmd);
    1264:	463b      	mov	r3, r7
    1266:	4618      	mov	r0, r3
    1268:	f7ff ff28 	bl	10bc <termParseCommand>
      }
    #endif
  }
}
    126c:	bf00      	nop
    126e:	f507 7700 	add.w	r7, r7, #512	; 0x200
    1272:	46bd      	mov	sp, r7
    1274:	bd80      	pop	{r7, pc}
    1276:	bf00      	nop
    1278:	40047000 	.word	0x40047000
    127c:	20000950 	.word	0x20000950

00001280 <termInit>:
 *
 * @param[in] baudrate
 *   the desired baudrate (for example: 9600, 19200, 57600...)
 */
void termInit(uint16_t baudrate)
{
    1280:	b580      	push	{r7, lr}
    1282:	b082      	sub	sp, #8
    1284:	af00      	add	r7, sp, #0
    1286:	4603      	mov	r3, r0
    1288:	80fb      	strh	r3, [r7, #6]
  // Send the first message to all uarts
  destination = uartAll;
    128a:	4b16      	ldr	r3, [pc, #88]	; (12e4 <termInit+0x64>)
    128c:	2207      	movs	r2, #7
    128e:	701a      	strb	r2, [r3, #0]

  if (TGT_IS_MCCAR)
    1290:	4b15      	ldr	r3, [pc, #84]	; (12e8 <termInit+0x68>)
    1292:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    1296:	3304      	adds	r3, #4
    1298:	681b      	ldr	r3, [r3, #0]
    129a:	f003 030f 	and.w	r3, r3, #15
    129e:	2b08      	cmp	r3, #8
    12a0:	d109      	bne.n	12b6 <termInit+0x36>
  {
    // initialize uart0 only if the uart is enabled
    #if (UART0_EN)
      uart0Init(baudrate);
    12a2:	88fb      	ldrh	r3, [r7, #6]
    12a4:	4618      	mov	r0, r3
    12a6:	f000 f9af 	bl	1608 <uart0Init>
    // initialize lpuart0 only if the uart is enabled
    #if (LPUART0_EN)
      lpuart0Init(baudrate);
    #endif

    termWriteLine(NULL);
    12aa:	2000      	movs	r0, #0
    12ac:	f001 ff1a 	bl	30e4 <termWriteLine>
    termWriteLine("MC-Car ready... :-)");
    12b0:	480e      	ldr	r0, [pc, #56]	; (12ec <termInit+0x6c>)
    12b2:	f001 ff17 	bl	30e4 <termWriteLine>
  }

  if (TGT_IS_TINYK22)
    12b6:	4b0c      	ldr	r3, [pc, #48]	; (12e8 <termInit+0x68>)
    12b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    12bc:	3304      	adds	r3, #4
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	f003 030f 	and.w	r3, r3, #15
    12c4:	2b05      	cmp	r3, #5
    12c6:	d109      	bne.n	12dc <termInit+0x5c>
  {
    // initialize uart1 only if the uart is enabled
    #if (UART1_EN)
      uart1Init(baudrate);
    12c8:	88fb      	ldrh	r3, [r7, #6]
    12ca:	4618      	mov	r0, r3
    12cc:	f000 fb94 	bl	19f8 <uart1Init>
    #endif
    termWriteLine(NULL);
    12d0:	2000      	movs	r0, #0
    12d2:	f001 ff07 	bl	30e4 <termWriteLine>
    termWriteLine("tinyk22 ready... :-)");
    12d6:	4806      	ldr	r0, [pc, #24]	; (12f0 <termInit+0x70>)
    12d8:	f001 ff04 	bl	30e4 <termWriteLine>
  }
}
    12dc:	bf00      	nop
    12de:	3708      	adds	r7, #8
    12e0:	46bd      	mov	sp, r7
    12e2:	bd80      	pop	{r7, pc}
    12e4:	20000950 	.word	0x20000950
    12e8:	40047000 	.word	0x40047000
    12ec:	00003830 	.word	0x00003830
    12f0:	00003844 	.word	0x00003844

000012f4 <__NVIC_EnableIRQ>:
{
    12f4:	b480      	push	{r7}
    12f6:	b083      	sub	sp, #12
    12f8:	af00      	add	r7, sp, #0
    12fa:	4603      	mov	r3, r0
    12fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    12fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1302:	2b00      	cmp	r3, #0
    1304:	db0b      	blt.n	131e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1306:	79fb      	ldrb	r3, [r7, #7]
    1308:	f003 021f 	and.w	r2, r3, #31
    130c:	4907      	ldr	r1, [pc, #28]	; (132c <__NVIC_EnableIRQ+0x38>)
    130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1312:	095b      	lsrs	r3, r3, #5
    1314:	2001      	movs	r0, #1
    1316:	fa00 f202 	lsl.w	r2, r0, r2
    131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    131e:	bf00      	nop
    1320:	370c      	adds	r7, #12
    1322:	46bd      	mov	sp, r7
    1324:	f85d 7b04 	ldr.w	r7, [sp], #4
    1328:	4770      	bx	lr
    132a:	bf00      	nop
    132c:	e000e100 	.word	0xe000e100

00001330 <__NVIC_DisableIRQ>:
{
    1330:	b480      	push	{r7}
    1332:	b083      	sub	sp, #12
    1334:	af00      	add	r7, sp, #0
    1336:	4603      	mov	r3, r0
    1338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    133e:	2b00      	cmp	r3, #0
    1340:	db10      	blt.n	1364 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1342:	79fb      	ldrb	r3, [r7, #7]
    1344:	f003 021f 	and.w	r2, r3, #31
    1348:	4909      	ldr	r1, [pc, #36]	; (1370 <__NVIC_DisableIRQ+0x40>)
    134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    134e:	095b      	lsrs	r3, r3, #5
    1350:	2001      	movs	r0, #1
    1352:	fa00 f202 	lsl.w	r2, r0, r2
    1356:	3320      	adds	r3, #32
    1358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    135c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1360:	f3bf 8f6f 	isb	sy
}
    1364:	bf00      	nop
    1366:	370c      	adds	r7, #12
    1368:	46bd      	mov	sp, r7
    136a:	f85d 7b04 	ldr.w	r7, [sp], #4
    136e:	4770      	bx	lr
    1370:	e000e100 	.word	0xe000e100

00001374 <__NVIC_SetPriority>:
{
    1374:	b480      	push	{r7}
    1376:	b083      	sub	sp, #12
    1378:	af00      	add	r7, sp, #0
    137a:	4603      	mov	r3, r0
    137c:	6039      	str	r1, [r7, #0]
    137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    1380:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1384:	2b00      	cmp	r3, #0
    1386:	db0a      	blt.n	139e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1388:	683b      	ldr	r3, [r7, #0]
    138a:	b2da      	uxtb	r2, r3
    138c:	490c      	ldr	r1, [pc, #48]	; (13c0 <__NVIC_SetPriority+0x4c>)
    138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1392:	0112      	lsls	r2, r2, #4
    1394:	b2d2      	uxtb	r2, r2
    1396:	440b      	add	r3, r1
    1398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    139c:	e00a      	b.n	13b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    139e:	683b      	ldr	r3, [r7, #0]
    13a0:	b2da      	uxtb	r2, r3
    13a2:	4908      	ldr	r1, [pc, #32]	; (13c4 <__NVIC_SetPriority+0x50>)
    13a4:	79fb      	ldrb	r3, [r7, #7]
    13a6:	f003 030f 	and.w	r3, r3, #15
    13aa:	3b04      	subs	r3, #4
    13ac:	0112      	lsls	r2, r2, #4
    13ae:	b2d2      	uxtb	r2, r2
    13b0:	440b      	add	r3, r1
    13b2:	761a      	strb	r2, [r3, #24]
}
    13b4:	bf00      	nop
    13b6:	370c      	adds	r7, #12
    13b8:	46bd      	mov	sp, r7
    13ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    13be:	4770      	bx	lr
    13c0:	e000e100 	.word	0xe000e100
    13c4:	e000ed00 	.word	0xe000ed00

000013c8 <UART0_RX_TX_IRQHandler>:
 * @brief UART Interrupt Service Routine
 * - Received bytes are stored in the queue rxBuf
 * - Bytes in the queue txBuf are sent
 */
void UART0_RX_TX_IRQHandler(void)
{
    13c8:	b480      	push	{r7}
    13ca:	b083      	sub	sp, #12
    13cc:	af00      	add	r7, sp, #0
  OnEnterUart0RxTxISR();
  uint8_t status = UART0->S1;
    13ce:	4b2e      	ldr	r3, [pc, #184]	; (1488 <UART0_RX_TX_IRQHandler+0xc0>)
    13d0:	791b      	ldrb	r3, [r3, #4]
    13d2:	71fb      	strb	r3, [r7, #7]
  uint8_t data = UART0->D;
    13d4:	4b2c      	ldr	r3, [pc, #176]	; (1488 <UART0_RX_TX_IRQHandler+0xc0>)
    13d6:	79db      	ldrb	r3, [r3, #7]
    13d8:	71bb      	strb	r3, [r7, #6]
  if (status & UART_S1_RDRF_MASK)
    13da:	79fb      	ldrb	r3, [r7, #7]
    13dc:	f003 0320 	and.w	r3, r3, #32
    13e0:	2b00      	cmp	r3, #0
    13e2:	d01e      	beq.n	1422 <UART0_RX_TX_IRQHandler+0x5a>
  {
    // store the received byte into receiver Queue (rxBuf)
    // but only if the queue isn't full!
    if (rxBufCount < UART0_RX_BUF_SIZE)
    13e4:	4b29      	ldr	r3, [pc, #164]	; (148c <UART0_RX_TX_IRQHandler+0xc4>)
    13e6:	881b      	ldrh	r3, [r3, #0]
    13e8:	b29b      	uxth	r3, r3
    13ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    13ee:	d218      	bcs.n	1422 <UART0_RX_TX_IRQHandler+0x5a>
    {
      rxBuf[rxBufWritePos++] = data;
    13f0:	4b27      	ldr	r3, [pc, #156]	; (1490 <UART0_RX_TX_IRQHandler+0xc8>)
    13f2:	881b      	ldrh	r3, [r3, #0]
    13f4:	1c5a      	adds	r2, r3, #1
    13f6:	b291      	uxth	r1, r2
    13f8:	4a25      	ldr	r2, [pc, #148]	; (1490 <UART0_RX_TX_IRQHandler+0xc8>)
    13fa:	8011      	strh	r1, [r2, #0]
    13fc:	4619      	mov	r1, r3
    13fe:	4a25      	ldr	r2, [pc, #148]	; (1494 <UART0_RX_TX_IRQHandler+0xcc>)
    1400:	79bb      	ldrb	r3, [r7, #6]
    1402:	5453      	strb	r3, [r2, r1]
      rxBufCount++;
    1404:	4b21      	ldr	r3, [pc, #132]	; (148c <UART0_RX_TX_IRQHandler+0xc4>)
    1406:	881b      	ldrh	r3, [r3, #0]
    1408:	b29b      	uxth	r3, r3
    140a:	3301      	adds	r3, #1
    140c:	b29a      	uxth	r2, r3
    140e:	4b1f      	ldr	r3, [pc, #124]	; (148c <UART0_RX_TX_IRQHandler+0xc4>)
    1410:	801a      	strh	r2, [r3, #0]
      if (rxBufWritePos == UART0_RX_BUF_SIZE) rxBufWritePos = 0;
    1412:	4b1f      	ldr	r3, [pc, #124]	; (1490 <UART0_RX_TX_IRQHandler+0xc8>)
    1414:	881b      	ldrh	r3, [r3, #0]
    1416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    141a:	d102      	bne.n	1422 <UART0_RX_TX_IRQHandler+0x5a>
    141c:	4b1c      	ldr	r3, [pc, #112]	; (1490 <UART0_RX_TX_IRQHandler+0xc8>)
    141e:	2200      	movs	r2, #0
    1420:	801a      	strh	r2, [r3, #0]
    }
  }

  if (status & UART_S1_TDRE_MASK)
    1422:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1426:	2b00      	cmp	r3, #0
    1428:	da27      	bge.n	147a <UART0_RX_TX_IRQHandler+0xb2>
  {
    if (txBufCount > 0)
    142a:	4b1b      	ldr	r3, [pc, #108]	; (1498 <UART0_RX_TX_IRQHandler+0xd0>)
    142c:	881b      	ldrh	r3, [r3, #0]
    142e:	b29b      	uxth	r3, r3
    1430:	2b00      	cmp	r3, #0
    1432:	d01a      	beq.n	146a <UART0_RX_TX_IRQHandler+0xa2>
    {
      UART0->D = txBuf[txBufReadPos++];
    1434:	4b19      	ldr	r3, [pc, #100]	; (149c <UART0_RX_TX_IRQHandler+0xd4>)
    1436:	881b      	ldrh	r3, [r3, #0]
    1438:	1c5a      	adds	r2, r3, #1
    143a:	b291      	uxth	r1, r2
    143c:	4a17      	ldr	r2, [pc, #92]	; (149c <UART0_RX_TX_IRQHandler+0xd4>)
    143e:	8011      	strh	r1, [r2, #0]
    1440:	4619      	mov	r1, r3
    1442:	4b11      	ldr	r3, [pc, #68]	; (1488 <UART0_RX_TX_IRQHandler+0xc0>)
    1444:	4a16      	ldr	r2, [pc, #88]	; (14a0 <UART0_RX_TX_IRQHandler+0xd8>)
    1446:	5c52      	ldrb	r2, [r2, r1]
    1448:	71da      	strb	r2, [r3, #7]
      txBufCount--;
    144a:	4b13      	ldr	r3, [pc, #76]	; (1498 <UART0_RX_TX_IRQHandler+0xd0>)
    144c:	881b      	ldrh	r3, [r3, #0]
    144e:	b29b      	uxth	r3, r3
    1450:	3b01      	subs	r3, #1
    1452:	b29a      	uxth	r2, r3
    1454:	4b10      	ldr	r3, [pc, #64]	; (1498 <UART0_RX_TX_IRQHandler+0xd0>)
    1456:	801a      	strh	r2, [r3, #0]
      if (txBufReadPos == UART0_TX_BUF_SIZE) txBufReadPos = 0;
    1458:	4b10      	ldr	r3, [pc, #64]	; (149c <UART0_RX_TX_IRQHandler+0xd4>)
    145a:	881b      	ldrh	r3, [r3, #0]
    145c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1460:	d10b      	bne.n	147a <UART0_RX_TX_IRQHandler+0xb2>
    1462:	4b0e      	ldr	r3, [pc, #56]	; (149c <UART0_RX_TX_IRQHandler+0xd4>)
    1464:	2200      	movs	r2, #0
    1466:	801a      	strh	r2, [r3, #0]
    {
      UART0->C2 &= ~UART_C2_TIE_MASK;
    }
  }
  OnExitUart0RxTxISR();
}
    1468:	e007      	b.n	147a <UART0_RX_TX_IRQHandler+0xb2>
      UART0->C2 &= ~UART_C2_TIE_MASK;
    146a:	4b07      	ldr	r3, [pc, #28]	; (1488 <UART0_RX_TX_IRQHandler+0xc0>)
    146c:	78db      	ldrb	r3, [r3, #3]
    146e:	b2db      	uxtb	r3, r3
    1470:	4a05      	ldr	r2, [pc, #20]	; (1488 <UART0_RX_TX_IRQHandler+0xc0>)
    1472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1476:	b2db      	uxtb	r3, r3
    1478:	70d3      	strb	r3, [r2, #3]
}
    147a:	bf00      	nop
    147c:	370c      	adds	r7, #12
    147e:	46bd      	mov	sp, r7
    1480:	f85d 7b04 	ldr.w	r7, [sp], #4
    1484:	4770      	bx	lr
    1486:	bf00      	nop
    1488:	4006a000 	.word	0x4006a000
    148c:	2000092a 	.word	0x2000092a
    1490:	2000092c 	.word	0x2000092c
    1494:	20000118 	.word	0x20000118
    1498:	20000930 	.word	0x20000930
    149c:	20000934 	.word	0x20000934
    14a0:	20000318 	.word	0x20000318

000014a4 <UART0_ERR_IRQHandler>:
/**
 * Error Interrupt Service Routine
 * Clears the error flags.
 */
void UART0_ERR_IRQHandler(void)
{
    14a4:	b480      	push	{r7}
    14a6:	af00      	add	r7, sp, #0
  (void)UART0->S1;
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <UART0_ERR_IRQHandler+0x18>)
    14aa:	791b      	ldrb	r3, [r3, #4]
  (void)UART0->D;
    14ac:	4b03      	ldr	r3, [pc, #12]	; (14bc <UART0_ERR_IRQHandler+0x18>)
    14ae:	79db      	ldrb	r3, [r3, #7]
}
    14b0:	bf00      	nop
    14b2:	46bd      	mov	sp, r7
    14b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b8:	4770      	bx	lr
    14ba:	bf00      	nop
    14bc:	4006a000 	.word	0x4006a000

000014c0 <uart0WriteChar>:
 *
 * @param[in] ch
 *   the byte to send
 */
void uart0WriteChar(char ch)
{
    14c0:	b580      	push	{r7, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	af00      	add	r7, sp, #0
    14c6:	4603      	mov	r3, r0
    14c8:	71fb      	strb	r3, [r7, #7]
  while(txBufCount >= UART0_TX_BUF_SIZE);
    14ca:	bf00      	nop
    14cc:	4b18      	ldr	r3, [pc, #96]	; (1530 <uart0WriteChar+0x70>)
    14ce:	881b      	ldrh	r3, [r3, #0]
    14d0:	b29b      	uxth	r3, r3
    14d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    14d6:	d2f9      	bcs.n	14cc <uart0WriteChar+0xc>
  txBuf[txBufWritePos++] = ch;
    14d8:	4b16      	ldr	r3, [pc, #88]	; (1534 <uart0WriteChar+0x74>)
    14da:	881b      	ldrh	r3, [r3, #0]
    14dc:	1c5a      	adds	r2, r3, #1
    14de:	b291      	uxth	r1, r2
    14e0:	4a14      	ldr	r2, [pc, #80]	; (1534 <uart0WriteChar+0x74>)
    14e2:	8011      	strh	r1, [r2, #0]
    14e4:	4619      	mov	r1, r3
    14e6:	4a14      	ldr	r2, [pc, #80]	; (1538 <uart0WriteChar+0x78>)
    14e8:	79fb      	ldrb	r3, [r7, #7]
    14ea:	5453      	strb	r3, [r2, r1]
  if (txBufWritePos == UART0_TX_BUF_SIZE) txBufWritePos = 0;
    14ec:	4b11      	ldr	r3, [pc, #68]	; (1534 <uart0WriteChar+0x74>)
    14ee:	881b      	ldrh	r3, [r3, #0]
    14f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    14f4:	d102      	bne.n	14fc <uart0WriteChar+0x3c>
    14f6:	4b0f      	ldr	r3, [pc, #60]	; (1534 <uart0WriteChar+0x74>)
    14f8:	2200      	movs	r2, #0
    14fa:	801a      	strh	r2, [r3, #0]
  DISABLE_UART0_INTERRUPTS();
    14fc:	201f      	movs	r0, #31
    14fe:	f001 fe1c 	bl	313a <NVIC_DisableIRQEx>
  txBufCount++;
    1502:	4b0b      	ldr	r3, [pc, #44]	; (1530 <uart0WriteChar+0x70>)
    1504:	881b      	ldrh	r3, [r3, #0]
    1506:	b29b      	uxth	r3, r3
    1508:	3301      	adds	r3, #1
    150a:	b29a      	uxth	r2, r3
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <uart0WriteChar+0x70>)
    150e:	801a      	strh	r2, [r3, #0]
  ENABLE_UART0_INTERRUPTS();
    1510:	201f      	movs	r0, #31
    1512:	f7ff feef 	bl	12f4 <__NVIC_EnableIRQ>
  UART0->C2 |= UART_C2_TIE_MASK;
    1516:	4b09      	ldr	r3, [pc, #36]	; (153c <uart0WriteChar+0x7c>)
    1518:	78db      	ldrb	r3, [r3, #3]
    151a:	b2db      	uxtb	r3, r3
    151c:	4a07      	ldr	r2, [pc, #28]	; (153c <uart0WriteChar+0x7c>)
    151e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1522:	b2db      	uxtb	r3, r3
    1524:	70d3      	strb	r3, [r2, #3]
}
    1526:	bf00      	nop
    1528:	3708      	adds	r7, #8
    152a:	46bd      	mov	sp, r7
    152c:	bd80      	pop	{r7, pc}
    152e:	bf00      	nop
    1530:	20000930 	.word	0x20000930
    1534:	20000932 	.word	0x20000932
    1538:	20000318 	.word	0x20000318
    153c:	4006a000 	.word	0x4006a000

00001540 <uart0ReadChar>:
 *
 * @return
 *   the received byte
 */
char uart0ReadChar(void)
{
    1540:	b580      	push	{r7, lr}
    1542:	b082      	sub	sp, #8
    1544:	af00      	add	r7, sp, #0
  char ch;
  while (rxBufCount == 0);
    1546:	bf00      	nop
    1548:	4b14      	ldr	r3, [pc, #80]	; (159c <uart0ReadChar+0x5c>)
    154a:	881b      	ldrh	r3, [r3, #0]
    154c:	b29b      	uxth	r3, r3
    154e:	2b00      	cmp	r3, #0
    1550:	d0fa      	beq.n	1548 <uart0ReadChar+0x8>
  ch = rxBuf[rxBufReadPos++];
    1552:	4b13      	ldr	r3, [pc, #76]	; (15a0 <uart0ReadChar+0x60>)
    1554:	881b      	ldrh	r3, [r3, #0]
    1556:	1c5a      	adds	r2, r3, #1
    1558:	b291      	uxth	r1, r2
    155a:	4a11      	ldr	r2, [pc, #68]	; (15a0 <uart0ReadChar+0x60>)
    155c:	8011      	strh	r1, [r2, #0]
    155e:	461a      	mov	r2, r3
    1560:	4b10      	ldr	r3, [pc, #64]	; (15a4 <uart0ReadChar+0x64>)
    1562:	5c9b      	ldrb	r3, [r3, r2]
    1564:	71fb      	strb	r3, [r7, #7]
  if (rxBufReadPos == UART0_RX_BUF_SIZE) rxBufReadPos = 0;
    1566:	4b0e      	ldr	r3, [pc, #56]	; (15a0 <uart0ReadChar+0x60>)
    1568:	881b      	ldrh	r3, [r3, #0]
    156a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    156e:	d102      	bne.n	1576 <uart0ReadChar+0x36>
    1570:	4b0b      	ldr	r3, [pc, #44]	; (15a0 <uart0ReadChar+0x60>)
    1572:	2200      	movs	r2, #0
    1574:	801a      	strh	r2, [r3, #0]
  DISABLE_UART0_INTERRUPTS();
    1576:	201f      	movs	r0, #31
    1578:	f001 fddf 	bl	313a <NVIC_DisableIRQEx>
  rxBufCount--;
    157c:	4b07      	ldr	r3, [pc, #28]	; (159c <uart0ReadChar+0x5c>)
    157e:	881b      	ldrh	r3, [r3, #0]
    1580:	b29b      	uxth	r3, r3
    1582:	3b01      	subs	r3, #1
    1584:	b29a      	uxth	r2, r3
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <uart0ReadChar+0x5c>)
    1588:	801a      	strh	r2, [r3, #0]
  ENABLE_UART0_INTERRUPTS();
    158a:	201f      	movs	r0, #31
    158c:	f7ff feb2 	bl	12f4 <__NVIC_EnableIRQ>
  return ch;
    1590:	79fb      	ldrb	r3, [r7, #7]
}
    1592:	4618      	mov	r0, r3
    1594:	3708      	adds	r7, #8
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	bf00      	nop
    159c:	2000092a 	.word	0x2000092a
    15a0:	2000092e 	.word	0x2000092e
    15a4:	20000118 	.word	0x20000118

000015a8 <uart0HasLineReceived>:
 *
 * @returns
 *   TRUE, if there is a new line character, otherweise FALSE.
 */
bool uart0HasLineReceived(void)
{
    15a8:	b480      	push	{r7}
    15aa:	b083      	sub	sp, #12
    15ac:	af00      	add	r7, sp, #0
  uint16_t i;
  uint16_t index = rxBufReadPos;
    15ae:	4b13      	ldr	r3, [pc, #76]	; (15fc <uart0HasLineReceived+0x54>)
    15b0:	881b      	ldrh	r3, [r3, #0]
    15b2:	80bb      	strh	r3, [r7, #4]

  for (i=0; i<rxBufCount; i++)
    15b4:	2300      	movs	r3, #0
    15b6:	80fb      	strh	r3, [r7, #6]
    15b8:	e012      	b.n	15e0 <uart0HasLineReceived+0x38>
  {
    if (rxBuf[index++] == NEW_LINE) return TRUE;
    15ba:	88bb      	ldrh	r3, [r7, #4]
    15bc:	1c5a      	adds	r2, r3, #1
    15be:	80ba      	strh	r2, [r7, #4]
    15c0:	461a      	mov	r2, r3
    15c2:	4b0f      	ldr	r3, [pc, #60]	; (1600 <uart0HasLineReceived+0x58>)
    15c4:	5c9b      	ldrb	r3, [r3, r2]
    15c6:	2b0a      	cmp	r3, #10
    15c8:	d101      	bne.n	15ce <uart0HasLineReceived+0x26>
    15ca:	2301      	movs	r3, #1
    15cc:	e00f      	b.n	15ee <uart0HasLineReceived+0x46>
    if (index == UART0_RX_BUF_SIZE) index = 0;
    15ce:	88bb      	ldrh	r3, [r7, #4]
    15d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    15d4:	d101      	bne.n	15da <uart0HasLineReceived+0x32>
    15d6:	2300      	movs	r3, #0
    15d8:	80bb      	strh	r3, [r7, #4]
  for (i=0; i<rxBufCount; i++)
    15da:	88fb      	ldrh	r3, [r7, #6]
    15dc:	3301      	adds	r3, #1
    15de:	80fb      	strh	r3, [r7, #6]
    15e0:	4b08      	ldr	r3, [pc, #32]	; (1604 <uart0HasLineReceived+0x5c>)
    15e2:	881b      	ldrh	r3, [r3, #0]
    15e4:	b29b      	uxth	r3, r3
    15e6:	88fa      	ldrh	r2, [r7, #6]
    15e8:	429a      	cmp	r2, r3
    15ea:	d3e6      	bcc.n	15ba <uart0HasLineReceived+0x12>
  }
  return FALSE;
    15ec:	2300      	movs	r3, #0
}
    15ee:	4618      	mov	r0, r3
    15f0:	370c      	adds	r7, #12
    15f2:	46bd      	mov	sp, r7
    15f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop
    15fc:	2000092e 	.word	0x2000092e
    1600:	20000118 	.word	0x20000118
    1604:	2000092a 	.word	0x2000092a

00001608 <uart0Init>:
 *   tinyK22:
 *   - PTC3 Mux3:UART1_RX, (MUX7:LPUART1_RX)
 *   - PTC4 Mux3:UART1_TX, (MUX7:LPUART1_TX)
 */
void uart0Init(uint16_t baudrate)
{
    1608:	b580      	push	{r7, lr}
    160a:	b084      	sub	sp, #16
    160c:	af00      	add	r7, sp, #0
    160e:	4603      	mov	r3, r0
    1610:	80fb      	strh	r3, [r7, #6]
  txBufReadPos = txBufWritePos = txBufCount = 0;
    1612:	2100      	movs	r1, #0
    1614:	4b29      	ldr	r3, [pc, #164]	; (16bc <uart0Init+0xb4>)
    1616:	460a      	mov	r2, r1
    1618:	801a      	strh	r2, [r3, #0]
    161a:	4b29      	ldr	r3, [pc, #164]	; (16c0 <uart0Init+0xb8>)
    161c:	460a      	mov	r2, r1
    161e:	801a      	strh	r2, [r3, #0]
    1620:	4b27      	ldr	r3, [pc, #156]	; (16c0 <uart0Init+0xb8>)
    1622:	881a      	ldrh	r2, [r3, #0]
    1624:	4b27      	ldr	r3, [pc, #156]	; (16c4 <uart0Init+0xbc>)
    1626:	801a      	strh	r2, [r3, #0]
  rxBufReadPos = rxBufWritePos = rxBufCount = 0;
    1628:	2100      	movs	r1, #0
    162a:	4b27      	ldr	r3, [pc, #156]	; (16c8 <uart0Init+0xc0>)
    162c:	460a      	mov	r2, r1
    162e:	801a      	strh	r2, [r3, #0]
    1630:	4b26      	ldr	r3, [pc, #152]	; (16cc <uart0Init+0xc4>)
    1632:	460a      	mov	r2, r1
    1634:	801a      	strh	r2, [r3, #0]
    1636:	4b25      	ldr	r3, [pc, #148]	; (16cc <uart0Init+0xc4>)
    1638:	881a      	ldrh	r2, [r3, #0]
    163a:	4b25      	ldr	r3, [pc, #148]	; (16d0 <uart0Init+0xc8>)
    163c:	801a      	strh	r2, [r3, #0]

  // configure clock gating (Kinetis Reference Manual p277) KRM277
  SIM->SCGC4 |= SIM_SCGC4_UART0_MASK;
    163e:	4b25      	ldr	r3, [pc, #148]	; (16d4 <uart0Init+0xcc>)
    1640:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    1644:	3314      	adds	r3, #20
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	4922      	ldr	r1, [pc, #136]	; (16d4 <uart0Init+0xcc>)
    164a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    164e:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
    1652:	3314      	adds	r3, #20
    1654:	601a      	str	r2, [r3, #0]

  // configure port multiplexing, enable Pull-Ups and enable OpenDrain (ODE)!
  // OpenDrain is needed to ensure that no current flows from Target-uC to the Debugger-uC
  PORTA->PCR[1] = PORT_PCR_MUX(2) | PORT_PCR_PE(1) | PORT_PCR_PS(1) | PORT_PCR_ODE_MASK;
    1656:	4b20      	ldr	r3, [pc, #128]	; (16d8 <uart0Init+0xd0>)
    1658:	f240 2223 	movw	r2, #547	; 0x223
    165c:	605a      	str	r2, [r3, #4]
  PORTA->PCR[2] = PORT_PCR_MUX(2) | PORT_PCR_PE(1) | PORT_PCR_PS(1) | PORT_PCR_ODE_MASK;
    165e:	4b1e      	ldr	r3, [pc, #120]	; (16d8 <uart0Init+0xd0>)
    1660:	f240 2223 	movw	r2, #547	; 0x223
    1664:	609a      	str	r2, [r3, #8]

  // set the baudrate into the BDH (first) and BDL (second) register. KRM1215ff
  uint32_t bd = (CORECLOCK / (16 * baudrate));
    1666:	88fb      	ldrh	r3, [r7, #6]
    1668:	011b      	lsls	r3, r3, #4
    166a:	4a1c      	ldr	r2, [pc, #112]	; (16dc <uart0Init+0xd4>)
    166c:	fb92 f3f3 	sdiv	r3, r2, r3
    1670:	60fb      	str	r3, [r7, #12]
  UART0->BDH = (bd >> 8) & 0x1F;
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	0a1b      	lsrs	r3, r3, #8
    1676:	b2db      	uxtb	r3, r3
    1678:	4a19      	ldr	r2, [pc, #100]	; (16e0 <uart0Init+0xd8>)
    167a:	f003 031f 	and.w	r3, r3, #31
    167e:	b2db      	uxtb	r3, r3
    1680:	7013      	strb	r3, [r2, #0]
  UART0->BDL = bd & 0xFF;
    1682:	4b17      	ldr	r3, [pc, #92]	; (16e0 <uart0Init+0xd8>)
    1684:	68fa      	ldr	r2, [r7, #12]
    1686:	b2d2      	uxtb	r2, r2
    1688:	705a      	strb	r2, [r3, #1]

  // enable uart receiver, receiver interrupt and transmitter as well as
  // enable and set the rx/tx interrupt in the nested vector interrupt controller (NVIC)
  UART0->C2 = UART_C2_RIE_MASK | UART_C2_RE_MASK | UART_C2_TE_MASK;
    168a:	4b15      	ldr	r3, [pc, #84]	; (16e0 <uart0Init+0xd8>)
    168c:	222c      	movs	r2, #44	; 0x2c
    168e:	70da      	strb	r2, [r3, #3]
  NVIC_SetPriority(UART0_RX_TX_IRQn, PRIO_UART0);
    1690:	2105      	movs	r1, #5
    1692:	201f      	movs	r0, #31
    1694:	f7ff fe6e 	bl	1374 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART0_RX_TX_IRQn);
    1698:	201f      	movs	r0, #31
    169a:	f7ff fe2b 	bl	12f4 <__NVIC_EnableIRQ>

  // enable the error interrupts of the uart and configure the NVIC
  UART0->C3 = UART_C3_ORIE_MASK | UART_C3_NEIE_MASK | UART_C3_FEIE_MASK;
    169e:	4b10      	ldr	r3, [pc, #64]	; (16e0 <uart0Init+0xd8>)
    16a0:	220e      	movs	r2, #14
    16a2:	719a      	strb	r2, [r3, #6]
  NVIC_SetPriority(UART0_ERR_IRQn, PRIO_UART0);
    16a4:	2105      	movs	r1, #5
    16a6:	2020      	movs	r0, #32
    16a8:	f7ff fe64 	bl	1374 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART0_ERR_IRQn);
    16ac:	2020      	movs	r0, #32
    16ae:	f7ff fe21 	bl	12f4 <__NVIC_EnableIRQ>
}
    16b2:	bf00      	nop
    16b4:	3710      	adds	r7, #16
    16b6:	46bd      	mov	sp, r7
    16b8:	bd80      	pop	{r7, pc}
    16ba:	bf00      	nop
    16bc:	20000930 	.word	0x20000930
    16c0:	20000932 	.word	0x20000932
    16c4:	20000934 	.word	0x20000934
    16c8:	2000092a 	.word	0x2000092a
    16cc:	2000092c 	.word	0x2000092c
    16d0:	2000092e 	.word	0x2000092e
    16d4:	40047000 	.word	0x40047000
    16d8:	40049000 	.word	0x40049000
    16dc:	07270e00 	.word	0x07270e00
    16e0:	4006a000 	.word	0x4006a000

000016e4 <__NVIC_EnableIRQ>:
{
    16e4:	b480      	push	{r7}
    16e6:	b083      	sub	sp, #12
    16e8:	af00      	add	r7, sp, #0
    16ea:	4603      	mov	r3, r0
    16ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    16ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
    16f2:	2b00      	cmp	r3, #0
    16f4:	db0b      	blt.n	170e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16f6:	79fb      	ldrb	r3, [r7, #7]
    16f8:	f003 021f 	and.w	r2, r3, #31
    16fc:	4907      	ldr	r1, [pc, #28]	; (171c <__NVIC_EnableIRQ+0x38>)
    16fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1702:	095b      	lsrs	r3, r3, #5
    1704:	2001      	movs	r0, #1
    1706:	fa00 f202 	lsl.w	r2, r0, r2
    170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    170e:	bf00      	nop
    1710:	370c      	adds	r7, #12
    1712:	46bd      	mov	sp, r7
    1714:	f85d 7b04 	ldr.w	r7, [sp], #4
    1718:	4770      	bx	lr
    171a:	bf00      	nop
    171c:	e000e100 	.word	0xe000e100

00001720 <__NVIC_DisableIRQ>:
{
    1720:	b480      	push	{r7}
    1722:	b083      	sub	sp, #12
    1724:	af00      	add	r7, sp, #0
    1726:	4603      	mov	r3, r0
    1728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    172e:	2b00      	cmp	r3, #0
    1730:	db10      	blt.n	1754 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1732:	79fb      	ldrb	r3, [r7, #7]
    1734:	f003 021f 	and.w	r2, r3, #31
    1738:	4909      	ldr	r1, [pc, #36]	; (1760 <__NVIC_DisableIRQ+0x40>)
    173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    173e:	095b      	lsrs	r3, r3, #5
    1740:	2001      	movs	r0, #1
    1742:	fa00 f202 	lsl.w	r2, r0, r2
    1746:	3320      	adds	r3, #32
    1748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    174c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1750:	f3bf 8f6f 	isb	sy
}
    1754:	bf00      	nop
    1756:	370c      	adds	r7, #12
    1758:	46bd      	mov	sp, r7
    175a:	f85d 7b04 	ldr.w	r7, [sp], #4
    175e:	4770      	bx	lr
    1760:	e000e100 	.word	0xe000e100

00001764 <__NVIC_SetPriority>:
{
    1764:	b480      	push	{r7}
    1766:	b083      	sub	sp, #12
    1768:	af00      	add	r7, sp, #0
    176a:	4603      	mov	r3, r0
    176c:	6039      	str	r1, [r7, #0]
    176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    1770:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1774:	2b00      	cmp	r3, #0
    1776:	db0a      	blt.n	178e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1778:	683b      	ldr	r3, [r7, #0]
    177a:	b2da      	uxtb	r2, r3
    177c:	490c      	ldr	r1, [pc, #48]	; (17b0 <__NVIC_SetPriority+0x4c>)
    177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1782:	0112      	lsls	r2, r2, #4
    1784:	b2d2      	uxtb	r2, r2
    1786:	440b      	add	r3, r1
    1788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    178c:	e00a      	b.n	17a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    178e:	683b      	ldr	r3, [r7, #0]
    1790:	b2da      	uxtb	r2, r3
    1792:	4908      	ldr	r1, [pc, #32]	; (17b4 <__NVIC_SetPriority+0x50>)
    1794:	79fb      	ldrb	r3, [r7, #7]
    1796:	f003 030f 	and.w	r3, r3, #15
    179a:	3b04      	subs	r3, #4
    179c:	0112      	lsls	r2, r2, #4
    179e:	b2d2      	uxtb	r2, r2
    17a0:	440b      	add	r3, r1
    17a2:	761a      	strb	r2, [r3, #24]
}
    17a4:	bf00      	nop
    17a6:	370c      	adds	r7, #12
    17a8:	46bd      	mov	sp, r7
    17aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    17ae:	4770      	bx	lr
    17b0:	e000e100 	.word	0xe000e100
    17b4:	e000ed00 	.word	0xe000ed00

000017b8 <UART1_RX_TX_IRQHandler>:
 * @brief UART Interrupt Service Routine
 * - Received bytes are stored in the queue rxBuf
 * - Bytes in the queue txBuf are sent
 */
void UART1_RX_TX_IRQHandler(void)
{
    17b8:	b480      	push	{r7}
    17ba:	b083      	sub	sp, #12
    17bc:	af00      	add	r7, sp, #0
  OnEnterUart1RxTxISR();
  uint8_t status = UART1->S1;
    17be:	4b2e      	ldr	r3, [pc, #184]	; (1878 <UART1_RX_TX_IRQHandler+0xc0>)
    17c0:	791b      	ldrb	r3, [r3, #4]
    17c2:	71fb      	strb	r3, [r7, #7]
  uint8_t data = UART1->D;
    17c4:	4b2c      	ldr	r3, [pc, #176]	; (1878 <UART1_RX_TX_IRQHandler+0xc0>)
    17c6:	79db      	ldrb	r3, [r3, #7]
    17c8:	71bb      	strb	r3, [r7, #6]
  if (status & UART_S1_RDRF_MASK)
    17ca:	79fb      	ldrb	r3, [r7, #7]
    17cc:	f003 0320 	and.w	r3, r3, #32
    17d0:	2b00      	cmp	r3, #0
    17d2:	d01e      	beq.n	1812 <UART1_RX_TX_IRQHandler+0x5a>
  {
    // store the received byte into receiver Queue (rxBuf)
    // but only if the queue isn't full!
    if (rxBufCount < UART1_RX_BUF_SIZE)
    17d4:	4b29      	ldr	r3, [pc, #164]	; (187c <UART1_RX_TX_IRQHandler+0xc4>)
    17d6:	881b      	ldrh	r3, [r3, #0]
    17d8:	b29b      	uxth	r3, r3
    17da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    17de:	d218      	bcs.n	1812 <UART1_RX_TX_IRQHandler+0x5a>
    {
      rxBuf[rxBufWritePos++] = data;
    17e0:	4b27      	ldr	r3, [pc, #156]	; (1880 <UART1_RX_TX_IRQHandler+0xc8>)
    17e2:	881b      	ldrh	r3, [r3, #0]
    17e4:	1c5a      	adds	r2, r3, #1
    17e6:	b291      	uxth	r1, r2
    17e8:	4a25      	ldr	r2, [pc, #148]	; (1880 <UART1_RX_TX_IRQHandler+0xc8>)
    17ea:	8011      	strh	r1, [r2, #0]
    17ec:	4619      	mov	r1, r3
    17ee:	4a25      	ldr	r2, [pc, #148]	; (1884 <UART1_RX_TX_IRQHandler+0xcc>)
    17f0:	79bb      	ldrb	r3, [r7, #6]
    17f2:	5453      	strb	r3, [r2, r1]
      rxBufCount++;
    17f4:	4b21      	ldr	r3, [pc, #132]	; (187c <UART1_RX_TX_IRQHandler+0xc4>)
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	b29b      	uxth	r3, r3
    17fa:	3301      	adds	r3, #1
    17fc:	b29a      	uxth	r2, r3
    17fe:	4b1f      	ldr	r3, [pc, #124]	; (187c <UART1_RX_TX_IRQHandler+0xc4>)
    1800:	801a      	strh	r2, [r3, #0]
      if (rxBufWritePos == UART1_RX_BUF_SIZE) rxBufWritePos = 0;
    1802:	4b1f      	ldr	r3, [pc, #124]	; (1880 <UART1_RX_TX_IRQHandler+0xc8>)
    1804:	881b      	ldrh	r3, [r3, #0]
    1806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    180a:	d102      	bne.n	1812 <UART1_RX_TX_IRQHandler+0x5a>
    180c:	4b1c      	ldr	r3, [pc, #112]	; (1880 <UART1_RX_TX_IRQHandler+0xc8>)
    180e:	2200      	movs	r2, #0
    1810:	801a      	strh	r2, [r3, #0]
    }
  }

  if (status & UART_S1_TDRE_MASK)
    1812:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1816:	2b00      	cmp	r3, #0
    1818:	da27      	bge.n	186a <UART1_RX_TX_IRQHandler+0xb2>
  {
    if (txBufCount > 0)
    181a:	4b1b      	ldr	r3, [pc, #108]	; (1888 <UART1_RX_TX_IRQHandler+0xd0>)
    181c:	881b      	ldrh	r3, [r3, #0]
    181e:	b29b      	uxth	r3, r3
    1820:	2b00      	cmp	r3, #0
    1822:	d01a      	beq.n	185a <UART1_RX_TX_IRQHandler+0xa2>
    {
      UART1->D = txBuf[txBufReadPos++];
    1824:	4b19      	ldr	r3, [pc, #100]	; (188c <UART1_RX_TX_IRQHandler+0xd4>)
    1826:	881b      	ldrh	r3, [r3, #0]
    1828:	1c5a      	adds	r2, r3, #1
    182a:	b291      	uxth	r1, r2
    182c:	4a17      	ldr	r2, [pc, #92]	; (188c <UART1_RX_TX_IRQHandler+0xd4>)
    182e:	8011      	strh	r1, [r2, #0]
    1830:	4619      	mov	r1, r3
    1832:	4b11      	ldr	r3, [pc, #68]	; (1878 <UART1_RX_TX_IRQHandler+0xc0>)
    1834:	4a16      	ldr	r2, [pc, #88]	; (1890 <UART1_RX_TX_IRQHandler+0xd8>)
    1836:	5c52      	ldrb	r2, [r2, r1]
    1838:	71da      	strb	r2, [r3, #7]
      txBufCount--;
    183a:	4b13      	ldr	r3, [pc, #76]	; (1888 <UART1_RX_TX_IRQHandler+0xd0>)
    183c:	881b      	ldrh	r3, [r3, #0]
    183e:	b29b      	uxth	r3, r3
    1840:	3b01      	subs	r3, #1
    1842:	b29a      	uxth	r2, r3
    1844:	4b10      	ldr	r3, [pc, #64]	; (1888 <UART1_RX_TX_IRQHandler+0xd0>)
    1846:	801a      	strh	r2, [r3, #0]
      if (txBufReadPos == UART1_TX_BUF_SIZE) txBufReadPos = 0;
    1848:	4b10      	ldr	r3, [pc, #64]	; (188c <UART1_RX_TX_IRQHandler+0xd4>)
    184a:	881b      	ldrh	r3, [r3, #0]
    184c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1850:	d10b      	bne.n	186a <UART1_RX_TX_IRQHandler+0xb2>
    1852:	4b0e      	ldr	r3, [pc, #56]	; (188c <UART1_RX_TX_IRQHandler+0xd4>)
    1854:	2200      	movs	r2, #0
    1856:	801a      	strh	r2, [r3, #0]
    {
      UART1->C2 &= ~UART_C2_TIE_MASK;
    }
  }
  OnExitUart1RxTxISR();
}
    1858:	e007      	b.n	186a <UART1_RX_TX_IRQHandler+0xb2>
      UART1->C2 &= ~UART_C2_TIE_MASK;
    185a:	4b07      	ldr	r3, [pc, #28]	; (1878 <UART1_RX_TX_IRQHandler+0xc0>)
    185c:	78db      	ldrb	r3, [r3, #3]
    185e:	b2db      	uxtb	r3, r3
    1860:	4a05      	ldr	r2, [pc, #20]	; (1878 <UART1_RX_TX_IRQHandler+0xc0>)
    1862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1866:	b2db      	uxtb	r3, r3
    1868:	70d3      	strb	r3, [r2, #3]
}
    186a:	bf00      	nop
    186c:	370c      	adds	r7, #12
    186e:	46bd      	mov	sp, r7
    1870:	f85d 7b04 	ldr.w	r7, [sp], #4
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	4006b000 	.word	0x4006b000
    187c:	20000936 	.word	0x20000936
    1880:	20000938 	.word	0x20000938
    1884:	20000518 	.word	0x20000518
    1888:	2000093c 	.word	0x2000093c
    188c:	20000940 	.word	0x20000940
    1890:	20000718 	.word	0x20000718

00001894 <UART1_ERR_IRQHandler>:
/**
 * Error Interrupt Service Routine
 * Clears the error flags.
 */
void UART1_ERR_IRQHandler(void)
{
    1894:	b480      	push	{r7}
    1896:	af00      	add	r7, sp, #0
  (void)UART1->S1;
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <UART1_ERR_IRQHandler+0x18>)
    189a:	791b      	ldrb	r3, [r3, #4]
  (void)UART1->D;
    189c:	4b03      	ldr	r3, [pc, #12]	; (18ac <UART1_ERR_IRQHandler+0x18>)
    189e:	79db      	ldrb	r3, [r3, #7]
}
    18a0:	bf00      	nop
    18a2:	46bd      	mov	sp, r7
    18a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	4006b000 	.word	0x4006b000

000018b0 <uart1WriteChar>:
 *
 * @param[in] ch
 *   the byte to send
 */
void uart1WriteChar(char ch)
{
    18b0:	b580      	push	{r7, lr}
    18b2:	b082      	sub	sp, #8
    18b4:	af00      	add	r7, sp, #0
    18b6:	4603      	mov	r3, r0
    18b8:	71fb      	strb	r3, [r7, #7]
  while(txBufCount >= UART1_TX_BUF_SIZE);
    18ba:	bf00      	nop
    18bc:	4b18      	ldr	r3, [pc, #96]	; (1920 <uart1WriteChar+0x70>)
    18be:	881b      	ldrh	r3, [r3, #0]
    18c0:	b29b      	uxth	r3, r3
    18c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    18c6:	d2f9      	bcs.n	18bc <uart1WriteChar+0xc>
  txBuf[txBufWritePos++] = ch;
    18c8:	4b16      	ldr	r3, [pc, #88]	; (1924 <uart1WriteChar+0x74>)
    18ca:	881b      	ldrh	r3, [r3, #0]
    18cc:	1c5a      	adds	r2, r3, #1
    18ce:	b291      	uxth	r1, r2
    18d0:	4a14      	ldr	r2, [pc, #80]	; (1924 <uart1WriteChar+0x74>)
    18d2:	8011      	strh	r1, [r2, #0]
    18d4:	4619      	mov	r1, r3
    18d6:	4a14      	ldr	r2, [pc, #80]	; (1928 <uart1WriteChar+0x78>)
    18d8:	79fb      	ldrb	r3, [r7, #7]
    18da:	5453      	strb	r3, [r2, r1]
  if (txBufWritePos == UART1_TX_BUF_SIZE) txBufWritePos = 0;
    18dc:	4b11      	ldr	r3, [pc, #68]	; (1924 <uart1WriteChar+0x74>)
    18de:	881b      	ldrh	r3, [r3, #0]
    18e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    18e4:	d102      	bne.n	18ec <uart1WriteChar+0x3c>
    18e6:	4b0f      	ldr	r3, [pc, #60]	; (1924 <uart1WriteChar+0x74>)
    18e8:	2200      	movs	r2, #0
    18ea:	801a      	strh	r2, [r3, #0]
  NVIC_DisableIRQEx(UART1_RX_TX_IRQn);
    18ec:	2021      	movs	r0, #33	; 0x21
    18ee:	f001 fc5c 	bl	31aa <NVIC_DisableIRQEx>
  txBufCount++;
    18f2:	4b0b      	ldr	r3, [pc, #44]	; (1920 <uart1WriteChar+0x70>)
    18f4:	881b      	ldrh	r3, [r3, #0]
    18f6:	b29b      	uxth	r3, r3
    18f8:	3301      	adds	r3, #1
    18fa:	b29a      	uxth	r2, r3
    18fc:	4b08      	ldr	r3, [pc, #32]	; (1920 <uart1WriteChar+0x70>)
    18fe:	801a      	strh	r2, [r3, #0]
  NVIC_EnableIRQ(UART1_RX_TX_IRQn);
    1900:	2021      	movs	r0, #33	; 0x21
    1902:	f7ff feef 	bl	16e4 <__NVIC_EnableIRQ>
  UART1->C2 |= UART_C2_TIE_MASK;
    1906:	4b09      	ldr	r3, [pc, #36]	; (192c <uart1WriteChar+0x7c>)
    1908:	78db      	ldrb	r3, [r3, #3]
    190a:	b2db      	uxtb	r3, r3
    190c:	4a07      	ldr	r2, [pc, #28]	; (192c <uart1WriteChar+0x7c>)
    190e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1912:	b2db      	uxtb	r3, r3
    1914:	70d3      	strb	r3, [r2, #3]
}
    1916:	bf00      	nop
    1918:	3708      	adds	r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop
    1920:	2000093c 	.word	0x2000093c
    1924:	2000093e 	.word	0x2000093e
    1928:	20000718 	.word	0x20000718
    192c:	4006b000 	.word	0x4006b000

00001930 <uart1ReadChar>:
 *
 * @return
 *   the received byte
 */
char uart1ReadChar(void)
{
    1930:	b580      	push	{r7, lr}
    1932:	b082      	sub	sp, #8
    1934:	af00      	add	r7, sp, #0
  char ch;
  while (rxBufCount == 0);
    1936:	bf00      	nop
    1938:	4b14      	ldr	r3, [pc, #80]	; (198c <uart1ReadChar+0x5c>)
    193a:	881b      	ldrh	r3, [r3, #0]
    193c:	b29b      	uxth	r3, r3
    193e:	2b00      	cmp	r3, #0
    1940:	d0fa      	beq.n	1938 <uart1ReadChar+0x8>
  ch = rxBuf[rxBufReadPos++];
    1942:	4b13      	ldr	r3, [pc, #76]	; (1990 <uart1ReadChar+0x60>)
    1944:	881b      	ldrh	r3, [r3, #0]
    1946:	1c5a      	adds	r2, r3, #1
    1948:	b291      	uxth	r1, r2
    194a:	4a11      	ldr	r2, [pc, #68]	; (1990 <uart1ReadChar+0x60>)
    194c:	8011      	strh	r1, [r2, #0]
    194e:	461a      	mov	r2, r3
    1950:	4b10      	ldr	r3, [pc, #64]	; (1994 <uart1ReadChar+0x64>)
    1952:	5c9b      	ldrb	r3, [r3, r2]
    1954:	71fb      	strb	r3, [r7, #7]
  if (rxBufReadPos == UART1_RX_BUF_SIZE) rxBufReadPos = 0;
    1956:	4b0e      	ldr	r3, [pc, #56]	; (1990 <uart1ReadChar+0x60>)
    1958:	881b      	ldrh	r3, [r3, #0]
    195a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    195e:	d102      	bne.n	1966 <uart1ReadChar+0x36>
    1960:	4b0b      	ldr	r3, [pc, #44]	; (1990 <uart1ReadChar+0x60>)
    1962:	2200      	movs	r2, #0
    1964:	801a      	strh	r2, [r3, #0]
  NVIC_DisableIRQEx(UART1_RX_TX_IRQn);
    1966:	2021      	movs	r0, #33	; 0x21
    1968:	f001 fc1f 	bl	31aa <NVIC_DisableIRQEx>
  rxBufCount--;
    196c:	4b07      	ldr	r3, [pc, #28]	; (198c <uart1ReadChar+0x5c>)
    196e:	881b      	ldrh	r3, [r3, #0]
    1970:	b29b      	uxth	r3, r3
    1972:	3b01      	subs	r3, #1
    1974:	b29a      	uxth	r2, r3
    1976:	4b05      	ldr	r3, [pc, #20]	; (198c <uart1ReadChar+0x5c>)
    1978:	801a      	strh	r2, [r3, #0]
  NVIC_EnableIRQ(UART1_RX_TX_IRQn);
    197a:	2021      	movs	r0, #33	; 0x21
    197c:	f7ff feb2 	bl	16e4 <__NVIC_EnableIRQ>
  return ch;
    1980:	79fb      	ldrb	r3, [r7, #7]
}
    1982:	4618      	mov	r0, r3
    1984:	3708      	adds	r7, #8
    1986:	46bd      	mov	sp, r7
    1988:	bd80      	pop	{r7, pc}
    198a:	bf00      	nop
    198c:	20000936 	.word	0x20000936
    1990:	2000093a 	.word	0x2000093a
    1994:	20000518 	.word	0x20000518

00001998 <uart1HasLineReceived>:
 *
 * @returns
 *   TRUE, if there is a new line character, otherweise FALSE.
 */
bool uart1HasLineReceived(void)
{
    1998:	b480      	push	{r7}
    199a:	b083      	sub	sp, #12
    199c:	af00      	add	r7, sp, #0
  uint16_t i;
  uint16_t index = rxBufReadPos;
    199e:	4b13      	ldr	r3, [pc, #76]	; (19ec <uart1HasLineReceived+0x54>)
    19a0:	881b      	ldrh	r3, [r3, #0]
    19a2:	80bb      	strh	r3, [r7, #4]

  for (i=0; i<rxBufCount; i++)
    19a4:	2300      	movs	r3, #0
    19a6:	80fb      	strh	r3, [r7, #6]
    19a8:	e012      	b.n	19d0 <uart1HasLineReceived+0x38>
  {
    if (rxBuf[index++] == NEW_LINE) return TRUE;
    19aa:	88bb      	ldrh	r3, [r7, #4]
    19ac:	1c5a      	adds	r2, r3, #1
    19ae:	80ba      	strh	r2, [r7, #4]
    19b0:	461a      	mov	r2, r3
    19b2:	4b0f      	ldr	r3, [pc, #60]	; (19f0 <uart1HasLineReceived+0x58>)
    19b4:	5c9b      	ldrb	r3, [r3, r2]
    19b6:	2b0a      	cmp	r3, #10
    19b8:	d101      	bne.n	19be <uart1HasLineReceived+0x26>
    19ba:	2301      	movs	r3, #1
    19bc:	e00f      	b.n	19de <uart1HasLineReceived+0x46>
    if (index == UART1_RX_BUF_SIZE) index = 0;
    19be:	88bb      	ldrh	r3, [r7, #4]
    19c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    19c4:	d101      	bne.n	19ca <uart1HasLineReceived+0x32>
    19c6:	2300      	movs	r3, #0
    19c8:	80bb      	strh	r3, [r7, #4]
  for (i=0; i<rxBufCount; i++)
    19ca:	88fb      	ldrh	r3, [r7, #6]
    19cc:	3301      	adds	r3, #1
    19ce:	80fb      	strh	r3, [r7, #6]
    19d0:	4b08      	ldr	r3, [pc, #32]	; (19f4 <uart1HasLineReceived+0x5c>)
    19d2:	881b      	ldrh	r3, [r3, #0]
    19d4:	b29b      	uxth	r3, r3
    19d6:	88fa      	ldrh	r2, [r7, #6]
    19d8:	429a      	cmp	r2, r3
    19da:	d3e6      	bcc.n	19aa <uart1HasLineReceived+0x12>
  }
  return FALSE;
    19dc:	2300      	movs	r3, #0
}
    19de:	4618      	mov	r0, r3
    19e0:	370c      	adds	r7, #12
    19e2:	46bd      	mov	sp, r7
    19e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19e8:	4770      	bx	lr
    19ea:	bf00      	nop
    19ec:	2000093a 	.word	0x2000093a
    19f0:	20000518 	.word	0x20000518
    19f4:	20000936 	.word	0x20000936

000019f8 <uart1Init>:
 *   tinyK22:
 *   - PTC3 Mux3:UART1_RX, (MUX7:LPUART1_RX)
 *   - PTC4 Mux3:UART1_TX, (MUX7:LPUART1_TX)
 */
void uart1Init(uint16_t baudrate)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b084      	sub	sp, #16
    19fc:	af00      	add	r7, sp, #0
    19fe:	4603      	mov	r3, r0
    1a00:	80fb      	strh	r3, [r7, #6]
  txBufReadPos = txBufWritePos = txBufCount = 0;
    1a02:	2100      	movs	r1, #0
    1a04:	4b29      	ldr	r3, [pc, #164]	; (1aac <uart1Init+0xb4>)
    1a06:	460a      	mov	r2, r1
    1a08:	801a      	strh	r2, [r3, #0]
    1a0a:	4b29      	ldr	r3, [pc, #164]	; (1ab0 <uart1Init+0xb8>)
    1a0c:	460a      	mov	r2, r1
    1a0e:	801a      	strh	r2, [r3, #0]
    1a10:	4b27      	ldr	r3, [pc, #156]	; (1ab0 <uart1Init+0xb8>)
    1a12:	881a      	ldrh	r2, [r3, #0]
    1a14:	4b27      	ldr	r3, [pc, #156]	; (1ab4 <uart1Init+0xbc>)
    1a16:	801a      	strh	r2, [r3, #0]
  rxBufReadPos = rxBufWritePos = rxBufCount = 0;
    1a18:	2100      	movs	r1, #0
    1a1a:	4b27      	ldr	r3, [pc, #156]	; (1ab8 <uart1Init+0xc0>)
    1a1c:	460a      	mov	r2, r1
    1a1e:	801a      	strh	r2, [r3, #0]
    1a20:	4b26      	ldr	r3, [pc, #152]	; (1abc <uart1Init+0xc4>)
    1a22:	460a      	mov	r2, r1
    1a24:	801a      	strh	r2, [r3, #0]
    1a26:	4b25      	ldr	r3, [pc, #148]	; (1abc <uart1Init+0xc4>)
    1a28:	881a      	ldrh	r2, [r3, #0]
    1a2a:	4b25      	ldr	r3, [pc, #148]	; (1ac0 <uart1Init+0xc8>)
    1a2c:	801a      	strh	r2, [r3, #0]

  // configure clock gating (Kinetis Reference Manual p277) KRM277
  SIM->SCGC4 |= SIM_SCGC4_UART1_MASK;
    1a2e:	4b25      	ldr	r3, [pc, #148]	; (1ac4 <uart1Init+0xcc>)
    1a30:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    1a34:	3314      	adds	r3, #20
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	4922      	ldr	r1, [pc, #136]	; (1ac4 <uart1Init+0xcc>)
    1a3a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1a3e:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
    1a42:	3314      	adds	r3, #20
    1a44:	601a      	str	r2, [r3, #0]

  // configure port multiplexing, enable Pull-Ups and enable OpenDrain (ODE)!
  // OpenDrain is needed to ensure that no current flows from Target-uC to the Debugger-uC
  PORTC->PCR[3] = PORT_PCR_MUX(3) | PORT_PCR_PE(1) | PORT_PCR_PS(1) | PORT_PCR_ODE_MASK;
    1a46:	4b20      	ldr	r3, [pc, #128]	; (1ac8 <uart1Init+0xd0>)
    1a48:	f240 3223 	movw	r2, #803	; 0x323
    1a4c:	60da      	str	r2, [r3, #12]
  PORTC->PCR[4] = PORT_PCR_MUX(3) | PORT_PCR_PE(1) | PORT_PCR_PS(1) | PORT_PCR_ODE_MASK;
    1a4e:	4b1e      	ldr	r3, [pc, #120]	; (1ac8 <uart1Init+0xd0>)
    1a50:	f240 3223 	movw	r2, #803	; 0x323
    1a54:	611a      	str	r2, [r3, #16]

  // set the baudrate into the BDH (first) and BDL (second) register. KRM1215ff
  uint32_t bd = (CORECLOCK / (16 * baudrate));
    1a56:	88fb      	ldrh	r3, [r7, #6]
    1a58:	011b      	lsls	r3, r3, #4
    1a5a:	4a1c      	ldr	r2, [pc, #112]	; (1acc <uart1Init+0xd4>)
    1a5c:	fb92 f3f3 	sdiv	r3, r2, r3
    1a60:	60fb      	str	r3, [r7, #12]
  UART1->BDH = (bd >> 8) & 0x1F;
    1a62:	68fb      	ldr	r3, [r7, #12]
    1a64:	0a1b      	lsrs	r3, r3, #8
    1a66:	b2db      	uxtb	r3, r3
    1a68:	4a19      	ldr	r2, [pc, #100]	; (1ad0 <uart1Init+0xd8>)
    1a6a:	f003 031f 	and.w	r3, r3, #31
    1a6e:	b2db      	uxtb	r3, r3
    1a70:	7013      	strb	r3, [r2, #0]
  UART1->BDL = bd & 0xFF;
    1a72:	4b17      	ldr	r3, [pc, #92]	; (1ad0 <uart1Init+0xd8>)
    1a74:	68fa      	ldr	r2, [r7, #12]
    1a76:	b2d2      	uxtb	r2, r2
    1a78:	705a      	strb	r2, [r3, #1]

  // enable uart receiver, receiver interrupt and transmitter as well as
  // enable and set the rx/tx interrupt in the nested vector interrupt controller (NVIC)
  UART1->C2 = UART_C2_RIE_MASK | UART_C2_RE_MASK | UART_C2_TE_MASK;
    1a7a:	4b15      	ldr	r3, [pc, #84]	; (1ad0 <uart1Init+0xd8>)
    1a7c:	222c      	movs	r2, #44	; 0x2c
    1a7e:	70da      	strb	r2, [r3, #3]
  NVIC_SetPriority(UART1_RX_TX_IRQn, PRIO_UART1);
    1a80:	2105      	movs	r1, #5
    1a82:	2021      	movs	r0, #33	; 0x21
    1a84:	f7ff fe6e 	bl	1764 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART1_RX_TX_IRQn);
    1a88:	2021      	movs	r0, #33	; 0x21
    1a8a:	f7ff fe2b 	bl	16e4 <__NVIC_EnableIRQ>

  // enable the error interrupts of the uart and configure the NVIC
  UART1->C3 = UART_C3_ORIE_MASK | UART_C3_NEIE_MASK | UART_C3_FEIE_MASK;
    1a8e:	4b10      	ldr	r3, [pc, #64]	; (1ad0 <uart1Init+0xd8>)
    1a90:	220e      	movs	r2, #14
    1a92:	719a      	strb	r2, [r3, #6]
  NVIC_SetPriority(UART1_ERR_IRQn, PRIO_UART1);
    1a94:	2105      	movs	r1, #5
    1a96:	2022      	movs	r0, #34	; 0x22
    1a98:	f7ff fe64 	bl	1764 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART1_ERR_IRQn);
    1a9c:	2022      	movs	r0, #34	; 0x22
    1a9e:	f7ff fe21 	bl	16e4 <__NVIC_EnableIRQ>
}
    1aa2:	bf00      	nop
    1aa4:	3710      	adds	r7, #16
    1aa6:	46bd      	mov	sp, r7
    1aa8:	bd80      	pop	{r7, pc}
    1aaa:	bf00      	nop
    1aac:	2000093c 	.word	0x2000093c
    1ab0:	2000093e 	.word	0x2000093e
    1ab4:	20000940 	.word	0x20000940
    1ab8:	20000936 	.word	0x20000936
    1abc:	20000938 	.word	0x20000938
    1ac0:	2000093a 	.word	0x2000093a
    1ac4:	40047000 	.word	0x40047000
    1ac8:	4004b000 	.word	0x4004b000
    1acc:	07270e00 	.word	0x07270e00
    1ad0:	4006b000 	.word	0x4006b000

00001ad4 <BlinkBlueLedEveryMS>:
 *
 * @param[in]
 *   toggle the Led every "ms" milliseconds
 */
void BlinkBlueLedEveryMS(uint16_t timeMS)
{
    1ad4:	b480      	push	{r7}
    1ad6:	b083      	sub	sp, #12
    1ad8:	af00      	add	r7, sp, #0
    1ada:	4603      	mov	r3, r0
    1adc:	80fb      	strh	r3, [r7, #6]
  static uint16_t j;

  if (j++ == FTM3_TOFS_MS(timeMS)) 		// toogle blue led every timeMS milliseconds
    1ade:	4b0f      	ldr	r3, [pc, #60]	; (1b1c <BlinkBlueLedEveryMS+0x48>)
    1ae0:	881a      	ldrh	r2, [r3, #0]
    1ae2:	1c53      	adds	r3, r2, #1
    1ae4:	b299      	uxth	r1, r3
    1ae6:	4b0d      	ldr	r3, [pc, #52]	; (1b1c <BlinkBlueLedEveryMS+0x48>)
    1ae8:	8019      	strh	r1, [r3, #0]
    1aea:	88fb      	ldrh	r3, [r7, #6]
    1aec:	f64e 2160 	movw	r1, #60000	; 0xea60
    1af0:	fb01 f303 	mul.w	r3, r1, r3
    1af4:	2b00      	cmp	r3, #0
    1af6:	da01      	bge.n	1afc <BlinkBlueLedEveryMS+0x28>
    1af8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
    1afc:	131b      	asrs	r3, r3, #12
    1afe:	b29b      	uxth	r3, r3
    1b00:	429a      	cmp	r2, r3
    1b02:	d105      	bne.n	1b10 <BlinkBlueLedEveryMS+0x3c>
  {
	  j=0;
    1b04:	4b05      	ldr	r3, [pc, #20]	; (1b1c <BlinkBlueLedEveryMS+0x48>)
    1b06:	2200      	movs	r2, #0
    1b08:	801a      	strh	r2, [r3, #0]
      GPIOC->PTOR = (1<<2);
    1b0a:	4b05      	ldr	r3, [pc, #20]	; (1b20 <BlinkBlueLedEveryMS+0x4c>)
    1b0c:	2204      	movs	r2, #4
    1b0e:	60da      	str	r2, [r3, #12]
//      if(FTM0->CONTROLS[1].CnV == 250)
//    	  FTM0->CONTROLS[1].CnV = 500;
//      else
//    	  FTM0->CONTROLS[1].CnV = 250;
  }
}
    1b10:	bf00      	nop
    1b12:	370c      	adds	r7, #12
    1b14:	46bd      	mov	sp, r7
    1b16:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b1a:	4770      	bx	lr
    1b1c:	20000942 	.word	0x20000942
    1b20:	400ff080 	.word	0x400ff080

00001b24 <main>:

/**
 * The main function of the MC-Car app.
 */
void main(void)
{
    1b24:	b580      	push	{r7, lr}
    1b26:	af00      	add	r7, sp, #0
  ftm0Init();
    1b28:	f7fe fdea 	bl	700 <ftm0Init>
  ftm3Init();
    1b2c:	f7fe fea0 	bl	870 <ftm3Init>
  termInit(57600);
    1b30:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1b34:	f7ff fba4 	bl	1280 <termInit>
//  EnableDebugLeds();
//  ledInit();
//  i2cInit();
//  eepromInit();
//  adcInit();
  servoInit();
    1b38:	f7fe ffec 	bl	b14 <servoInit>


  // configure blue led on PTC2
  PORTC->PCR[2] = PORT_PCR_MUX(1);
    1b3c:	4b0e      	ldr	r3, [pc, #56]	; (1b78 <main+0x54>)
    1b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b42:	609a      	str	r2, [r3, #8]
  GPIOC->PDDR |= (1<<2);
    1b44:	4b0d      	ldr	r3, [pc, #52]	; (1b7c <main+0x58>)
    1b46:	695b      	ldr	r3, [r3, #20]
    1b48:	4a0c      	ldr	r2, [pc, #48]	; (1b7c <main+0x58>)
    1b4a:	f043 0304 	orr.w	r3, r3, #4
    1b4e:	6153      	str	r3, [r2, #20]

  while(TRUE)
  {
    // check for commands from terminal
    termDoWork();
    1b50:	f7ff fb52 	bl	11f8 <termDoWork>


    // check for timer overflow
    if (FTM3->SC & FTM_SC_TOF_MASK)
    1b54:	4b0a      	ldr	r3, [pc, #40]	; (1b80 <main+0x5c>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d0f7      	beq.n	1b50 <main+0x2c>
    {
      FTM3->SC &= ~FTM_SC_TOF_MASK;    // clear TOF flag
    1b60:	4b07      	ldr	r3, [pc, #28]	; (1b80 <main+0x5c>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	4a06      	ldr	r2, [pc, #24]	; (1b80 <main+0x5c>)
    1b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1b6a:	6013      	str	r3, [r2, #0]
      BlinkBlueLedEveryMS(1000);
    1b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1b70:	f7ff ffb0 	bl	1ad4 <BlinkBlueLedEveryMS>
    termDoWork();
    1b74:	e7ec      	b.n	1b50 <main+0x2c>
    1b76:	bf00      	nop
    1b78:	4004b000 	.word	0x4004b000
    1b7c:	400ff080 	.word	0x400ff080
    1b80:	40026000 	.word	0x40026000

00001b84 <CLOCK_SetEr32kClock>:
 * @brief Set ERCLK32K source.
 *
 * @param src The value to set ERCLK32K clock source.
 */
static inline void CLOCK_SetEr32kClock(uint32_t src)
{
    1b84:	b480      	push	{r7}
    1b86:	b083      	sub	sp, #12
    1b88:	af00      	add	r7, sp, #0
    1b8a:	6078      	str	r0, [r7, #4]
    SIM->SOPT1 = ((SIM->SOPT1 & ~SIM_SOPT1_OSC32KSEL_MASK) | SIM_SOPT1_OSC32KSEL(src));
    1b8c:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <CLOCK_SetEr32kClock+0x2c>)
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	049b      	lsls	r3, r3, #18
    1b98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    1b9c:	4904      	ldr	r1, [pc, #16]	; (1bb0 <CLOCK_SetEr32kClock+0x2c>)
    1b9e:	4313      	orrs	r3, r2
    1ba0:	600b      	str	r3, [r1, #0]
}
    1ba2:	bf00      	nop
    1ba4:	370c      	adds	r7, #12
    1ba6:	46bd      	mov	sp, r7
    1ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bac:	4770      	bx	lr
    1bae:	bf00      	nop
    1bb0:	40047000 	.word	0x40047000

00001bb4 <CLOCK_SetPllFllSelClock>:
 * @brief Set PLLFLLSEL clock source.
 *
 * @param src The value to set PLLFLLSEL clock source.
 */
static inline void CLOCK_SetPllFllSelClock(uint32_t src)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_PLLFLLSEL_MASK) | SIM_SOPT2_PLLFLLSEL(src));
    1bbc:	4b0b      	ldr	r3, [pc, #44]	; (1bec <CLOCK_SetPllFllSelClock+0x38>)
    1bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1bc2:	3304      	adds	r3, #4
    1bc4:	681b      	ldr	r3, [r3, #0]
    1bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
    1bca:	687b      	ldr	r3, [r7, #4]
    1bcc:	041b      	lsls	r3, r3, #16
    1bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    1bd2:	4906      	ldr	r1, [pc, #24]	; (1bec <CLOCK_SetPllFllSelClock+0x38>)
    1bd4:	431a      	orrs	r2, r3
    1bd6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    1bda:	3304      	adds	r3, #4
    1bdc:	601a      	str	r2, [r3, #0]
}
    1bde:	bf00      	nop
    1be0:	370c      	adds	r7, #12
    1be2:	46bd      	mov	sp, r7
    1be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1be8:	4770      	bx	lr
    1bea:	bf00      	nop
    1bec:	40047000 	.word	0x40047000

00001bf0 <CLOCK_GetOscRangeFromFreq>:
    /* MCG external reference clock. */
    return CLOCK_GetMcgExtClkFreq();
}

static uint8_t CLOCK_GetOscRangeFromFreq(uint32_t freq)
{
    1bf0:	b480      	push	{r7}
    1bf2:	b085      	sub	sp, #20
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
    uint8_t range;

    if (freq <= 39063U)
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	f649 0297 	movw	r2, #39063	; 0x9897
    1bfe:	4293      	cmp	r3, r2
    1c00:	d802      	bhi.n	1c08 <CLOCK_GetOscRangeFromFreq+0x18>
    {
        range = 0U;
    1c02:	2300      	movs	r3, #0
    1c04:	73fb      	strb	r3, [r7, #15]
    1c06:	e008      	b.n	1c1a <CLOCK_GetOscRangeFromFreq+0x2a>
    }
    else if (freq <= 8000000U)
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	4a07      	ldr	r2, [pc, #28]	; (1c28 <CLOCK_GetOscRangeFromFreq+0x38>)
    1c0c:	4293      	cmp	r3, r2
    1c0e:	d802      	bhi.n	1c16 <CLOCK_GetOscRangeFromFreq+0x26>
    {
        range = 1U;
    1c10:	2301      	movs	r3, #1
    1c12:	73fb      	strb	r3, [r7, #15]
    1c14:	e001      	b.n	1c1a <CLOCK_GetOscRangeFromFreq+0x2a>
    }
    else
    {
        range = 2U;
    1c16:	2302      	movs	r3, #2
    1c18:	73fb      	strb	r3, [r7, #15]
    }

    return range;
    1c1a:	7bfb      	ldrb	r3, [r7, #15]
}
    1c1c:	4618      	mov	r0, r3
    1c1e:	3714      	adds	r7, #20
    1c20:	46bd      	mov	sp, r7
    1c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c26:	4770      	bx	lr
    1c28:	007a1200 	.word	0x007a1200

00001c2c <CLOCK_SetSimConfig>:
 * This function sets system layer clock settings in SIM module.
 *
 * param config Pointer to the configure structure.
 */
void CLOCK_SetSimConfig(sim_clock_config_t const *config)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
    1c32:	6078      	str	r0, [r7, #4]
    SIM->CLKDIV1 = config->clkdiv1;
    1c34:	490a      	ldr	r1, [pc, #40]	; (1c60 <CLOCK_SetSimConfig+0x34>)
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	685a      	ldr	r2, [r3, #4]
    1c3a:	f501 5382 	add.w	r3, r1, #4160	; 0x1040
    1c3e:	3304      	adds	r3, #4
    1c40:	601a      	str	r2, [r3, #0]
    CLOCK_SetPllFllSelClock(config->pllFllSel);
    1c42:	687b      	ldr	r3, [r7, #4]
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	4618      	mov	r0, r3
    1c48:	f7ff ffb4 	bl	1bb4 <CLOCK_SetPllFllSelClock>
    CLOCK_SetEr32kClock(config->er32kSrc);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	785b      	ldrb	r3, [r3, #1]
    1c50:	4618      	mov	r0, r3
    1c52:	f7ff ff97 	bl	1b84 <CLOCK_SetEr32kClock>
}
    1c56:	bf00      	nop
    1c58:	3708      	adds	r7, #8
    1c5a:	46bd      	mov	sp, r7
    1c5c:	bd80      	pop	{r7, pc}
    1c5e:	bf00      	nop
    1c60:	40047000 	.word	0x40047000

00001c64 <CLOCK_SetExternalRefClkConfig>:
 * retval kStatus_MCG_SourceUsed Because the external reference clock is used as a clock source,
 * the configuration should not be changed. Otherwise, a glitch occurs.
 * retval kStatus_Success External reference clock set successfully.
 */
status_t CLOCK_SetExternalRefClkConfig(mcg_oscsel_t oscsel)
{
    1c64:	b480      	push	{r7}
    1c66:	b085      	sub	sp, #20
    1c68:	af00      	add	r7, sp, #0
    1c6a:	4603      	mov	r3, r0
    1c6c:	71fb      	strb	r3, [r7, #7]
    {
        return kStatus_MCG_SourceUsed;
    }
#endif /* MCG_CONFIG_CHECK_PARAM */

    if (MCG_C7_OSCSEL_VAL != (uint8_t)oscsel)
    1c6e:	4b17      	ldr	r3, [pc, #92]	; (1ccc <CLOCK_SetExternalRefClkConfig+0x68>)
    1c70:	7b1b      	ldrb	r3, [r3, #12]
    1c72:	b2db      	uxtb	r3, r3
    1c74:	f003 0203 	and.w	r2, r3, #3
    1c78:	79fb      	ldrb	r3, [r7, #7]
    1c7a:	429a      	cmp	r2, r3
    1c7c:	d002      	beq.n	1c84 <CLOCK_SetExternalRefClkConfig+0x20>
    {
        /* If change OSCSEL, need to delay, ERR009878. */
        needDelay = true;
    1c7e:	2301      	movs	r3, #1
    1c80:	73fb      	strb	r3, [r7, #15]
    1c82:	e001      	b.n	1c88 <CLOCK_SetExternalRefClkConfig+0x24>
    }
    else
    {
        needDelay = false;
    1c84:	2300      	movs	r3, #0
    1c86:	73fb      	strb	r3, [r7, #15]
    }

    MCG->C7 = (uint8_t)(MCG->C7 & ~MCG_C7_OSCSEL_MASK) | MCG_C7_OSCSEL(oscsel);
    1c88:	4b10      	ldr	r3, [pc, #64]	; (1ccc <CLOCK_SetExternalRefClkConfig+0x68>)
    1c8a:	7b1b      	ldrb	r3, [r3, #12]
    1c8c:	b2db      	uxtb	r3, r3
    1c8e:	f023 0303 	bic.w	r3, r3, #3
    1c92:	b2da      	uxtb	r2, r3
    1c94:	79fb      	ldrb	r3, [r7, #7]
    1c96:	f003 0303 	and.w	r3, r3, #3
    1c9a:	b2db      	uxtb	r3, r3
    1c9c:	490b      	ldr	r1, [pc, #44]	; (1ccc <CLOCK_SetExternalRefClkConfig+0x68>)
    1c9e:	4313      	orrs	r3, r2
    1ca0:	b2db      	uxtb	r3, r3
    1ca2:	730b      	strb	r3, [r1, #12]
    if (needDelay)
    1ca4:	7bfb      	ldrb	r3, [r7, #15]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d009      	beq.n	1cbe <CLOCK_SetExternalRefClkConfig+0x5a>
    {
        /* ERR009878 Delay at least 50 micro-seconds for external clock change valid. */
        i = 1500U;
    1caa:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1cae:	60bb      	str	r3, [r7, #8]
        while (0U != (i--))
    1cb0:	e000      	b.n	1cb4 <CLOCK_SetExternalRefClkConfig+0x50>
        {
            __NOP();
    1cb2:	bf00      	nop
        while (0U != (i--))
    1cb4:	68bb      	ldr	r3, [r7, #8]
    1cb6:	1e5a      	subs	r2, r3, #1
    1cb8:	60ba      	str	r2, [r7, #8]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d1f9      	bne.n	1cb2 <CLOCK_SetExternalRefClkConfig+0x4e>
        }
    }

    return kStatus_Success;
    1cbe:	2300      	movs	r3, #0
}
    1cc0:	4618      	mov	r0, r3
    1cc2:	3714      	adds	r7, #20
    1cc4:	46bd      	mov	sp, r7
    1cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cca:	4770      	bx	lr
    1ccc:	40064000 	.word	0x40064000

00001cd0 <CLOCK_EnablePll0>:
 * divider values.
 *
 * param config Pointer to the configuration structure.
 */
void CLOCK_EnablePll0(mcg_pll_config_t const *config)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b084      	sub	sp, #16
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    assert(config);
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d106      	bne.n	1cec <CLOCK_EnablePll0+0x1c>
    1cde:	4b1d      	ldr	r3, [pc, #116]	; (1d54 <CLOCK_EnablePll0+0x84>)
    1ce0:	4a1d      	ldr	r2, [pc, #116]	; (1d58 <CLOCK_EnablePll0+0x88>)
    1ce2:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1ce6:	481d      	ldr	r0, [pc, #116]	; (1d5c <CLOCK_EnablePll0+0x8c>)
    1ce8:	f000 f9b0 	bl	204c <__assert_func>

    uint8_t mcg_c5 = 0U;
    1cec:	2300      	movs	r3, #0
    1cee:	73fb      	strb	r3, [r7, #15]

    mcg_c5 |= MCG_C5_PRDIV0(config->prdiv);
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	785b      	ldrb	r3, [r3, #1]
    1cf4:	f003 031f 	and.w	r3, r3, #31
    1cf8:	b2da      	uxtb	r2, r3
    1cfa:	7bfb      	ldrb	r3, [r7, #15]
    1cfc:	4313      	orrs	r3, r2
    1cfe:	73fb      	strb	r3, [r7, #15]
    MCG->C5 = mcg_c5; /* Disable the PLL first. */
    1d00:	4a17      	ldr	r2, [pc, #92]	; (1d60 <CLOCK_EnablePll0+0x90>)
    1d02:	7bfb      	ldrb	r3, [r7, #15]
    1d04:	7113      	strb	r3, [r2, #4]

    MCG->C6 = (MCG->C6 & ~MCG_C6_VDIV0_MASK) | MCG_C6_VDIV0(config->vdiv);
    1d06:	4b16      	ldr	r3, [pc, #88]	; (1d60 <CLOCK_EnablePll0+0x90>)
    1d08:	795b      	ldrb	r3, [r3, #5]
    1d0a:	b2db      	uxtb	r3, r3
    1d0c:	f023 031f 	bic.w	r3, r3, #31
    1d10:	b2da      	uxtb	r2, r3
    1d12:	687b      	ldr	r3, [r7, #4]
    1d14:	789b      	ldrb	r3, [r3, #2]
    1d16:	f003 031f 	and.w	r3, r3, #31
    1d1a:	b2db      	uxtb	r3, r3
    1d1c:	4910      	ldr	r1, [pc, #64]	; (1d60 <CLOCK_EnablePll0+0x90>)
    1d1e:	4313      	orrs	r3, r2
    1d20:	b2db      	uxtb	r3, r3
    1d22:	714b      	strb	r3, [r1, #5]

    /* Set enable mode. */
    MCG->C5 |= ((uint32_t)kMCG_PllEnableIndependent | (uint32_t)config->enableMode);
    1d24:	4b0e      	ldr	r3, [pc, #56]	; (1d60 <CLOCK_EnablePll0+0x90>)
    1d26:	791b      	ldrb	r3, [r3, #4]
    1d28:	b2da      	uxtb	r2, r3
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	781b      	ldrb	r3, [r3, #0]
    1d2e:	4313      	orrs	r3, r2
    1d30:	b2db      	uxtb	r3, r3
    1d32:	4a0b      	ldr	r2, [pc, #44]	; (1d60 <CLOCK_EnablePll0+0x90>)
    1d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	7113      	strb	r3, [r2, #4]

    /* Wait for PLL lock. */
    while (!(MCG->S & MCG_S_LOCK0_MASK))
    1d3c:	bf00      	nop
    1d3e:	4b08      	ldr	r3, [pc, #32]	; (1d60 <CLOCK_EnablePll0+0x90>)
    1d40:	799b      	ldrb	r3, [r3, #6]
    1d42:	b2db      	uxtb	r3, r3
    1d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d0f8      	beq.n	1d3e <CLOCK_EnablePll0+0x6e>
    {
    }
}
    1d4c:	bf00      	nop
    1d4e:	3710      	adds	r7, #16
    1d50:	46bd      	mov	sp, r7
    1d52:	bd80      	pop	{r7, pc}
    1d54:	00003894 	.word	0x00003894
    1d58:	0000389c 	.word	0x0000389c
    1d5c:	00003870 	.word	0x00003870
    1d60:	40064000 	.word	0x40064000

00001d64 <CLOCK_InitOsc0>:
 * This function initializes the OSC0 according to the board configuration.
 *
 * param  config Pointer to the OSC0 configuration structure.
 */
void CLOCK_InitOsc0(osc_config_t const *config)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b084      	sub	sp, #16
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
    uint8_t range = CLOCK_GetOscRangeFromFreq(config->freq);
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	681b      	ldr	r3, [r3, #0]
    1d70:	4618      	mov	r0, r3
    1d72:	f7ff ff3d 	bl	1bf0 <CLOCK_GetOscRangeFromFreq>
    1d76:	4603      	mov	r3, r0
    1d78:	73fb      	strb	r3, [r7, #15]

    OSC_SetCapLoad(OSC0, config->capLoad);
    1d7a:	687b      	ldr	r3, [r7, #4]
    1d7c:	791b      	ldrb	r3, [r3, #4]
    1d7e:	4619      	mov	r1, r3
    1d80:	4819      	ldr	r0, [pc, #100]	; (1de8 <CLOCK_InitOsc0+0x84>)
    1d82:	f001 fa95 	bl	32b0 <OSC_SetCapLoad>

    MCG->C2 = (uint8_t)((MCG->C2 & ~OSC_MODE_MASK) | MCG_C2_RANGE(range) | (uint8_t)config->workMode);
    1d86:	4b19      	ldr	r3, [pc, #100]	; (1dec <CLOCK_InitOsc0+0x88>)
    1d88:	785b      	ldrb	r3, [r3, #1]
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
    1d90:	b2da      	uxtb	r2, r3
    1d92:	7bfb      	ldrb	r3, [r7, #15]
    1d94:	011b      	lsls	r3, r3, #4
    1d96:	b2db      	uxtb	r3, r3
    1d98:	f003 0330 	and.w	r3, r3, #48	; 0x30
    1d9c:	b2db      	uxtb	r3, r3
    1d9e:	4313      	orrs	r3, r2
    1da0:	b2da      	uxtb	r2, r3
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	795b      	ldrb	r3, [r3, #5]
    1da6:	4911      	ldr	r1, [pc, #68]	; (1dec <CLOCK_InitOsc0+0x88>)
    1da8:	4313      	orrs	r3, r2
    1daa:	b2db      	uxtb	r3, r3
    1dac:	704b      	strb	r3, [r1, #1]
    OSC_SetExtRefClkConfig(OSC0, &config->oscerConfig);
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	3306      	adds	r3, #6
    1db2:	4619      	mov	r1, r3
    1db4:	480c      	ldr	r0, [pc, #48]	; (1de8 <CLOCK_InitOsc0+0x84>)
    1db6:	f001 fa5b 	bl	3270 <OSC_SetExtRefClkConfig>

    if ((kOSC_ModeExt != config->workMode) && (OSC0->CR & OSC_CR_ERCLKEN_MASK))
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	795b      	ldrb	r3, [r3, #5]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d00d      	beq.n	1dde <CLOCK_InitOsc0+0x7a>
    1dc2:	4b09      	ldr	r3, [pc, #36]	; (1de8 <CLOCK_InitOsc0+0x84>)
    1dc4:	781b      	ldrb	r3, [r3, #0]
    1dc6:	b2db      	uxtb	r3, r3
    1dc8:	b25b      	sxtb	r3, r3
    1dca:	2b00      	cmp	r3, #0
    1dcc:	da07      	bge.n	1dde <CLOCK_InitOsc0+0x7a>
    {
        /* Wait for stable. */
        while (0U == (MCG->S & MCG_S_OSCINIT0_MASK))
    1dce:	bf00      	nop
    1dd0:	4b06      	ldr	r3, [pc, #24]	; (1dec <CLOCK_InitOsc0+0x88>)
    1dd2:	799b      	ldrb	r3, [r3, #6]
    1dd4:	b2db      	uxtb	r3, r3
    1dd6:	f003 0302 	and.w	r3, r3, #2
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d0f8      	beq.n	1dd0 <CLOCK_InitOsc0+0x6c>
        {
        }
    }
}
    1dde:	bf00      	nop
    1de0:	3710      	adds	r7, #16
    1de2:	46bd      	mov	sp, r7
    1de4:	bd80      	pop	{r7, pc}
    1de6:	bf00      	nop
    1de8:	40065000 	.word	0x40065000
    1dec:	40064000 	.word	0x40064000

00001df0 <CLOCK_SetPbeMode>:
 * platforms,  it is possible to choose the external PLL directly, which renders the
 * configuration structure not necessary. In this case, pass in NULL.
 * For example: CLOCK_SetPbeMode(kMCG_OscselOsc, kMCG_PllClkSelExtPll, NULL);
 */
status_t CLOCK_SetPbeMode(mcg_pll_clk_select_t pllcs, mcg_pll_config_t const *config)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b082      	sub	sp, #8
    1df4:	af00      	add	r7, sp, #0
    1df6:	4603      	mov	r3, r0
    1df8:	6039      	str	r1, [r7, #0]
    1dfa:	71fb      	strb	r3, [r7, #7]
    assert(config);
    1dfc:	683b      	ldr	r3, [r7, #0]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d106      	bne.n	1e10 <CLOCK_SetPbeMode+0x20>
    1e02:	4b25      	ldr	r3, [pc, #148]	; (1e98 <CLOCK_SetPbeMode+0xa8>)
    1e04:	4a25      	ldr	r2, [pc, #148]	; (1e9c <CLOCK_SetPbeMode+0xac>)
    1e06:	f240 7167 	movw	r1, #1895	; 0x767
    1e0a:	4825      	ldr	r0, [pc, #148]	; (1ea0 <CLOCK_SetPbeMode+0xb0>)
    1e0c:	f000 f91e 	bl	204c <__assert_func>

    /*
       This function is designed to change MCG to PBE mode from PEE/BLPE/FBE,
       but with this workflow, the source mode could be all modes except PEI/PBI.
     */
    MCG->C2 &= ~MCG_C2_LP_MASK; /* Disable lowpower. */
    1e10:	4b24      	ldr	r3, [pc, #144]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e12:	785b      	ldrb	r3, [r3, #1]
    1e14:	b2db      	uxtb	r3, r3
    1e16:	4a23      	ldr	r2, [pc, #140]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e18:	f023 0302 	bic.w	r3, r3, #2
    1e1c:	b2db      	uxtb	r3, r3
    1e1e:	7053      	strb	r3, [r2, #1]

    /* Change to use external clock first. */
    MCG->C1 = ((MCG->C1 & ~(MCG_C1_CLKS_MASK | MCG_C1_IREFS_MASK)) | MCG_C1_CLKS(kMCG_ClkOutSrcExternal));
    1e20:	4b20      	ldr	r3, [pc, #128]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	b2db      	uxtb	r3, r3
    1e26:	f003 033b 	and.w	r3, r3, #59	; 0x3b
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	4a1d      	ldr	r2, [pc, #116]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1e32:	b2db      	uxtb	r3, r3
    1e34:	7013      	strb	r3, [r2, #0]

    /* Wait for CLKST clock status bits to show clock source is ext ref clk */
    while ((MCG->S & (MCG_S_IREFST_MASK | MCG_S_CLKST_MASK)) !=
    1e36:	bf00      	nop
    1e38:	4b1a      	ldr	r3, [pc, #104]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e3a:	799b      	ldrb	r3, [r3, #6]
    1e3c:	b2db      	uxtb	r3, r3
    1e3e:	f003 031c 	and.w	r3, r3, #28
    1e42:	2b08      	cmp	r3, #8
    1e44:	d1f8      	bne.n	1e38 <CLOCK_SetPbeMode+0x48>
           (MCG_S_IREFST(kMCG_FllSrcExternal) | MCG_S_CLKST(kMCG_ClkOutStatExt)))
    {
    }

    /* Disable PLL first, then configure PLL. */
    MCG->C6 &= ~MCG_C6_PLLS_MASK;
    1e46:	4b17      	ldr	r3, [pc, #92]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e48:	795b      	ldrb	r3, [r3, #5]
    1e4a:	b2db      	uxtb	r3, r3
    1e4c:	4a15      	ldr	r2, [pc, #84]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1e52:	b2db      	uxtb	r3, r3
    1e54:	7153      	strb	r3, [r2, #5]
    while (MCG->S & MCG_S_PLLST_MASK)
    1e56:	bf00      	nop
    1e58:	4b12      	ldr	r3, [pc, #72]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e5a:	799b      	ldrb	r3, [r3, #6]
    1e5c:	b2db      	uxtb	r3, r3
    1e5e:	f003 0320 	and.w	r3, r3, #32
    1e62:	2b00      	cmp	r3, #0
    1e64:	d1f8      	bne.n	1e58 <CLOCK_SetPbeMode+0x68>
    {
    }

    /* Configure the PLL. */
    {
        CLOCK_EnablePll0(config);
    1e66:	6838      	ldr	r0, [r7, #0]
    1e68:	f7ff ff32 	bl	1cd0 <CLOCK_EnablePll0>
    }

    /* Change to PLL mode. */
    MCG->C6 |= MCG_C6_PLLS_MASK;
    1e6c:	4b0d      	ldr	r3, [pc, #52]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e6e:	795b      	ldrb	r3, [r3, #5]
    1e70:	b2db      	uxtb	r3, r3
    1e72:	4a0c      	ldr	r2, [pc, #48]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e78:	b2db      	uxtb	r3, r3
    1e7a:	7153      	strb	r3, [r2, #5]

    /* Wait for PLL mode changed. */
    while (!(MCG->S & MCG_S_PLLST_MASK))
    1e7c:	bf00      	nop
    1e7e:	4b09      	ldr	r3, [pc, #36]	; (1ea4 <CLOCK_SetPbeMode+0xb4>)
    1e80:	799b      	ldrb	r3, [r3, #6]
    1e82:	b2db      	uxtb	r3, r3
    1e84:	f003 0320 	and.w	r3, r3, #32
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d0f8      	beq.n	1e7e <CLOCK_SetPbeMode+0x8e>
    {
    }

    return kStatus_Success;
    1e8c:	2300      	movs	r3, #0
}
    1e8e:	4618      	mov	r0, r3
    1e90:	3708      	adds	r7, #8
    1e92:	46bd      	mov	sp, r7
    1e94:	bd80      	pop	{r7, pc}
    1e96:	bf00      	nop
    1e98:	00003894 	.word	0x00003894
    1e9c:	000038b0 	.word	0x000038b0
    1ea0:	00003870 	.word	0x00003870
    1ea4:	40064000 	.word	0x40064000

00001ea8 <CLOCK_BootToPeeMode>:
 *
 * retval kStatus_MCG_ModeUnreachable Could not switch to the target mode.
 * retval kStatus_Success Switched to the target mode successfully.
 */
status_t CLOCK_BootToPeeMode(mcg_oscsel_t oscsel, mcg_pll_clk_select_t pllcs, mcg_pll_config_t const *config)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b082      	sub	sp, #8
    1eac:	af00      	add	r7, sp, #0
    1eae:	4603      	mov	r3, r0
    1eb0:	603a      	str	r2, [r7, #0]
    1eb2:	71fb      	strb	r3, [r7, #7]
    1eb4:	460b      	mov	r3, r1
    1eb6:	71bb      	strb	r3, [r7, #6]
    assert(config);
    1eb8:	683b      	ldr	r3, [r7, #0]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d106      	bne.n	1ecc <CLOCK_BootToPeeMode+0x24>
    1ebe:	4b13      	ldr	r3, [pc, #76]	; (1f0c <CLOCK_BootToPeeMode+0x64>)
    1ec0:	4a13      	ldr	r2, [pc, #76]	; (1f10 <CLOCK_BootToPeeMode+0x68>)
    1ec2:	f44f 6108 	mov.w	r1, #2176	; 0x880
    1ec6:	4813      	ldr	r0, [pc, #76]	; (1f14 <CLOCK_BootToPeeMode+0x6c>)
    1ec8:	f000 f8c0 	bl	204c <__assert_func>

    CLOCK_SetExternalRefClkConfig(oscsel);
    1ecc:	79fb      	ldrb	r3, [r7, #7]
    1ece:	4618      	mov	r0, r3
    1ed0:	f7ff fec8 	bl	1c64 <CLOCK_SetExternalRefClkConfig>

    CLOCK_SetPbeMode(pllcs, config);
    1ed4:	79bb      	ldrb	r3, [r7, #6]
    1ed6:	6839      	ldr	r1, [r7, #0]
    1ed8:	4618      	mov	r0, r3
    1eda:	f7ff ff89 	bl	1df0 <CLOCK_SetPbeMode>

    /* Change to use PLL output clock. */
    MCG->C1 = (MCG->C1 & ~MCG_C1_CLKS_MASK) | MCG_C1_CLKS(kMCG_ClkOutSrcOut);
    1ede:	4b0e      	ldr	r3, [pc, #56]	; (1f18 <CLOCK_BootToPeeMode+0x70>)
    1ee0:	781b      	ldrb	r3, [r3, #0]
    1ee2:	b2db      	uxtb	r3, r3
    1ee4:	4a0c      	ldr	r2, [pc, #48]	; (1f18 <CLOCK_BootToPeeMode+0x70>)
    1ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1eea:	b2db      	uxtb	r3, r3
    1eec:	7013      	strb	r3, [r2, #0]
    while (MCG_S_CLKST_VAL != (uint8_t)kMCG_ClkOutStatPll)
    1eee:	bf00      	nop
    1ef0:	4b09      	ldr	r3, [pc, #36]	; (1f18 <CLOCK_BootToPeeMode+0x70>)
    1ef2:	799b      	ldrb	r3, [r3, #6]
    1ef4:	b2db      	uxtb	r3, r3
    1ef6:	089b      	lsrs	r3, r3, #2
    1ef8:	f003 0303 	and.w	r3, r3, #3
    1efc:	2b03      	cmp	r3, #3
    1efe:	d1f7      	bne.n	1ef0 <CLOCK_BootToPeeMode+0x48>
    {
    }

    return kStatus_Success;
    1f00:	2300      	movs	r3, #0
}
    1f02:	4618      	mov	r0, r3
    1f04:	3708      	adds	r7, #8
    1f06:	46bd      	mov	sp, r7
    1f08:	bd80      	pop	{r7, pc}
    1f0a:	bf00      	nop
    1f0c:	00003894 	.word	0x00003894
    1f10:	000038c4 	.word	0x000038c4
    1f14:	00003870 	.word	0x00003870
    1f18:	40064000 	.word	0x40064000

00001f1c <SystemInit>:

/* ----------------------------------------------------------------------------
   -- SystemInit()
   ---------------------------------------------------------------------------- */

void SystemInit (void) {
    1f1c:	b580      	push	{r7, lr}
    1f1e:	af00      	add	r7, sp, #0
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));    /* set CP10, CP11 Full Access */
    1f20:	4b0b      	ldr	r3, [pc, #44]	; (1f50 <SystemInit+0x34>)
    1f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1f26:	4a0a      	ldr	r2, [pc, #40]	; (1f50 <SystemInit+0x34>)
    1f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    1f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* ((__FPU_PRESENT == 1) && (__FPU_USED == 1)) */

#if (DISABLE_WDOG)
  /* WDOG->UNLOCK: WDOGUNLOCK=0xC520 */
  WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xC520); /* Key 1 */
    1f30:	4b08      	ldr	r3, [pc, #32]	; (1f54 <SystemInit+0x38>)
    1f32:	f24c 5220 	movw	r2, #50464	; 0xc520
    1f36:	81da      	strh	r2, [r3, #14]
  /* WDOG->UNLOCK: WDOGUNLOCK=0xD928 */
  WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xD928); /* Key 2 */
    1f38:	4b06      	ldr	r3, [pc, #24]	; (1f54 <SystemInit+0x38>)
    1f3a:	f64d 1228 	movw	r2, #55592	; 0xd928
    1f3e:	81da      	strh	r2, [r3, #14]
  /* WDOG->STCTRLH: ?=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,?=0,?=1,WAITEN=1,STOPEN=1,DBGEN=0,ALLOWUPDATE=1,WINEN=0,IRQRSTEN=0,CLKSRC=1,WDOGEN=0 */
  WDOG->STCTRLH = WDOG_STCTRLH_BYTESEL(0x00) |
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <SystemInit+0x38>)
    1f42:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    1f46:	801a      	strh	r2, [r3, #0]
                 WDOG_STCTRLH_ALLOWUPDATE_MASK |
                 WDOG_STCTRLH_CLKSRC_MASK |
                 0x0100U;
#endif /* (DISABLE_WDOG) */

  SystemInitHook();
    1f48:	f7fe fab2 	bl	4b0 <SystemInitHook>
}
    1f4c:	bf00      	nop
    1f4e:	bd80      	pop	{r7, pc}
    1f50:	e000ed00 	.word	0xe000ed00
    1f54:	40052000 	.word	0x40052000

00001f58 <CLOCK_SetSimSafeDivs>:
 * range.
 *
 * @param config Pointer to the configure structure.
 */
static inline void CLOCK_SetSimSafeDivs(void)
{
    1f58:	b480      	push	{r7}
    1f5a:	af00      	add	r7, sp, #0
    SIM->CLKDIV1 = 0x01230000U;
    1f5c:	4b05      	ldr	r3, [pc, #20]	; (1f74 <CLOCK_SetSimSafeDivs+0x1c>)
    1f5e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
    1f62:	3304      	adds	r3, #4
    1f64:	4a04      	ldr	r2, [pc, #16]	; (1f78 <CLOCK_SetSimSafeDivs+0x20>)
    1f66:	601a      	str	r2, [r3, #0]
}
    1f68:	bf00      	nop
    1f6a:	46bd      	mov	sp, r7
    1f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f70:	4770      	bx	lr
    1f72:	bf00      	nop
    1f74:	40047000 	.word	0x40047000
    1f78:	01230000 	.word	0x01230000

00001f7c <CLOCK_SetXtal0Freq>:
 * @brief Sets the XTAL0 frequency based on board settings.
 *
 * @param freq The XTAL0/EXTAL0 input clock frequency in Hz.
 */
static inline void CLOCK_SetXtal0Freq(uint32_t freq)
{
    1f7c:	b480      	push	{r7}
    1f7e:	b083      	sub	sp, #12
    1f80:	af00      	add	r7, sp, #0
    1f82:	6078      	str	r0, [r7, #4]
    g_xtal0Freq = freq;
    1f84:	4a04      	ldr	r2, [pc, #16]	; (1f98 <CLOCK_SetXtal0Freq+0x1c>)
    1f86:	687b      	ldr	r3, [r7, #4]
    1f88:	6013      	str	r3, [r2, #0]
}
    1f8a:	bf00      	nop
    1f8c:	370c      	adds	r7, #12
    1f8e:	46bd      	mov	sp, r7
    1f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f94:	4770      	bx	lr
    1f96:	bf00      	nop
    1f98:	20000918 	.word	0x20000918

00001f9c <CLOCK_CONFIG_SetFllExtRefDiv>:
 * Description   : Configure FLL external reference divider (FRDIV).
 * Param frdiv   : The value to set FRDIV.
 *
 *END**************************************************************************/
static void CLOCK_CONFIG_SetFllExtRefDiv(uint8_t frdiv)
{
    1f9c:	b480      	push	{r7}
    1f9e:	b083      	sub	sp, #12
    1fa0:	af00      	add	r7, sp, #0
    1fa2:	4603      	mov	r3, r0
    1fa4:	71fb      	strb	r3, [r7, #7]
    MCG->C1 = ((MCG->C1 & ~MCG_C1_FRDIV_MASK) | MCG_C1_FRDIV(frdiv));
    1fa6:	4b0b      	ldr	r3, [pc, #44]	; (1fd4 <CLOCK_CONFIG_SetFllExtRefDiv+0x38>)
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	b2db      	uxtb	r3, r3
    1fac:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    1fb0:	b2da      	uxtb	r2, r3
    1fb2:	79fb      	ldrb	r3, [r7, #7]
    1fb4:	00db      	lsls	r3, r3, #3
    1fb6:	b2db      	uxtb	r3, r3
    1fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    1fbc:	b2db      	uxtb	r3, r3
    1fbe:	4905      	ldr	r1, [pc, #20]	; (1fd4 <CLOCK_CONFIG_SetFllExtRefDiv+0x38>)
    1fc0:	4313      	orrs	r3, r2
    1fc2:	b2db      	uxtb	r3, r3
    1fc4:	700b      	strb	r3, [r1, #0]
}
    1fc6:	bf00      	nop
    1fc8:	370c      	adds	r7, #12
    1fca:	46bd      	mov	sp, r7
    1fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
    1fd4:	40064000 	.word	0x40064000

00001fd8 <BOARD_BootClockRUN>:

/*******************************************************************************
 * Code for BOARD_BootClockRUN configuration
 ******************************************************************************/
void BOARD_BootClockRUN(void)
{
    1fd8:	b580      	push	{r7, lr}
    1fda:	af00      	add	r7, sp, #0
    /* Set HSRUN power mode */
    SMC_SetPowerModeProtection(SMC, kSMC_AllowPowerModeAll);
    1fdc:	21aa      	movs	r1, #170	; 0xaa
    1fde:	4814      	ldr	r0, [pc, #80]	; (2030 <BOARD_BootClockRUN+0x58>)
    1fe0:	f001 f99b 	bl	331a <SMC_SetPowerModeProtection>
    SMC_SetPowerModeHsrun(SMC);
    1fe4:	4812      	ldr	r0, [pc, #72]	; (2030 <BOARD_BootClockRUN+0x58>)
    1fe6:	f001 f97d 	bl	32e4 <SMC_SetPowerModeHsrun>
    while (SMC_GetPowerModeState(SMC) != kSMC_PowerStateHsrun)
    1fea:	bf00      	nop
    1fec:	4810      	ldr	r0, [pc, #64]	; (2030 <BOARD_BootClockRUN+0x58>)
    1fee:	f001 f9a3 	bl	3338 <SMC_GetPowerModeState>
    1ff2:	4603      	mov	r3, r0
    1ff4:	2b80      	cmp	r3, #128	; 0x80
    1ff6:	d1f9      	bne.n	1fec <BOARD_BootClockRUN+0x14>
    {
    }
    /* Set the system clock dividers in SIM to safe value. */
    CLOCK_SetSimSafeDivs();
    1ff8:	f7ff ffae 	bl	1f58 <CLOCK_SetSimSafeDivs>
    /* Initializes OSC0 according to board configuration. */
    CLOCK_InitOsc0(&oscConfig_BOARD_BootClockRUN);
    1ffc:	480d      	ldr	r0, [pc, #52]	; (2034 <BOARD_BootClockRUN+0x5c>)
    1ffe:	f7ff feb1 	bl	1d64 <CLOCK_InitOsc0>
    CLOCK_SetXtal0Freq(oscConfig_BOARD_BootClockRUN.freq);
    2002:	4b0d      	ldr	r3, [pc, #52]	; (2038 <BOARD_BootClockRUN+0x60>)
    2004:	4618      	mov	r0, r3
    2006:	f7ff ffb9 	bl	1f7c <CLOCK_SetXtal0Freq>
    /* Configure FLL external reference divider (FRDIV). */
    CLOCK_CONFIG_SetFllExtRefDiv(mcgConfig_BOARD_BootClockRUN.frdiv);
    200a:	2300      	movs	r3, #0
    200c:	4618      	mov	r0, r3
    200e:	f7ff ffc5 	bl	1f9c <CLOCK_CONFIG_SetFllExtRefDiv>
    /* Set MCG to PEE mode. */
    CLOCK_BootToPeeMode(mcgConfig_BOARD_BootClockRUN.oscsel,
    2012:	2300      	movs	r3, #0
    2014:	4a09      	ldr	r2, [pc, #36]	; (203c <BOARD_BootClockRUN+0x64>)
    2016:	2100      	movs	r1, #0
    2018:	4618      	mov	r0, r3
    201a:	f7ff ff45 	bl	1ea8 <CLOCK_BootToPeeMode>
                        kMCG_PllClkSelPll0,
                        &mcgConfig_BOARD_BootClockRUN.pll0Config);
    /* Set the clock configuration in SIM module. */
    CLOCK_SetSimConfig(&simConfig_BOARD_BootClockRUN);
    201e:	4808      	ldr	r0, [pc, #32]	; (2040 <BOARD_BootClockRUN+0x68>)
    2020:	f7ff fe04 	bl	1c2c <CLOCK_SetSimConfig>
    /* Set SystemCoreClock variable. */
    SystemCoreClock = BOARD_BOOTCLOCKRUN_CORE_CLOCK;
    2024:	4b07      	ldr	r3, [pc, #28]	; (2044 <BOARD_BootClockRUN+0x6c>)
    2026:	4a08      	ldr	r2, [pc, #32]	; (2048 <BOARD_BootClockRUN+0x70>)
    2028:	601a      	str	r2, [r3, #0]
}
    202a:	bf00      	nop
    202c:	bd80      	pop	{r7, pc}
    202e:	bf00      	nop
    2030:	4007e000 	.word	0x4007e000
    2034:	000038ec 	.word	0x000038ec
    2038:	007a1200 	.word	0x007a1200
    203c:	000038e0 	.word	0x000038e0
    2040:	000038e4 	.word	0x000038e4
    2044:	20000000 	.word	0x20000000
    2048:	07270e00 	.word	0x07270e00

0000204c <__assert_func>:
    204c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    204e:	461c      	mov	r4, r3
    2050:	4b09      	ldr	r3, [pc, #36]	; (2078 <__assert_func+0x2c>)
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	4605      	mov	r5, r0
    2056:	68d8      	ldr	r0, [r3, #12]
    2058:	b152      	cbz	r2, 2070 <__assert_func+0x24>
    205a:	4b08      	ldr	r3, [pc, #32]	; (207c <__assert_func+0x30>)
    205c:	9100      	str	r1, [sp, #0]
    205e:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2062:	4907      	ldr	r1, [pc, #28]	; (2080 <__assert_func+0x34>)
    2064:	462b      	mov	r3, r5
    2066:	4622      	mov	r2, r4
    2068:	f000 f80e 	bl	2088 <fiprintf>
    206c:	f001 fa76 	bl	355c <abort>
    2070:	4b04      	ldr	r3, [pc, #16]	; (2084 <__assert_func+0x38>)
    2072:	461a      	mov	r2, r3
    2074:	e7f2      	b.n	205c <__assert_func+0x10>
    2076:	bf00      	nop
    2078:	20000004 	.word	0x20000004
    207c:	00003958 	.word	0x00003958
    2080:	00003965 	.word	0x00003965
    2084:	00003993 	.word	0x00003993

00002088 <fiprintf>:
    2088:	b40e      	push	{r1, r2, r3}
    208a:	b503      	push	{r0, r1, lr}
    208c:	4601      	mov	r1, r0
    208e:	ab03      	add	r3, sp, #12
    2090:	4805      	ldr	r0, [pc, #20]	; (20a8 <fiprintf+0x20>)
    2092:	f853 2b04 	ldr.w	r2, [r3], #4
    2096:	6800      	ldr	r0, [r0, #0]
    2098:	9301      	str	r3, [sp, #4]
    209a:	f000 f8af 	bl	21fc <_vfiprintf_r>
    209e:	b002      	add	sp, #8
    20a0:	f85d eb04 	ldr.w	lr, [sp], #4
    20a4:	b003      	add	sp, #12
    20a6:	4770      	bx	lr
    20a8:	20000004 	.word	0x20000004

000020ac <_free_r>:
    20ac:	b538      	push	{r3, r4, r5, lr}
    20ae:	4605      	mov	r5, r0
    20b0:	2900      	cmp	r1, #0
    20b2:	d045      	beq.n	2140 <_free_r+0x94>
    20b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    20b8:	1f0c      	subs	r4, r1, #4
    20ba:	2b00      	cmp	r3, #0
    20bc:	bfb8      	it	lt
    20be:	18e4      	addlt	r4, r4, r3
    20c0:	f000 fd6a 	bl	2b98 <__malloc_lock>
    20c4:	4a1f      	ldr	r2, [pc, #124]	; (2144 <_free_r+0x98>)
    20c6:	6813      	ldr	r3, [r2, #0]
    20c8:	4610      	mov	r0, r2
    20ca:	b933      	cbnz	r3, 20da <_free_r+0x2e>
    20cc:	6063      	str	r3, [r4, #4]
    20ce:	6014      	str	r4, [r2, #0]
    20d0:	4628      	mov	r0, r5
    20d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    20d6:	f000 bd65 	b.w	2ba4 <__malloc_unlock>
    20da:	42a3      	cmp	r3, r4
    20dc:	d90c      	bls.n	20f8 <_free_r+0x4c>
    20de:	6821      	ldr	r1, [r4, #0]
    20e0:	1862      	adds	r2, r4, r1
    20e2:	4293      	cmp	r3, r2
    20e4:	bf04      	itt	eq
    20e6:	681a      	ldreq	r2, [r3, #0]
    20e8:	685b      	ldreq	r3, [r3, #4]
    20ea:	6063      	str	r3, [r4, #4]
    20ec:	bf04      	itt	eq
    20ee:	1852      	addeq	r2, r2, r1
    20f0:	6022      	streq	r2, [r4, #0]
    20f2:	6004      	str	r4, [r0, #0]
    20f4:	e7ec      	b.n	20d0 <_free_r+0x24>
    20f6:	4613      	mov	r3, r2
    20f8:	685a      	ldr	r2, [r3, #4]
    20fa:	b10a      	cbz	r2, 2100 <_free_r+0x54>
    20fc:	42a2      	cmp	r2, r4
    20fe:	d9fa      	bls.n	20f6 <_free_r+0x4a>
    2100:	6819      	ldr	r1, [r3, #0]
    2102:	1858      	adds	r0, r3, r1
    2104:	42a0      	cmp	r0, r4
    2106:	d10b      	bne.n	2120 <_free_r+0x74>
    2108:	6820      	ldr	r0, [r4, #0]
    210a:	4401      	add	r1, r0
    210c:	1858      	adds	r0, r3, r1
    210e:	4282      	cmp	r2, r0
    2110:	6019      	str	r1, [r3, #0]
    2112:	d1dd      	bne.n	20d0 <_free_r+0x24>
    2114:	6810      	ldr	r0, [r2, #0]
    2116:	6852      	ldr	r2, [r2, #4]
    2118:	605a      	str	r2, [r3, #4]
    211a:	4401      	add	r1, r0
    211c:	6019      	str	r1, [r3, #0]
    211e:	e7d7      	b.n	20d0 <_free_r+0x24>
    2120:	d902      	bls.n	2128 <_free_r+0x7c>
    2122:	230c      	movs	r3, #12
    2124:	602b      	str	r3, [r5, #0]
    2126:	e7d3      	b.n	20d0 <_free_r+0x24>
    2128:	6820      	ldr	r0, [r4, #0]
    212a:	1821      	adds	r1, r4, r0
    212c:	428a      	cmp	r2, r1
    212e:	bf04      	itt	eq
    2130:	6811      	ldreq	r1, [r2, #0]
    2132:	6852      	ldreq	r2, [r2, #4]
    2134:	6062      	str	r2, [r4, #4]
    2136:	bf04      	itt	eq
    2138:	1809      	addeq	r1, r1, r0
    213a:	6021      	streq	r1, [r4, #0]
    213c:	605c      	str	r4, [r3, #4]
    213e:	e7c7      	b.n	20d0 <_free_r+0x24>
    2140:	bd38      	pop	{r3, r4, r5, pc}
    2142:	bf00      	nop
    2144:	2000091c 	.word	0x2000091c

00002148 <_malloc_r>:
    2148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    214a:	1ccd      	adds	r5, r1, #3
    214c:	f025 0503 	bic.w	r5, r5, #3
    2150:	3508      	adds	r5, #8
    2152:	2d0c      	cmp	r5, #12
    2154:	bf38      	it	cc
    2156:	250c      	movcc	r5, #12
    2158:	2d00      	cmp	r5, #0
    215a:	4606      	mov	r6, r0
    215c:	db01      	blt.n	2162 <_malloc_r+0x1a>
    215e:	42a9      	cmp	r1, r5
    2160:	d903      	bls.n	216a <_malloc_r+0x22>
    2162:	230c      	movs	r3, #12
    2164:	6033      	str	r3, [r6, #0]
    2166:	2000      	movs	r0, #0
    2168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    216a:	f000 fd15 	bl	2b98 <__malloc_lock>
    216e:	4921      	ldr	r1, [pc, #132]	; (21f4 <_malloc_r+0xac>)
    2170:	680a      	ldr	r2, [r1, #0]
    2172:	4614      	mov	r4, r2
    2174:	b99c      	cbnz	r4, 219e <_malloc_r+0x56>
    2176:	4f20      	ldr	r7, [pc, #128]	; (21f8 <_malloc_r+0xb0>)
    2178:	683b      	ldr	r3, [r7, #0]
    217a:	b923      	cbnz	r3, 2186 <_malloc_r+0x3e>
    217c:	4621      	mov	r1, r4
    217e:	4630      	mov	r0, r6
    2180:	f000 fa78 	bl	2674 <_sbrk_r>
    2184:	6038      	str	r0, [r7, #0]
    2186:	4629      	mov	r1, r5
    2188:	4630      	mov	r0, r6
    218a:	f000 fa73 	bl	2674 <_sbrk_r>
    218e:	1c43      	adds	r3, r0, #1
    2190:	d123      	bne.n	21da <_malloc_r+0x92>
    2192:	230c      	movs	r3, #12
    2194:	6033      	str	r3, [r6, #0]
    2196:	4630      	mov	r0, r6
    2198:	f000 fd04 	bl	2ba4 <__malloc_unlock>
    219c:	e7e3      	b.n	2166 <_malloc_r+0x1e>
    219e:	6823      	ldr	r3, [r4, #0]
    21a0:	1b5b      	subs	r3, r3, r5
    21a2:	d417      	bmi.n	21d4 <_malloc_r+0x8c>
    21a4:	2b0b      	cmp	r3, #11
    21a6:	d903      	bls.n	21b0 <_malloc_r+0x68>
    21a8:	6023      	str	r3, [r4, #0]
    21aa:	441c      	add	r4, r3
    21ac:	6025      	str	r5, [r4, #0]
    21ae:	e004      	b.n	21ba <_malloc_r+0x72>
    21b0:	6863      	ldr	r3, [r4, #4]
    21b2:	42a2      	cmp	r2, r4
    21b4:	bf0c      	ite	eq
    21b6:	600b      	streq	r3, [r1, #0]
    21b8:	6053      	strne	r3, [r2, #4]
    21ba:	4630      	mov	r0, r6
    21bc:	f000 fcf2 	bl	2ba4 <__malloc_unlock>
    21c0:	f104 000b 	add.w	r0, r4, #11
    21c4:	1d23      	adds	r3, r4, #4
    21c6:	f020 0007 	bic.w	r0, r0, #7
    21ca:	1ac2      	subs	r2, r0, r3
    21cc:	d0cc      	beq.n	2168 <_malloc_r+0x20>
    21ce:	1a1b      	subs	r3, r3, r0
    21d0:	50a3      	str	r3, [r4, r2]
    21d2:	e7c9      	b.n	2168 <_malloc_r+0x20>
    21d4:	4622      	mov	r2, r4
    21d6:	6864      	ldr	r4, [r4, #4]
    21d8:	e7cc      	b.n	2174 <_malloc_r+0x2c>
    21da:	1cc4      	adds	r4, r0, #3
    21dc:	f024 0403 	bic.w	r4, r4, #3
    21e0:	42a0      	cmp	r0, r4
    21e2:	d0e3      	beq.n	21ac <_malloc_r+0x64>
    21e4:	1a21      	subs	r1, r4, r0
    21e6:	4630      	mov	r0, r6
    21e8:	f000 fa44 	bl	2674 <_sbrk_r>
    21ec:	3001      	adds	r0, #1
    21ee:	d1dd      	bne.n	21ac <_malloc_r+0x64>
    21f0:	e7cf      	b.n	2192 <_malloc_r+0x4a>
    21f2:	bf00      	nop
    21f4:	2000091c 	.word	0x2000091c
    21f8:	20000920 	.word	0x20000920

000021fc <_vfiprintf_r>:
    21fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2200:	460d      	mov	r5, r1
    2202:	b09d      	sub	sp, #116	; 0x74
    2204:	4614      	mov	r4, r2
    2206:	461e      	mov	r6, r3
    2208:	4607      	mov	r7, r0
    220a:	b118      	cbz	r0, 2214 <_vfiprintf_r+0x18>
    220c:	6983      	ldr	r3, [r0, #24]
    220e:	b90b      	cbnz	r3, 2214 <_vfiprintf_r+0x18>
    2210:	f000 fc04 	bl	2a1c <__sinit>
    2214:	4b85      	ldr	r3, [pc, #532]	; (242c <_vfiprintf_r+0x230>)
    2216:	429d      	cmp	r5, r3
    2218:	d11b      	bne.n	2252 <_vfiprintf_r+0x56>
    221a:	687d      	ldr	r5, [r7, #4]
    221c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    221e:	07d9      	lsls	r1, r3, #31
    2220:	d405      	bmi.n	222e <_vfiprintf_r+0x32>
    2222:	89ab      	ldrh	r3, [r5, #12]
    2224:	059a      	lsls	r2, r3, #22
    2226:	d402      	bmi.n	222e <_vfiprintf_r+0x32>
    2228:	6da8      	ldr	r0, [r5, #88]	; 0x58
    222a:	f001 f9d3 	bl	35d4 <__retarget_lock_acquire_recursive>
    222e:	89ab      	ldrh	r3, [r5, #12]
    2230:	071b      	lsls	r3, r3, #28
    2232:	d501      	bpl.n	2238 <_vfiprintf_r+0x3c>
    2234:	692b      	ldr	r3, [r5, #16]
    2236:	b9eb      	cbnz	r3, 2274 <_vfiprintf_r+0x78>
    2238:	4629      	mov	r1, r5
    223a:	4638      	mov	r0, r7
    223c:	f000 fa7c 	bl	2738 <__swsetup_r>
    2240:	b1c0      	cbz	r0, 2274 <_vfiprintf_r+0x78>
    2242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    2244:	07d8      	lsls	r0, r3, #31
    2246:	d50e      	bpl.n	2266 <_vfiprintf_r+0x6a>
    2248:	f04f 30ff 	mov.w	r0, #4294967295
    224c:	b01d      	add	sp, #116	; 0x74
    224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2252:	4b77      	ldr	r3, [pc, #476]	; (2430 <_vfiprintf_r+0x234>)
    2254:	429d      	cmp	r5, r3
    2256:	d101      	bne.n	225c <_vfiprintf_r+0x60>
    2258:	68bd      	ldr	r5, [r7, #8]
    225a:	e7df      	b.n	221c <_vfiprintf_r+0x20>
    225c:	4b75      	ldr	r3, [pc, #468]	; (2434 <_vfiprintf_r+0x238>)
    225e:	429d      	cmp	r5, r3
    2260:	bf08      	it	eq
    2262:	68fd      	ldreq	r5, [r7, #12]
    2264:	e7da      	b.n	221c <_vfiprintf_r+0x20>
    2266:	89ab      	ldrh	r3, [r5, #12]
    2268:	0599      	lsls	r1, r3, #22
    226a:	d4ed      	bmi.n	2248 <_vfiprintf_r+0x4c>
    226c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    226e:	f001 f9b2 	bl	35d6 <__retarget_lock_release_recursive>
    2272:	e7e9      	b.n	2248 <_vfiprintf_r+0x4c>
    2274:	2300      	movs	r3, #0
    2276:	9309      	str	r3, [sp, #36]	; 0x24
    2278:	2320      	movs	r3, #32
    227a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    227e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 2438 <_vfiprintf_r+0x23c>
    2282:	9603      	str	r6, [sp, #12]
    2284:	2330      	movs	r3, #48	; 0x30
    2286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    228a:	f04f 0a01 	mov.w	sl, #1
    228e:	4623      	mov	r3, r4
    2290:	461e      	mov	r6, r3
    2292:	f813 2b01 	ldrb.w	r2, [r3], #1
    2296:	b10a      	cbz	r2, 229c <_vfiprintf_r+0xa0>
    2298:	2a25      	cmp	r2, #37	; 0x25
    229a:	d1f9      	bne.n	2290 <_vfiprintf_r+0x94>
    229c:	ebb6 0b04 	subs.w	fp, r6, r4
    22a0:	d00b      	beq.n	22ba <_vfiprintf_r+0xbe>
    22a2:	465b      	mov	r3, fp
    22a4:	4622      	mov	r2, r4
    22a6:	4629      	mov	r1, r5
    22a8:	4638      	mov	r0, r7
    22aa:	f001 f889 	bl	33c0 <__sfputs_r>
    22ae:	3001      	adds	r0, #1
    22b0:	f000 80a3 	beq.w	23fa <_vfiprintf_r+0x1fe>
    22b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22b6:	445b      	add	r3, fp
    22b8:	9309      	str	r3, [sp, #36]	; 0x24
    22ba:	7833      	ldrb	r3, [r6, #0]
    22bc:	2b00      	cmp	r3, #0
    22be:	f000 809c 	beq.w	23fa <_vfiprintf_r+0x1fe>
    22c2:	2300      	movs	r3, #0
    22c4:	f04f 32ff 	mov.w	r2, #4294967295
    22c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    22cc:	3601      	adds	r6, #1
    22ce:	9304      	str	r3, [sp, #16]
    22d0:	9307      	str	r3, [sp, #28]
    22d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    22d6:	931a      	str	r3, [sp, #104]	; 0x68
    22d8:	4634      	mov	r4, r6
    22da:	2205      	movs	r2, #5
    22dc:	f814 1b01 	ldrb.w	r1, [r4], #1
    22e0:	4855      	ldr	r0, [pc, #340]	; (2438 <_vfiprintf_r+0x23c>)
    22e2:	f7fe f895 	bl	410 <memchr>
    22e6:	9b04      	ldr	r3, [sp, #16]
    22e8:	b9c0      	cbnz	r0, 231c <_vfiprintf_r+0x120>
    22ea:	06da      	lsls	r2, r3, #27
    22ec:	bf44      	itt	mi
    22ee:	2220      	movmi	r2, #32
    22f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    22f4:	0718      	lsls	r0, r3, #28
    22f6:	bf44      	itt	mi
    22f8:	222b      	movmi	r2, #43	; 0x2b
    22fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    22fe:	7832      	ldrb	r2, [r6, #0]
    2300:	2a2a      	cmp	r2, #42	; 0x2a
    2302:	d013      	beq.n	232c <_vfiprintf_r+0x130>
    2304:	9a07      	ldr	r2, [sp, #28]
    2306:	4634      	mov	r4, r6
    2308:	2000      	movs	r0, #0
    230a:	260a      	movs	r6, #10
    230c:	4621      	mov	r1, r4
    230e:	f811 3b01 	ldrb.w	r3, [r1], #1
    2312:	3b30      	subs	r3, #48	; 0x30
    2314:	2b09      	cmp	r3, #9
    2316:	d94b      	bls.n	23b0 <_vfiprintf_r+0x1b4>
    2318:	b970      	cbnz	r0, 2338 <_vfiprintf_r+0x13c>
    231a:	e014      	b.n	2346 <_vfiprintf_r+0x14a>
    231c:	eba0 0009 	sub.w	r0, r0, r9
    2320:	fa0a f000 	lsl.w	r0, sl, r0
    2324:	4318      	orrs	r0, r3
    2326:	9004      	str	r0, [sp, #16]
    2328:	4626      	mov	r6, r4
    232a:	e7d5      	b.n	22d8 <_vfiprintf_r+0xdc>
    232c:	9a03      	ldr	r2, [sp, #12]
    232e:	1d11      	adds	r1, r2, #4
    2330:	6812      	ldr	r2, [r2, #0]
    2332:	9103      	str	r1, [sp, #12]
    2334:	2a00      	cmp	r2, #0
    2336:	db01      	blt.n	233c <_vfiprintf_r+0x140>
    2338:	9207      	str	r2, [sp, #28]
    233a:	e004      	b.n	2346 <_vfiprintf_r+0x14a>
    233c:	4252      	negs	r2, r2
    233e:	f043 0302 	orr.w	r3, r3, #2
    2342:	9207      	str	r2, [sp, #28]
    2344:	9304      	str	r3, [sp, #16]
    2346:	7823      	ldrb	r3, [r4, #0]
    2348:	2b2e      	cmp	r3, #46	; 0x2e
    234a:	d10c      	bne.n	2366 <_vfiprintf_r+0x16a>
    234c:	7863      	ldrb	r3, [r4, #1]
    234e:	2b2a      	cmp	r3, #42	; 0x2a
    2350:	d133      	bne.n	23ba <_vfiprintf_r+0x1be>
    2352:	9b03      	ldr	r3, [sp, #12]
    2354:	1d1a      	adds	r2, r3, #4
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	9203      	str	r2, [sp, #12]
    235a:	2b00      	cmp	r3, #0
    235c:	bfb8      	it	lt
    235e:	f04f 33ff 	movlt.w	r3, #4294967295
    2362:	3402      	adds	r4, #2
    2364:	9305      	str	r3, [sp, #20]
    2366:	4e35      	ldr	r6, [pc, #212]	; (243c <_vfiprintf_r+0x240>)
    2368:	7821      	ldrb	r1, [r4, #0]
    236a:	2203      	movs	r2, #3
    236c:	4630      	mov	r0, r6
    236e:	f7fe f84f 	bl	410 <memchr>
    2372:	b138      	cbz	r0, 2384 <_vfiprintf_r+0x188>
    2374:	2340      	movs	r3, #64	; 0x40
    2376:	1b80      	subs	r0, r0, r6
    2378:	fa03 f000 	lsl.w	r0, r3, r0
    237c:	9b04      	ldr	r3, [sp, #16]
    237e:	4303      	orrs	r3, r0
    2380:	3401      	adds	r4, #1
    2382:	9304      	str	r3, [sp, #16]
    2384:	f814 1b01 	ldrb.w	r1, [r4], #1
    2388:	482d      	ldr	r0, [pc, #180]	; (2440 <_vfiprintf_r+0x244>)
    238a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    238e:	2206      	movs	r2, #6
    2390:	f7fe f83e 	bl	410 <memchr>
    2394:	2800      	cmp	r0, #0
    2396:	d03f      	beq.n	2418 <_vfiprintf_r+0x21c>
    2398:	4b2a      	ldr	r3, [pc, #168]	; (2444 <_vfiprintf_r+0x248>)
    239a:	bb13      	cbnz	r3, 23e2 <_vfiprintf_r+0x1e6>
    239c:	9b03      	ldr	r3, [sp, #12]
    239e:	3307      	adds	r3, #7
    23a0:	f023 0307 	bic.w	r3, r3, #7
    23a4:	3308      	adds	r3, #8
    23a6:	9303      	str	r3, [sp, #12]
    23a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    23aa:	4443      	add	r3, r8
    23ac:	9309      	str	r3, [sp, #36]	; 0x24
    23ae:	e76e      	b.n	228e <_vfiprintf_r+0x92>
    23b0:	fb06 3202 	mla	r2, r6, r2, r3
    23b4:	2001      	movs	r0, #1
    23b6:	460c      	mov	r4, r1
    23b8:	e7a8      	b.n	230c <_vfiprintf_r+0x110>
    23ba:	2300      	movs	r3, #0
    23bc:	3401      	adds	r4, #1
    23be:	9305      	str	r3, [sp, #20]
    23c0:	4619      	mov	r1, r3
    23c2:	260a      	movs	r6, #10
    23c4:	4620      	mov	r0, r4
    23c6:	f810 2b01 	ldrb.w	r2, [r0], #1
    23ca:	3a30      	subs	r2, #48	; 0x30
    23cc:	2a09      	cmp	r2, #9
    23ce:	d903      	bls.n	23d8 <_vfiprintf_r+0x1dc>
    23d0:	2b00      	cmp	r3, #0
    23d2:	d0c8      	beq.n	2366 <_vfiprintf_r+0x16a>
    23d4:	9105      	str	r1, [sp, #20]
    23d6:	e7c6      	b.n	2366 <_vfiprintf_r+0x16a>
    23d8:	fb06 2101 	mla	r1, r6, r1, r2
    23dc:	2301      	movs	r3, #1
    23de:	4604      	mov	r4, r0
    23e0:	e7f0      	b.n	23c4 <_vfiprintf_r+0x1c8>
    23e2:	ab03      	add	r3, sp, #12
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	462a      	mov	r2, r5
    23e8:	4b17      	ldr	r3, [pc, #92]	; (2448 <_vfiprintf_r+0x24c>)
    23ea:	a904      	add	r1, sp, #16
    23ec:	4638      	mov	r0, r7
    23ee:	f3af 8000 	nop.w
    23f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    23f6:	4680      	mov	r8, r0
    23f8:	d1d6      	bne.n	23a8 <_vfiprintf_r+0x1ac>
    23fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    23fc:	07d9      	lsls	r1, r3, #31
    23fe:	d405      	bmi.n	240c <_vfiprintf_r+0x210>
    2400:	89ab      	ldrh	r3, [r5, #12]
    2402:	059a      	lsls	r2, r3, #22
    2404:	d402      	bmi.n	240c <_vfiprintf_r+0x210>
    2406:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2408:	f001 f8e5 	bl	35d6 <__retarget_lock_release_recursive>
    240c:	89ab      	ldrh	r3, [r5, #12]
    240e:	065b      	lsls	r3, r3, #25
    2410:	f53f af1a 	bmi.w	2248 <_vfiprintf_r+0x4c>
    2414:	9809      	ldr	r0, [sp, #36]	; 0x24
    2416:	e719      	b.n	224c <_vfiprintf_r+0x50>
    2418:	ab03      	add	r3, sp, #12
    241a:	9300      	str	r3, [sp, #0]
    241c:	462a      	mov	r2, r5
    241e:	4b0a      	ldr	r3, [pc, #40]	; (2448 <_vfiprintf_r+0x24c>)
    2420:	a904      	add	r1, sp, #16
    2422:	4638      	mov	r0, r7
    2424:	f000 f812 	bl	244c <_printf_i>
    2428:	e7e3      	b.n	23f2 <_vfiprintf_r+0x1f6>
    242a:	bf00      	nop
    242c:	00003918 	.word	0x00003918
    2430:	00003938 	.word	0x00003938
    2434:	000038f8 	.word	0x000038f8
    2438:	00003994 	.word	0x00003994
    243c:	0000399a 	.word	0x0000399a
    2440:	0000399e 	.word	0x0000399e
    2444:	00000000 	.word	0x00000000
    2448:	000033c1 	.word	0x000033c1

0000244c <_printf_i>:
    244c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2450:	4606      	mov	r6, r0
    2452:	460c      	mov	r4, r1
    2454:	f101 0043 	add.w	r0, r1, #67	; 0x43
    2458:	7e09      	ldrb	r1, [r1, #24]
    245a:	b085      	sub	sp, #20
    245c:	296e      	cmp	r1, #110	; 0x6e
    245e:	4698      	mov	r8, r3
    2460:	4617      	mov	r7, r2
    2462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2464:	f000 80ba 	beq.w	25dc <_printf_i+0x190>
    2468:	d824      	bhi.n	24b4 <_printf_i+0x68>
    246a:	2963      	cmp	r1, #99	; 0x63
    246c:	d039      	beq.n	24e2 <_printf_i+0x96>
    246e:	d80a      	bhi.n	2486 <_printf_i+0x3a>
    2470:	2900      	cmp	r1, #0
    2472:	f000 80c3 	beq.w	25fc <_printf_i+0x1b0>
    2476:	2958      	cmp	r1, #88	; 0x58
    2478:	f000 8091 	beq.w	259e <_printf_i+0x152>
    247c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2480:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2484:	e035      	b.n	24f2 <_printf_i+0xa6>
    2486:	2964      	cmp	r1, #100	; 0x64
    2488:	d001      	beq.n	248e <_printf_i+0x42>
    248a:	2969      	cmp	r1, #105	; 0x69
    248c:	d1f6      	bne.n	247c <_printf_i+0x30>
    248e:	6825      	ldr	r5, [r4, #0]
    2490:	681a      	ldr	r2, [r3, #0]
    2492:	f015 0f80 	tst.w	r5, #128	; 0x80
    2496:	f102 0104 	add.w	r1, r2, #4
    249a:	d02c      	beq.n	24f6 <_printf_i+0xaa>
    249c:	6812      	ldr	r2, [r2, #0]
    249e:	6019      	str	r1, [r3, #0]
    24a0:	2a00      	cmp	r2, #0
    24a2:	da03      	bge.n	24ac <_printf_i+0x60>
    24a4:	232d      	movs	r3, #45	; 0x2d
    24a6:	4252      	negs	r2, r2
    24a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    24ac:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 266c <_printf_i+0x220>
    24b0:	230a      	movs	r3, #10
    24b2:	e03f      	b.n	2534 <_printf_i+0xe8>
    24b4:	2973      	cmp	r1, #115	; 0x73
    24b6:	f000 80a5 	beq.w	2604 <_printf_i+0x1b8>
    24ba:	d808      	bhi.n	24ce <_printf_i+0x82>
    24bc:	296f      	cmp	r1, #111	; 0x6f
    24be:	d021      	beq.n	2504 <_printf_i+0xb8>
    24c0:	2970      	cmp	r1, #112	; 0x70
    24c2:	d1db      	bne.n	247c <_printf_i+0x30>
    24c4:	6822      	ldr	r2, [r4, #0]
    24c6:	f042 0220 	orr.w	r2, r2, #32
    24ca:	6022      	str	r2, [r4, #0]
    24cc:	e003      	b.n	24d6 <_printf_i+0x8a>
    24ce:	2975      	cmp	r1, #117	; 0x75
    24d0:	d018      	beq.n	2504 <_printf_i+0xb8>
    24d2:	2978      	cmp	r1, #120	; 0x78
    24d4:	d1d2      	bne.n	247c <_printf_i+0x30>
    24d6:	2278      	movs	r2, #120	; 0x78
    24d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    24dc:	f8df c190 	ldr.w	ip, [pc, #400]	; 2670 <_printf_i+0x224>
    24e0:	e061      	b.n	25a6 <_printf_i+0x15a>
    24e2:	681a      	ldr	r2, [r3, #0]
    24e4:	1d11      	adds	r1, r2, #4
    24e6:	6019      	str	r1, [r3, #0]
    24e8:	6813      	ldr	r3, [r2, #0]
    24ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    24ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
    24f2:	2301      	movs	r3, #1
    24f4:	e093      	b.n	261e <_printf_i+0x1d2>
    24f6:	6812      	ldr	r2, [r2, #0]
    24f8:	6019      	str	r1, [r3, #0]
    24fa:	f015 0f40 	tst.w	r5, #64	; 0x40
    24fe:	bf18      	it	ne
    2500:	b212      	sxthne	r2, r2
    2502:	e7cd      	b.n	24a0 <_printf_i+0x54>
    2504:	f8d4 c000 	ldr.w	ip, [r4]
    2508:	681a      	ldr	r2, [r3, #0]
    250a:	f01c 0f80 	tst.w	ip, #128	; 0x80
    250e:	f102 0504 	add.w	r5, r2, #4
    2512:	601d      	str	r5, [r3, #0]
    2514:	d001      	beq.n	251a <_printf_i+0xce>
    2516:	6812      	ldr	r2, [r2, #0]
    2518:	e003      	b.n	2522 <_printf_i+0xd6>
    251a:	f01c 0f40 	tst.w	ip, #64	; 0x40
    251e:	d0fa      	beq.n	2516 <_printf_i+0xca>
    2520:	8812      	ldrh	r2, [r2, #0]
    2522:	f8df c148 	ldr.w	ip, [pc, #328]	; 266c <_printf_i+0x220>
    2526:	296f      	cmp	r1, #111	; 0x6f
    2528:	bf0c      	ite	eq
    252a:	2308      	moveq	r3, #8
    252c:	230a      	movne	r3, #10
    252e:	2100      	movs	r1, #0
    2530:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    2534:	6865      	ldr	r5, [r4, #4]
    2536:	60a5      	str	r5, [r4, #8]
    2538:	2d00      	cmp	r5, #0
    253a:	bfa2      	ittt	ge
    253c:	6821      	ldrge	r1, [r4, #0]
    253e:	f021 0104 	bicge.w	r1, r1, #4
    2542:	6021      	strge	r1, [r4, #0]
    2544:	b90a      	cbnz	r2, 254a <_printf_i+0xfe>
    2546:	2d00      	cmp	r5, #0
    2548:	d046      	beq.n	25d8 <_printf_i+0x18c>
    254a:	4605      	mov	r5, r0
    254c:	fbb2 f1f3 	udiv	r1, r2, r3
    2550:	fb03 2e11 	mls	lr, r3, r1, r2
    2554:	4293      	cmp	r3, r2
    2556:	f81c e00e 	ldrb.w	lr, [ip, lr]
    255a:	f805 ed01 	strb.w	lr, [r5, #-1]!
    255e:	d939      	bls.n	25d4 <_printf_i+0x188>
    2560:	2b08      	cmp	r3, #8
    2562:	d10b      	bne.n	257c <_printf_i+0x130>
    2564:	6823      	ldr	r3, [r4, #0]
    2566:	07da      	lsls	r2, r3, #31
    2568:	d508      	bpl.n	257c <_printf_i+0x130>
    256a:	6923      	ldr	r3, [r4, #16]
    256c:	6862      	ldr	r2, [r4, #4]
    256e:	429a      	cmp	r2, r3
    2570:	bfde      	ittt	le
    2572:	2330      	movle	r3, #48	; 0x30
    2574:	f805 3c01 	strble.w	r3, [r5, #-1]
    2578:	f105 35ff 	addle.w	r5, r5, #4294967295
    257c:	1b40      	subs	r0, r0, r5
    257e:	6120      	str	r0, [r4, #16]
    2580:	f8cd 8000 	str.w	r8, [sp]
    2584:	463b      	mov	r3, r7
    2586:	aa03      	add	r2, sp, #12
    2588:	4621      	mov	r1, r4
    258a:	4630      	mov	r0, r6
    258c:	f000 ff2a 	bl	33e4 <_printf_common>
    2590:	3001      	adds	r0, #1
    2592:	d149      	bne.n	2628 <_printf_i+0x1dc>
    2594:	f04f 30ff 	mov.w	r0, #4294967295
    2598:	b005      	add	sp, #20
    259a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    259e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 266c <_printf_i+0x220>
    25a2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    25a6:	681d      	ldr	r5, [r3, #0]
    25a8:	6821      	ldr	r1, [r4, #0]
    25aa:	f855 2b04 	ldr.w	r2, [r5], #4
    25ae:	601d      	str	r5, [r3, #0]
    25b0:	060d      	lsls	r5, r1, #24
    25b2:	d50b      	bpl.n	25cc <_printf_i+0x180>
    25b4:	07cd      	lsls	r5, r1, #31
    25b6:	bf44      	itt	mi
    25b8:	f041 0120 	orrmi.w	r1, r1, #32
    25bc:	6021      	strmi	r1, [r4, #0]
    25be:	b91a      	cbnz	r2, 25c8 <_printf_i+0x17c>
    25c0:	6823      	ldr	r3, [r4, #0]
    25c2:	f023 0320 	bic.w	r3, r3, #32
    25c6:	6023      	str	r3, [r4, #0]
    25c8:	2310      	movs	r3, #16
    25ca:	e7b0      	b.n	252e <_printf_i+0xe2>
    25cc:	064b      	lsls	r3, r1, #25
    25ce:	bf48      	it	mi
    25d0:	b292      	uxthmi	r2, r2
    25d2:	e7ef      	b.n	25b4 <_printf_i+0x168>
    25d4:	460a      	mov	r2, r1
    25d6:	e7b9      	b.n	254c <_printf_i+0x100>
    25d8:	4605      	mov	r5, r0
    25da:	e7c1      	b.n	2560 <_printf_i+0x114>
    25dc:	681a      	ldr	r2, [r3, #0]
    25de:	f8d4 c000 	ldr.w	ip, [r4]
    25e2:	6961      	ldr	r1, [r4, #20]
    25e4:	1d15      	adds	r5, r2, #4
    25e6:	601d      	str	r5, [r3, #0]
    25e8:	f01c 0f80 	tst.w	ip, #128	; 0x80
    25ec:	6813      	ldr	r3, [r2, #0]
    25ee:	d001      	beq.n	25f4 <_printf_i+0x1a8>
    25f0:	6019      	str	r1, [r3, #0]
    25f2:	e003      	b.n	25fc <_printf_i+0x1b0>
    25f4:	f01c 0f40 	tst.w	ip, #64	; 0x40
    25f8:	d0fa      	beq.n	25f0 <_printf_i+0x1a4>
    25fa:	8019      	strh	r1, [r3, #0]
    25fc:	2300      	movs	r3, #0
    25fe:	6123      	str	r3, [r4, #16]
    2600:	4605      	mov	r5, r0
    2602:	e7bd      	b.n	2580 <_printf_i+0x134>
    2604:	681a      	ldr	r2, [r3, #0]
    2606:	1d11      	adds	r1, r2, #4
    2608:	6019      	str	r1, [r3, #0]
    260a:	6815      	ldr	r5, [r2, #0]
    260c:	6862      	ldr	r2, [r4, #4]
    260e:	2100      	movs	r1, #0
    2610:	4628      	mov	r0, r5
    2612:	f7fd fefd 	bl	410 <memchr>
    2616:	b108      	cbz	r0, 261c <_printf_i+0x1d0>
    2618:	1b40      	subs	r0, r0, r5
    261a:	6060      	str	r0, [r4, #4]
    261c:	6863      	ldr	r3, [r4, #4]
    261e:	6123      	str	r3, [r4, #16]
    2620:	2300      	movs	r3, #0
    2622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2626:	e7ab      	b.n	2580 <_printf_i+0x134>
    2628:	6923      	ldr	r3, [r4, #16]
    262a:	462a      	mov	r2, r5
    262c:	4639      	mov	r1, r7
    262e:	4630      	mov	r0, r6
    2630:	47c0      	blx	r8
    2632:	3001      	adds	r0, #1
    2634:	d0ae      	beq.n	2594 <_printf_i+0x148>
    2636:	6823      	ldr	r3, [r4, #0]
    2638:	079b      	lsls	r3, r3, #30
    263a:	d413      	bmi.n	2664 <_printf_i+0x218>
    263c:	68e0      	ldr	r0, [r4, #12]
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	4298      	cmp	r0, r3
    2642:	bfb8      	it	lt
    2644:	4618      	movlt	r0, r3
    2646:	e7a7      	b.n	2598 <_printf_i+0x14c>
    2648:	2301      	movs	r3, #1
    264a:	464a      	mov	r2, r9
    264c:	4639      	mov	r1, r7
    264e:	4630      	mov	r0, r6
    2650:	47c0      	blx	r8
    2652:	3001      	adds	r0, #1
    2654:	d09e      	beq.n	2594 <_printf_i+0x148>
    2656:	3501      	adds	r5, #1
    2658:	68e3      	ldr	r3, [r4, #12]
    265a:	9a03      	ldr	r2, [sp, #12]
    265c:	1a9b      	subs	r3, r3, r2
    265e:	42ab      	cmp	r3, r5
    2660:	dcf2      	bgt.n	2648 <_printf_i+0x1fc>
    2662:	e7eb      	b.n	263c <_printf_i+0x1f0>
    2664:	2500      	movs	r5, #0
    2666:	f104 0919 	add.w	r9, r4, #25
    266a:	e7f5      	b.n	2658 <_printf_i+0x20c>
    266c:	000039a5 	.word	0x000039a5
    2670:	000039b6 	.word	0x000039b6

00002674 <_sbrk_r>:
    2674:	b538      	push	{r3, r4, r5, lr}
    2676:	4c06      	ldr	r4, [pc, #24]	; (2690 <_sbrk_r+0x1c>)
    2678:	2300      	movs	r3, #0
    267a:	4605      	mov	r5, r0
    267c:	4608      	mov	r0, r1
    267e:	6023      	str	r3, [r4, #0]
    2680:	f000 fb18 	bl	2cb4 <_sbrk>
    2684:	1c43      	adds	r3, r0, #1
    2686:	d102      	bne.n	268e <_sbrk_r+0x1a>
    2688:	6823      	ldr	r3, [r4, #0]
    268a:	b103      	cbz	r3, 268e <_sbrk_r+0x1a>
    268c:	602b      	str	r3, [r5, #0]
    268e:	bd38      	pop	{r3, r4, r5, pc}
    2690:	20000954 	.word	0x20000954

00002694 <__swbuf_r>:
    2694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2696:	460e      	mov	r6, r1
    2698:	4614      	mov	r4, r2
    269a:	4605      	mov	r5, r0
    269c:	b118      	cbz	r0, 26a6 <__swbuf_r+0x12>
    269e:	6983      	ldr	r3, [r0, #24]
    26a0:	b90b      	cbnz	r3, 26a6 <__swbuf_r+0x12>
    26a2:	f000 f9bb 	bl	2a1c <__sinit>
    26a6:	4b21      	ldr	r3, [pc, #132]	; (272c <__swbuf_r+0x98>)
    26a8:	429c      	cmp	r4, r3
    26aa:	d12b      	bne.n	2704 <__swbuf_r+0x70>
    26ac:	686c      	ldr	r4, [r5, #4]
    26ae:	69a3      	ldr	r3, [r4, #24]
    26b0:	60a3      	str	r3, [r4, #8]
    26b2:	89a3      	ldrh	r3, [r4, #12]
    26b4:	071a      	lsls	r2, r3, #28
    26b6:	d52f      	bpl.n	2718 <__swbuf_r+0x84>
    26b8:	6923      	ldr	r3, [r4, #16]
    26ba:	b36b      	cbz	r3, 2718 <__swbuf_r+0x84>
    26bc:	6923      	ldr	r3, [r4, #16]
    26be:	6820      	ldr	r0, [r4, #0]
    26c0:	1ac0      	subs	r0, r0, r3
    26c2:	6963      	ldr	r3, [r4, #20]
    26c4:	b2f6      	uxtb	r6, r6
    26c6:	4283      	cmp	r3, r0
    26c8:	4637      	mov	r7, r6
    26ca:	dc04      	bgt.n	26d6 <__swbuf_r+0x42>
    26cc:	4621      	mov	r1, r4
    26ce:	4628      	mov	r0, r5
    26d0:	f000 f926 	bl	2920 <_fflush_r>
    26d4:	bb30      	cbnz	r0, 2724 <__swbuf_r+0x90>
    26d6:	68a3      	ldr	r3, [r4, #8]
    26d8:	3b01      	subs	r3, #1
    26da:	60a3      	str	r3, [r4, #8]
    26dc:	6823      	ldr	r3, [r4, #0]
    26de:	1c5a      	adds	r2, r3, #1
    26e0:	6022      	str	r2, [r4, #0]
    26e2:	701e      	strb	r6, [r3, #0]
    26e4:	6963      	ldr	r3, [r4, #20]
    26e6:	3001      	adds	r0, #1
    26e8:	4283      	cmp	r3, r0
    26ea:	d004      	beq.n	26f6 <__swbuf_r+0x62>
    26ec:	89a3      	ldrh	r3, [r4, #12]
    26ee:	07db      	lsls	r3, r3, #31
    26f0:	d506      	bpl.n	2700 <__swbuf_r+0x6c>
    26f2:	2e0a      	cmp	r6, #10
    26f4:	d104      	bne.n	2700 <__swbuf_r+0x6c>
    26f6:	4621      	mov	r1, r4
    26f8:	4628      	mov	r0, r5
    26fa:	f000 f911 	bl	2920 <_fflush_r>
    26fe:	b988      	cbnz	r0, 2724 <__swbuf_r+0x90>
    2700:	4638      	mov	r0, r7
    2702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2704:	4b0a      	ldr	r3, [pc, #40]	; (2730 <__swbuf_r+0x9c>)
    2706:	429c      	cmp	r4, r3
    2708:	d101      	bne.n	270e <__swbuf_r+0x7a>
    270a:	68ac      	ldr	r4, [r5, #8]
    270c:	e7cf      	b.n	26ae <__swbuf_r+0x1a>
    270e:	4b09      	ldr	r3, [pc, #36]	; (2734 <__swbuf_r+0xa0>)
    2710:	429c      	cmp	r4, r3
    2712:	bf08      	it	eq
    2714:	68ec      	ldreq	r4, [r5, #12]
    2716:	e7ca      	b.n	26ae <__swbuf_r+0x1a>
    2718:	4621      	mov	r1, r4
    271a:	4628      	mov	r0, r5
    271c:	f000 f80c 	bl	2738 <__swsetup_r>
    2720:	2800      	cmp	r0, #0
    2722:	d0cb      	beq.n	26bc <__swbuf_r+0x28>
    2724:	f04f 37ff 	mov.w	r7, #4294967295
    2728:	e7ea      	b.n	2700 <__swbuf_r+0x6c>
    272a:	bf00      	nop
    272c:	00003918 	.word	0x00003918
    2730:	00003938 	.word	0x00003938
    2734:	000038f8 	.word	0x000038f8

00002738 <__swsetup_r>:
    2738:	4b32      	ldr	r3, [pc, #200]	; (2804 <__swsetup_r+0xcc>)
    273a:	b570      	push	{r4, r5, r6, lr}
    273c:	681d      	ldr	r5, [r3, #0]
    273e:	4606      	mov	r6, r0
    2740:	460c      	mov	r4, r1
    2742:	b125      	cbz	r5, 274e <__swsetup_r+0x16>
    2744:	69ab      	ldr	r3, [r5, #24]
    2746:	b913      	cbnz	r3, 274e <__swsetup_r+0x16>
    2748:	4628      	mov	r0, r5
    274a:	f000 f967 	bl	2a1c <__sinit>
    274e:	4b2e      	ldr	r3, [pc, #184]	; (2808 <__swsetup_r+0xd0>)
    2750:	429c      	cmp	r4, r3
    2752:	d10f      	bne.n	2774 <__swsetup_r+0x3c>
    2754:	686c      	ldr	r4, [r5, #4]
    2756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    275a:	b29a      	uxth	r2, r3
    275c:	0715      	lsls	r5, r2, #28
    275e:	d42c      	bmi.n	27ba <__swsetup_r+0x82>
    2760:	06d0      	lsls	r0, r2, #27
    2762:	d411      	bmi.n	2788 <__swsetup_r+0x50>
    2764:	2209      	movs	r2, #9
    2766:	6032      	str	r2, [r6, #0]
    2768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    276c:	81a3      	strh	r3, [r4, #12]
    276e:	f04f 30ff 	mov.w	r0, #4294967295
    2772:	e03e      	b.n	27f2 <__swsetup_r+0xba>
    2774:	4b25      	ldr	r3, [pc, #148]	; (280c <__swsetup_r+0xd4>)
    2776:	429c      	cmp	r4, r3
    2778:	d101      	bne.n	277e <__swsetup_r+0x46>
    277a:	68ac      	ldr	r4, [r5, #8]
    277c:	e7eb      	b.n	2756 <__swsetup_r+0x1e>
    277e:	4b24      	ldr	r3, [pc, #144]	; (2810 <__swsetup_r+0xd8>)
    2780:	429c      	cmp	r4, r3
    2782:	bf08      	it	eq
    2784:	68ec      	ldreq	r4, [r5, #12]
    2786:	e7e6      	b.n	2756 <__swsetup_r+0x1e>
    2788:	0751      	lsls	r1, r2, #29
    278a:	d512      	bpl.n	27b2 <__swsetup_r+0x7a>
    278c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    278e:	b141      	cbz	r1, 27a2 <__swsetup_r+0x6a>
    2790:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2794:	4299      	cmp	r1, r3
    2796:	d002      	beq.n	279e <__swsetup_r+0x66>
    2798:	4630      	mov	r0, r6
    279a:	f7ff fc87 	bl	20ac <_free_r>
    279e:	2300      	movs	r3, #0
    27a0:	6363      	str	r3, [r4, #52]	; 0x34
    27a2:	89a3      	ldrh	r3, [r4, #12]
    27a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    27a8:	81a3      	strh	r3, [r4, #12]
    27aa:	2300      	movs	r3, #0
    27ac:	6063      	str	r3, [r4, #4]
    27ae:	6923      	ldr	r3, [r4, #16]
    27b0:	6023      	str	r3, [r4, #0]
    27b2:	89a3      	ldrh	r3, [r4, #12]
    27b4:	f043 0308 	orr.w	r3, r3, #8
    27b8:	81a3      	strh	r3, [r4, #12]
    27ba:	6923      	ldr	r3, [r4, #16]
    27bc:	b94b      	cbnz	r3, 27d2 <__swsetup_r+0x9a>
    27be:	89a3      	ldrh	r3, [r4, #12]
    27c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    27c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27c8:	d003      	beq.n	27d2 <__swsetup_r+0x9a>
    27ca:	4621      	mov	r1, r4
    27cc:	4630      	mov	r0, r6
    27ce:	f000 f9a3 	bl	2b18 <__smakebuf_r>
    27d2:	89a2      	ldrh	r2, [r4, #12]
    27d4:	f012 0301 	ands.w	r3, r2, #1
    27d8:	d00c      	beq.n	27f4 <__swsetup_r+0xbc>
    27da:	2300      	movs	r3, #0
    27dc:	60a3      	str	r3, [r4, #8]
    27de:	6963      	ldr	r3, [r4, #20]
    27e0:	425b      	negs	r3, r3
    27e2:	61a3      	str	r3, [r4, #24]
    27e4:	6923      	ldr	r3, [r4, #16]
    27e6:	b953      	cbnz	r3, 27fe <__swsetup_r+0xc6>
    27e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    27ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    27f0:	d1ba      	bne.n	2768 <__swsetup_r+0x30>
    27f2:	bd70      	pop	{r4, r5, r6, pc}
    27f4:	0792      	lsls	r2, r2, #30
    27f6:	bf58      	it	pl
    27f8:	6963      	ldrpl	r3, [r4, #20]
    27fa:	60a3      	str	r3, [r4, #8]
    27fc:	e7f2      	b.n	27e4 <__swsetup_r+0xac>
    27fe:	2000      	movs	r0, #0
    2800:	e7f7      	b.n	27f2 <__swsetup_r+0xba>
    2802:	bf00      	nop
    2804:	20000004 	.word	0x20000004
    2808:	00003918 	.word	0x00003918
    280c:	00003938 	.word	0x00003938
    2810:	000038f8 	.word	0x000038f8

00002814 <__sflush_r>:
    2814:	898a      	ldrh	r2, [r1, #12]
    2816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    281a:	4605      	mov	r5, r0
    281c:	0710      	lsls	r0, r2, #28
    281e:	460c      	mov	r4, r1
    2820:	d458      	bmi.n	28d4 <__sflush_r+0xc0>
    2822:	684b      	ldr	r3, [r1, #4]
    2824:	2b00      	cmp	r3, #0
    2826:	dc05      	bgt.n	2834 <__sflush_r+0x20>
    2828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    282a:	2b00      	cmp	r3, #0
    282c:	dc02      	bgt.n	2834 <__sflush_r+0x20>
    282e:	2000      	movs	r0, #0
    2830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2836:	2e00      	cmp	r6, #0
    2838:	d0f9      	beq.n	282e <__sflush_r+0x1a>
    283a:	2300      	movs	r3, #0
    283c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    2840:	682f      	ldr	r7, [r5, #0]
    2842:	602b      	str	r3, [r5, #0]
    2844:	d032      	beq.n	28ac <__sflush_r+0x98>
    2846:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2848:	89a3      	ldrh	r3, [r4, #12]
    284a:	075a      	lsls	r2, r3, #29
    284c:	d505      	bpl.n	285a <__sflush_r+0x46>
    284e:	6863      	ldr	r3, [r4, #4]
    2850:	1ac0      	subs	r0, r0, r3
    2852:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2854:	b10b      	cbz	r3, 285a <__sflush_r+0x46>
    2856:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2858:	1ac0      	subs	r0, r0, r3
    285a:	2300      	movs	r3, #0
    285c:	4602      	mov	r2, r0
    285e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2860:	6a21      	ldr	r1, [r4, #32]
    2862:	4628      	mov	r0, r5
    2864:	47b0      	blx	r6
    2866:	1c43      	adds	r3, r0, #1
    2868:	89a3      	ldrh	r3, [r4, #12]
    286a:	d106      	bne.n	287a <__sflush_r+0x66>
    286c:	6829      	ldr	r1, [r5, #0]
    286e:	291d      	cmp	r1, #29
    2870:	d82c      	bhi.n	28cc <__sflush_r+0xb8>
    2872:	4a2a      	ldr	r2, [pc, #168]	; (291c <__sflush_r+0x108>)
    2874:	40ca      	lsrs	r2, r1
    2876:	07d6      	lsls	r6, r2, #31
    2878:	d528      	bpl.n	28cc <__sflush_r+0xb8>
    287a:	2200      	movs	r2, #0
    287c:	6062      	str	r2, [r4, #4]
    287e:	04d9      	lsls	r1, r3, #19
    2880:	6922      	ldr	r2, [r4, #16]
    2882:	6022      	str	r2, [r4, #0]
    2884:	d504      	bpl.n	2890 <__sflush_r+0x7c>
    2886:	1c42      	adds	r2, r0, #1
    2888:	d101      	bne.n	288e <__sflush_r+0x7a>
    288a:	682b      	ldr	r3, [r5, #0]
    288c:	b903      	cbnz	r3, 2890 <__sflush_r+0x7c>
    288e:	6560      	str	r0, [r4, #84]	; 0x54
    2890:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2892:	602f      	str	r7, [r5, #0]
    2894:	2900      	cmp	r1, #0
    2896:	d0ca      	beq.n	282e <__sflush_r+0x1a>
    2898:	f104 0344 	add.w	r3, r4, #68	; 0x44
    289c:	4299      	cmp	r1, r3
    289e:	d002      	beq.n	28a6 <__sflush_r+0x92>
    28a0:	4628      	mov	r0, r5
    28a2:	f7ff fc03 	bl	20ac <_free_r>
    28a6:	2000      	movs	r0, #0
    28a8:	6360      	str	r0, [r4, #52]	; 0x34
    28aa:	e7c1      	b.n	2830 <__sflush_r+0x1c>
    28ac:	6a21      	ldr	r1, [r4, #32]
    28ae:	2301      	movs	r3, #1
    28b0:	4628      	mov	r0, r5
    28b2:	47b0      	blx	r6
    28b4:	1c41      	adds	r1, r0, #1
    28b6:	d1c7      	bne.n	2848 <__sflush_r+0x34>
    28b8:	682b      	ldr	r3, [r5, #0]
    28ba:	2b00      	cmp	r3, #0
    28bc:	d0c4      	beq.n	2848 <__sflush_r+0x34>
    28be:	2b1d      	cmp	r3, #29
    28c0:	d001      	beq.n	28c6 <__sflush_r+0xb2>
    28c2:	2b16      	cmp	r3, #22
    28c4:	d101      	bne.n	28ca <__sflush_r+0xb6>
    28c6:	602f      	str	r7, [r5, #0]
    28c8:	e7b1      	b.n	282e <__sflush_r+0x1a>
    28ca:	89a3      	ldrh	r3, [r4, #12]
    28cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    28d0:	81a3      	strh	r3, [r4, #12]
    28d2:	e7ad      	b.n	2830 <__sflush_r+0x1c>
    28d4:	690f      	ldr	r7, [r1, #16]
    28d6:	2f00      	cmp	r7, #0
    28d8:	d0a9      	beq.n	282e <__sflush_r+0x1a>
    28da:	0793      	lsls	r3, r2, #30
    28dc:	680e      	ldr	r6, [r1, #0]
    28de:	bf08      	it	eq
    28e0:	694b      	ldreq	r3, [r1, #20]
    28e2:	600f      	str	r7, [r1, #0]
    28e4:	bf18      	it	ne
    28e6:	2300      	movne	r3, #0
    28e8:	eba6 0807 	sub.w	r8, r6, r7
    28ec:	608b      	str	r3, [r1, #8]
    28ee:	f1b8 0f00 	cmp.w	r8, #0
    28f2:	dd9c      	ble.n	282e <__sflush_r+0x1a>
    28f4:	4643      	mov	r3, r8
    28f6:	463a      	mov	r2, r7
    28f8:	6a21      	ldr	r1, [r4, #32]
    28fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    28fc:	4628      	mov	r0, r5
    28fe:	47b0      	blx	r6
    2900:	2800      	cmp	r0, #0
    2902:	dc06      	bgt.n	2912 <__sflush_r+0xfe>
    2904:	89a3      	ldrh	r3, [r4, #12]
    2906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    290a:	81a3      	strh	r3, [r4, #12]
    290c:	f04f 30ff 	mov.w	r0, #4294967295
    2910:	e78e      	b.n	2830 <__sflush_r+0x1c>
    2912:	4407      	add	r7, r0
    2914:	eba8 0800 	sub.w	r8, r8, r0
    2918:	e7e9      	b.n	28ee <__sflush_r+0xda>
    291a:	bf00      	nop
    291c:	20400001 	.word	0x20400001

00002920 <_fflush_r>:
    2920:	b538      	push	{r3, r4, r5, lr}
    2922:	690b      	ldr	r3, [r1, #16]
    2924:	4605      	mov	r5, r0
    2926:	460c      	mov	r4, r1
    2928:	b913      	cbnz	r3, 2930 <_fflush_r+0x10>
    292a:	2500      	movs	r5, #0
    292c:	4628      	mov	r0, r5
    292e:	bd38      	pop	{r3, r4, r5, pc}
    2930:	b118      	cbz	r0, 293a <_fflush_r+0x1a>
    2932:	6983      	ldr	r3, [r0, #24]
    2934:	b90b      	cbnz	r3, 293a <_fflush_r+0x1a>
    2936:	f000 f871 	bl	2a1c <__sinit>
    293a:	4b14      	ldr	r3, [pc, #80]	; (298c <_fflush_r+0x6c>)
    293c:	429c      	cmp	r4, r3
    293e:	d11b      	bne.n	2978 <_fflush_r+0x58>
    2940:	686c      	ldr	r4, [r5, #4]
    2942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2946:	2b00      	cmp	r3, #0
    2948:	d0ef      	beq.n	292a <_fflush_r+0xa>
    294a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    294c:	07d0      	lsls	r0, r2, #31
    294e:	d404      	bmi.n	295a <_fflush_r+0x3a>
    2950:	0599      	lsls	r1, r3, #22
    2952:	d402      	bmi.n	295a <_fflush_r+0x3a>
    2954:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2956:	f000 fe3d 	bl	35d4 <__retarget_lock_acquire_recursive>
    295a:	4628      	mov	r0, r5
    295c:	4621      	mov	r1, r4
    295e:	f7ff ff59 	bl	2814 <__sflush_r>
    2962:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2964:	07da      	lsls	r2, r3, #31
    2966:	4605      	mov	r5, r0
    2968:	d4e0      	bmi.n	292c <_fflush_r+0xc>
    296a:	89a3      	ldrh	r3, [r4, #12]
    296c:	059b      	lsls	r3, r3, #22
    296e:	d4dd      	bmi.n	292c <_fflush_r+0xc>
    2970:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2972:	f000 fe30 	bl	35d6 <__retarget_lock_release_recursive>
    2976:	e7d9      	b.n	292c <_fflush_r+0xc>
    2978:	4b05      	ldr	r3, [pc, #20]	; (2990 <_fflush_r+0x70>)
    297a:	429c      	cmp	r4, r3
    297c:	d101      	bne.n	2982 <_fflush_r+0x62>
    297e:	68ac      	ldr	r4, [r5, #8]
    2980:	e7df      	b.n	2942 <_fflush_r+0x22>
    2982:	4b04      	ldr	r3, [pc, #16]	; (2994 <_fflush_r+0x74>)
    2984:	429c      	cmp	r4, r3
    2986:	bf08      	it	eq
    2988:	68ec      	ldreq	r4, [r5, #12]
    298a:	e7da      	b.n	2942 <_fflush_r+0x22>
    298c:	00003918 	.word	0x00003918
    2990:	00003938 	.word	0x00003938
    2994:	000038f8 	.word	0x000038f8

00002998 <std>:
    2998:	2300      	movs	r3, #0
    299a:	b510      	push	{r4, lr}
    299c:	4604      	mov	r4, r0
    299e:	e9c0 3300 	strd	r3, r3, [r0]
    29a2:	6083      	str	r3, [r0, #8]
    29a4:	8181      	strh	r1, [r0, #12]
    29a6:	6643      	str	r3, [r0, #100]	; 0x64
    29a8:	81c2      	strh	r2, [r0, #14]
    29aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
    29ae:	6183      	str	r3, [r0, #24]
    29b0:	4619      	mov	r1, r3
    29b2:	2208      	movs	r2, #8
    29b4:	305c      	adds	r0, #92	; 0x5c
    29b6:	f000 fe33 	bl	3620 <memset>
    29ba:	4b05      	ldr	r3, [pc, #20]	; (29d0 <std+0x38>)
    29bc:	6263      	str	r3, [r4, #36]	; 0x24
    29be:	4b05      	ldr	r3, [pc, #20]	; (29d4 <std+0x3c>)
    29c0:	62a3      	str	r3, [r4, #40]	; 0x28
    29c2:	4b05      	ldr	r3, [pc, #20]	; (29d8 <std+0x40>)
    29c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    29c6:	4b05      	ldr	r3, [pc, #20]	; (29dc <std+0x44>)
    29c8:	6224      	str	r4, [r4, #32]
    29ca:	6323      	str	r3, [r4, #48]	; 0x30
    29cc:	bd10      	pop	{r4, pc}
    29ce:	bf00      	nop
    29d0:	00003685 	.word	0x00003685
    29d4:	000036a7 	.word	0x000036a7
    29d8:	000036df 	.word	0x000036df
    29dc:	00003703 	.word	0x00003703

000029e0 <_cleanup_r>:
    29e0:	4901      	ldr	r1, [pc, #4]	; (29e8 <_cleanup_r+0x8>)
    29e2:	f000 bdd8 	b.w	3596 <_fwalk_reent>
    29e6:	bf00      	nop
    29e8:	00002921 	.word	0x00002921

000029ec <__sfp_lock_acquire>:
    29ec:	4801      	ldr	r0, [pc, #4]	; (29f4 <__sfp_lock_acquire+0x8>)
    29ee:	f000 bdf1 	b.w	35d4 <__retarget_lock_acquire_recursive>
    29f2:	bf00      	nop
    29f4:	20000960 	.word	0x20000960

000029f8 <__sfp_lock_release>:
    29f8:	4801      	ldr	r0, [pc, #4]	; (2a00 <__sfp_lock_release+0x8>)
    29fa:	f000 bdec 	b.w	35d6 <__retarget_lock_release_recursive>
    29fe:	bf00      	nop
    2a00:	20000960 	.word	0x20000960

00002a04 <__sinit_lock_acquire>:
    2a04:	4801      	ldr	r0, [pc, #4]	; (2a0c <__sinit_lock_acquire+0x8>)
    2a06:	f000 bde5 	b.w	35d4 <__retarget_lock_acquire_recursive>
    2a0a:	bf00      	nop
    2a0c:	2000095b 	.word	0x2000095b

00002a10 <__sinit_lock_release>:
    2a10:	4801      	ldr	r0, [pc, #4]	; (2a18 <__sinit_lock_release+0x8>)
    2a12:	f000 bde0 	b.w	35d6 <__retarget_lock_release_recursive>
    2a16:	bf00      	nop
    2a18:	2000095b 	.word	0x2000095b

00002a1c <__sinit>:
    2a1c:	b510      	push	{r4, lr}
    2a1e:	4604      	mov	r4, r0
    2a20:	f7ff fff0 	bl	2a04 <__sinit_lock_acquire>
    2a24:	69a3      	ldr	r3, [r4, #24]
    2a26:	b11b      	cbz	r3, 2a30 <__sinit+0x14>
    2a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a2c:	f7ff bff0 	b.w	2a10 <__sinit_lock_release>
    2a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    2a34:	6523      	str	r3, [r4, #80]	; 0x50
    2a36:	4b13      	ldr	r3, [pc, #76]	; (2a84 <__sinit+0x68>)
    2a38:	4a13      	ldr	r2, [pc, #76]	; (2a88 <__sinit+0x6c>)
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	62a2      	str	r2, [r4, #40]	; 0x28
    2a3e:	42a3      	cmp	r3, r4
    2a40:	bf04      	itt	eq
    2a42:	2301      	moveq	r3, #1
    2a44:	61a3      	streq	r3, [r4, #24]
    2a46:	4620      	mov	r0, r4
    2a48:	f000 f820 	bl	2a8c <__sfp>
    2a4c:	6060      	str	r0, [r4, #4]
    2a4e:	4620      	mov	r0, r4
    2a50:	f000 f81c 	bl	2a8c <__sfp>
    2a54:	60a0      	str	r0, [r4, #8]
    2a56:	4620      	mov	r0, r4
    2a58:	f000 f818 	bl	2a8c <__sfp>
    2a5c:	2200      	movs	r2, #0
    2a5e:	60e0      	str	r0, [r4, #12]
    2a60:	2104      	movs	r1, #4
    2a62:	6860      	ldr	r0, [r4, #4]
    2a64:	f7ff ff98 	bl	2998 <std>
    2a68:	2201      	movs	r2, #1
    2a6a:	2109      	movs	r1, #9
    2a6c:	68a0      	ldr	r0, [r4, #8]
    2a6e:	f7ff ff93 	bl	2998 <std>
    2a72:	2202      	movs	r2, #2
    2a74:	2112      	movs	r1, #18
    2a76:	68e0      	ldr	r0, [r4, #12]
    2a78:	f7ff ff8e 	bl	2998 <std>
    2a7c:	2301      	movs	r3, #1
    2a7e:	61a3      	str	r3, [r4, #24]
    2a80:	e7d2      	b.n	2a28 <__sinit+0xc>
    2a82:	bf00      	nop
    2a84:	000038f4 	.word	0x000038f4
    2a88:	000029e1 	.word	0x000029e1

00002a8c <__sfp>:
    2a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a8e:	4607      	mov	r7, r0
    2a90:	f7ff ffac 	bl	29ec <__sfp_lock_acquire>
    2a94:	4b1e      	ldr	r3, [pc, #120]	; (2b10 <__sfp+0x84>)
    2a96:	681e      	ldr	r6, [r3, #0]
    2a98:	69b3      	ldr	r3, [r6, #24]
    2a9a:	b913      	cbnz	r3, 2aa2 <__sfp+0x16>
    2a9c:	4630      	mov	r0, r6
    2a9e:	f7ff ffbd 	bl	2a1c <__sinit>
    2aa2:	3648      	adds	r6, #72	; 0x48
    2aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    2aa8:	3b01      	subs	r3, #1
    2aaa:	d503      	bpl.n	2ab4 <__sfp+0x28>
    2aac:	6833      	ldr	r3, [r6, #0]
    2aae:	b30b      	cbz	r3, 2af4 <__sfp+0x68>
    2ab0:	6836      	ldr	r6, [r6, #0]
    2ab2:	e7f7      	b.n	2aa4 <__sfp+0x18>
    2ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2ab8:	b9d5      	cbnz	r5, 2af0 <__sfp+0x64>
    2aba:	4b16      	ldr	r3, [pc, #88]	; (2b14 <__sfp+0x88>)
    2abc:	60e3      	str	r3, [r4, #12]
    2abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
    2ac2:	6665      	str	r5, [r4, #100]	; 0x64
    2ac4:	f000 fd85 	bl	35d2 <__retarget_lock_init_recursive>
    2ac8:	f7ff ff96 	bl	29f8 <__sfp_lock_release>
    2acc:	6025      	str	r5, [r4, #0]
    2ace:	e9c4 5501 	strd	r5, r5, [r4, #4]
    2ad2:	e9c4 5504 	strd	r5, r5, [r4, #16]
    2ad6:	61a5      	str	r5, [r4, #24]
    2ad8:	2208      	movs	r2, #8
    2ada:	4629      	mov	r1, r5
    2adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2ae0:	f000 fd9e 	bl	3620 <memset>
    2ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    2ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    2aec:	4620      	mov	r0, r4
    2aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2af0:	3468      	adds	r4, #104	; 0x68
    2af2:	e7d9      	b.n	2aa8 <__sfp+0x1c>
    2af4:	2104      	movs	r1, #4
    2af6:	4638      	mov	r0, r7
    2af8:	f000 fd37 	bl	356a <__sfmoreglue>
    2afc:	4604      	mov	r4, r0
    2afe:	6030      	str	r0, [r6, #0]
    2b00:	2800      	cmp	r0, #0
    2b02:	d1d5      	bne.n	2ab0 <__sfp+0x24>
    2b04:	f7ff ff78 	bl	29f8 <__sfp_lock_release>
    2b08:	230c      	movs	r3, #12
    2b0a:	603b      	str	r3, [r7, #0]
    2b0c:	e7ee      	b.n	2aec <__sfp+0x60>
    2b0e:	bf00      	nop
    2b10:	000038f4 	.word	0x000038f4
    2b14:	ffff0001 	.word	0xffff0001

00002b18 <__smakebuf_r>:
    2b18:	898b      	ldrh	r3, [r1, #12]
    2b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2b1c:	079d      	lsls	r5, r3, #30
    2b1e:	4606      	mov	r6, r0
    2b20:	460c      	mov	r4, r1
    2b22:	d507      	bpl.n	2b34 <__smakebuf_r+0x1c>
    2b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2b28:	6023      	str	r3, [r4, #0]
    2b2a:	6123      	str	r3, [r4, #16]
    2b2c:	2301      	movs	r3, #1
    2b2e:	6163      	str	r3, [r4, #20]
    2b30:	b002      	add	sp, #8
    2b32:	bd70      	pop	{r4, r5, r6, pc}
    2b34:	ab01      	add	r3, sp, #4
    2b36:	466a      	mov	r2, sp
    2b38:	f000 fd4e 	bl	35d8 <__swhatbuf_r>
    2b3c:	9900      	ldr	r1, [sp, #0]
    2b3e:	4605      	mov	r5, r0
    2b40:	4630      	mov	r0, r6
    2b42:	f7ff fb01 	bl	2148 <_malloc_r>
    2b46:	b948      	cbnz	r0, 2b5c <__smakebuf_r+0x44>
    2b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2b4c:	059a      	lsls	r2, r3, #22
    2b4e:	d4ef      	bmi.n	2b30 <__smakebuf_r+0x18>
    2b50:	f023 0303 	bic.w	r3, r3, #3
    2b54:	f043 0302 	orr.w	r3, r3, #2
    2b58:	81a3      	strh	r3, [r4, #12]
    2b5a:	e7e3      	b.n	2b24 <__smakebuf_r+0xc>
    2b5c:	4b0d      	ldr	r3, [pc, #52]	; (2b94 <__smakebuf_r+0x7c>)
    2b5e:	62b3      	str	r3, [r6, #40]	; 0x28
    2b60:	89a3      	ldrh	r3, [r4, #12]
    2b62:	6020      	str	r0, [r4, #0]
    2b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2b68:	81a3      	strh	r3, [r4, #12]
    2b6a:	9b00      	ldr	r3, [sp, #0]
    2b6c:	6163      	str	r3, [r4, #20]
    2b6e:	9b01      	ldr	r3, [sp, #4]
    2b70:	6120      	str	r0, [r4, #16]
    2b72:	b15b      	cbz	r3, 2b8c <__smakebuf_r+0x74>
    2b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2b78:	4630      	mov	r0, r6
    2b7a:	f000 f867 	bl	2c4c <_isatty_r>
    2b7e:	b128      	cbz	r0, 2b8c <__smakebuf_r+0x74>
    2b80:	89a3      	ldrh	r3, [r4, #12]
    2b82:	f023 0303 	bic.w	r3, r3, #3
    2b86:	f043 0301 	orr.w	r3, r3, #1
    2b8a:	81a3      	strh	r3, [r4, #12]
    2b8c:	89a3      	ldrh	r3, [r4, #12]
    2b8e:	431d      	orrs	r5, r3
    2b90:	81a5      	strh	r5, [r4, #12]
    2b92:	e7cd      	b.n	2b30 <__smakebuf_r+0x18>
    2b94:	000029e1 	.word	0x000029e1

00002b98 <__malloc_lock>:
    2b98:	4801      	ldr	r0, [pc, #4]	; (2ba0 <__malloc_lock+0x8>)
    2b9a:	f000 bd1b 	b.w	35d4 <__retarget_lock_acquire_recursive>
    2b9e:	bf00      	nop
    2ba0:	2000095c 	.word	0x2000095c

00002ba4 <__malloc_unlock>:
    2ba4:	4801      	ldr	r0, [pc, #4]	; (2bac <__malloc_unlock+0x8>)
    2ba6:	f000 bd16 	b.w	35d6 <__retarget_lock_release_recursive>
    2baa:	bf00      	nop
    2bac:	2000095c 	.word	0x2000095c

00002bb0 <raise>:
    2bb0:	4b02      	ldr	r3, [pc, #8]	; (2bbc <raise+0xc>)
    2bb2:	4601      	mov	r1, r0
    2bb4:	6818      	ldr	r0, [r3, #0]
    2bb6:	f000 bd3b 	b.w	3630 <_raise_r>
    2bba:	bf00      	nop
    2bbc:	20000004 	.word	0x20000004

00002bc0 <_kill_r>:
    2bc0:	b538      	push	{r3, r4, r5, lr}
    2bc2:	4c07      	ldr	r4, [pc, #28]	; (2be0 <_kill_r+0x20>)
    2bc4:	2300      	movs	r3, #0
    2bc6:	4605      	mov	r5, r0
    2bc8:	4608      	mov	r0, r1
    2bca:	4611      	mov	r1, r2
    2bcc:	6023      	str	r3, [r4, #0]
    2bce:	f000 f8af 	bl	2d30 <_kill>
    2bd2:	1c43      	adds	r3, r0, #1
    2bd4:	d102      	bne.n	2bdc <_kill_r+0x1c>
    2bd6:	6823      	ldr	r3, [r4, #0]
    2bd8:	b103      	cbz	r3, 2bdc <_kill_r+0x1c>
    2bda:	602b      	str	r3, [r5, #0]
    2bdc:	bd38      	pop	{r3, r4, r5, pc}
    2bde:	bf00      	nop
    2be0:	20000954 	.word	0x20000954

00002be4 <_write_r>:
    2be4:	b538      	push	{r3, r4, r5, lr}
    2be6:	4c07      	ldr	r4, [pc, #28]	; (2c04 <_write_r+0x20>)
    2be8:	4605      	mov	r5, r0
    2bea:	4608      	mov	r0, r1
    2bec:	4611      	mov	r1, r2
    2bee:	2200      	movs	r2, #0
    2bf0:	6022      	str	r2, [r4, #0]
    2bf2:	461a      	mov	r2, r3
    2bf4:	f000 fb11 	bl	321a <_write>
    2bf8:	1c43      	adds	r3, r0, #1
    2bfa:	d102      	bne.n	2c02 <_write_r+0x1e>
    2bfc:	6823      	ldr	r3, [r4, #0]
    2bfe:	b103      	cbz	r3, 2c02 <_write_r+0x1e>
    2c00:	602b      	str	r3, [r5, #0]
    2c02:	bd38      	pop	{r3, r4, r5, pc}
    2c04:	20000954 	.word	0x20000954

00002c08 <_close_r>:
    2c08:	b538      	push	{r3, r4, r5, lr}
    2c0a:	4c06      	ldr	r4, [pc, #24]	; (2c24 <_close_r+0x1c>)
    2c0c:	2300      	movs	r3, #0
    2c0e:	4605      	mov	r5, r0
    2c10:	4608      	mov	r0, r1
    2c12:	6023      	str	r3, [r4, #0]
    2c14:	f000 f86c 	bl	2cf0 <_close>
    2c18:	1c43      	adds	r3, r0, #1
    2c1a:	d102      	bne.n	2c22 <_close_r+0x1a>
    2c1c:	6823      	ldr	r3, [r4, #0]
    2c1e:	b103      	cbz	r3, 2c22 <_close_r+0x1a>
    2c20:	602b      	str	r3, [r5, #0]
    2c22:	bd38      	pop	{r3, r4, r5, pc}
    2c24:	20000954 	.word	0x20000954

00002c28 <_fstat_r>:
    2c28:	b538      	push	{r3, r4, r5, lr}
    2c2a:	4c07      	ldr	r4, [pc, #28]	; (2c48 <_fstat_r+0x20>)
    2c2c:	2300      	movs	r3, #0
    2c2e:	4605      	mov	r5, r0
    2c30:	4608      	mov	r0, r1
    2c32:	4611      	mov	r1, r2
    2c34:	6023      	str	r3, [r4, #0]
    2c36:	f000 f863 	bl	2d00 <_fstat>
    2c3a:	1c43      	adds	r3, r0, #1
    2c3c:	d102      	bne.n	2c44 <_fstat_r+0x1c>
    2c3e:	6823      	ldr	r3, [r4, #0]
    2c40:	b103      	cbz	r3, 2c44 <_fstat_r+0x1c>
    2c42:	602b      	str	r3, [r5, #0]
    2c44:	bd38      	pop	{r3, r4, r5, pc}
    2c46:	bf00      	nop
    2c48:	20000954 	.word	0x20000954

00002c4c <_isatty_r>:
    2c4c:	b538      	push	{r3, r4, r5, lr}
    2c4e:	4c06      	ldr	r4, [pc, #24]	; (2c68 <_isatty_r+0x1c>)
    2c50:	2300      	movs	r3, #0
    2c52:	4605      	mov	r5, r0
    2c54:	4608      	mov	r0, r1
    2c56:	6023      	str	r3, [r4, #0]
    2c58:	f000 f862 	bl	2d20 <_isatty>
    2c5c:	1c43      	adds	r3, r0, #1
    2c5e:	d102      	bne.n	2c66 <_isatty_r+0x1a>
    2c60:	6823      	ldr	r3, [r4, #0]
    2c62:	b103      	cbz	r3, 2c66 <_isatty_r+0x1a>
    2c64:	602b      	str	r3, [r5, #0]
    2c66:	bd38      	pop	{r3, r4, r5, pc}
    2c68:	20000954 	.word	0x20000954

00002c6c <_lseek_r>:
    2c6c:	b538      	push	{r3, r4, r5, lr}
    2c6e:	4c07      	ldr	r4, [pc, #28]	; (2c8c <_lseek_r+0x20>)
    2c70:	4605      	mov	r5, r0
    2c72:	4608      	mov	r0, r1
    2c74:	4611      	mov	r1, r2
    2c76:	2200      	movs	r2, #0
    2c78:	6022      	str	r2, [r4, #0]
    2c7a:	461a      	mov	r2, r3
    2c7c:	f000 f860 	bl	2d40 <_lseek>
    2c80:	1c43      	adds	r3, r0, #1
    2c82:	d102      	bne.n	2c8a <_lseek_r+0x1e>
    2c84:	6823      	ldr	r3, [r4, #0]
    2c86:	b103      	cbz	r3, 2c8a <_lseek_r+0x1e>
    2c88:	602b      	str	r3, [r5, #0]
    2c8a:	bd38      	pop	{r3, r4, r5, pc}
    2c8c:	20000954 	.word	0x20000954

00002c90 <_read_r>:
    2c90:	b538      	push	{r3, r4, r5, lr}
    2c92:	4c07      	ldr	r4, [pc, #28]	; (2cb0 <_read_r+0x20>)
    2c94:	4605      	mov	r5, r0
    2c96:	4608      	mov	r0, r1
    2c98:	4611      	mov	r1, r2
    2c9a:	2200      	movs	r2, #0
    2c9c:	6022      	str	r2, [r4, #0]
    2c9e:	461a      	mov	r2, r3
    2ca0:	f000 fad5 	bl	324e <_read>
    2ca4:	1c43      	adds	r3, r0, #1
    2ca6:	d102      	bne.n	2cae <_read_r+0x1e>
    2ca8:	6823      	ldr	r3, [r4, #0]
    2caa:	b103      	cbz	r3, 2cae <_read_r+0x1e>
    2cac:	602b      	str	r3, [r5, #0]
    2cae:	bd38      	pop	{r3, r4, r5, pc}
    2cb0:	20000954 	.word	0x20000954

00002cb4 <_sbrk>:
    2cb4:	b570      	push	{r4, r5, r6, lr}
    2cb6:	4d0c      	ldr	r5, [pc, #48]	; (2ce8 <_sbrk+0x34>)
    2cb8:	682b      	ldr	r3, [r5, #0]
    2cba:	b90b      	cbnz	r3, 2cc0 <_sbrk+0xc>
    2cbc:	4b0b      	ldr	r3, [pc, #44]	; (2cec <_sbrk+0x38>)
    2cbe:	602b      	str	r3, [r5, #0]
    2cc0:	1cc4      	adds	r4, r0, #3
    2cc2:	682e      	ldr	r6, [r5, #0]
    2cc4:	f024 0403 	bic.w	r4, r4, #3
    2cc8:	4434      	add	r4, r6
    2cca:	4620      	mov	r0, r4
    2ccc:	f000 f840 	bl	2d50 <__check_heap_overflow>
    2cd0:	b910      	cbnz	r0, 2cd8 <_sbrk+0x24>
    2cd2:	602c      	str	r4, [r5, #0]
    2cd4:	4630      	mov	r0, r6
    2cd6:	bd70      	pop	{r4, r5, r6, pc}
    2cd8:	f000 f846 	bl	2d68 <__errno>
    2cdc:	230c      	movs	r3, #12
    2cde:	6003      	str	r3, [r0, #0]
    2ce0:	f04f 36ff 	mov.w	r6, #4294967295
    2ce4:	e7f6      	b.n	2cd4 <_sbrk+0x20>
    2ce6:	bf00      	nop
    2ce8:	20000924 	.word	0x20000924
    2cec:	20000964 	.word	0x20000964

00002cf0 <_close>:
    2cf0:	4b02      	ldr	r3, [pc, #8]	; (2cfc <_close+0xc>)
    2cf2:	2258      	movs	r2, #88	; 0x58
    2cf4:	601a      	str	r2, [r3, #0]
    2cf6:	f04f 30ff 	mov.w	r0, #4294967295
    2cfa:	4770      	bx	lr
    2cfc:	20000954 	.word	0x20000954

00002d00 <_fstat>:
    2d00:	4b02      	ldr	r3, [pc, #8]	; (2d0c <_fstat+0xc>)
    2d02:	2258      	movs	r2, #88	; 0x58
    2d04:	601a      	str	r2, [r3, #0]
    2d06:	f04f 30ff 	mov.w	r0, #4294967295
    2d0a:	4770      	bx	lr
    2d0c:	20000954 	.word	0x20000954

00002d10 <_getpid>:
    2d10:	4b02      	ldr	r3, [pc, #8]	; (2d1c <_getpid+0xc>)
    2d12:	2258      	movs	r2, #88	; 0x58
    2d14:	601a      	str	r2, [r3, #0]
    2d16:	f04f 30ff 	mov.w	r0, #4294967295
    2d1a:	4770      	bx	lr
    2d1c:	20000954 	.word	0x20000954

00002d20 <_isatty>:
    2d20:	4b02      	ldr	r3, [pc, #8]	; (2d2c <_isatty+0xc>)
    2d22:	2258      	movs	r2, #88	; 0x58
    2d24:	601a      	str	r2, [r3, #0]
    2d26:	2000      	movs	r0, #0
    2d28:	4770      	bx	lr
    2d2a:	bf00      	nop
    2d2c:	20000954 	.word	0x20000954

00002d30 <_kill>:
    2d30:	4b02      	ldr	r3, [pc, #8]	; (2d3c <_kill+0xc>)
    2d32:	2258      	movs	r2, #88	; 0x58
    2d34:	601a      	str	r2, [r3, #0]
    2d36:	f04f 30ff 	mov.w	r0, #4294967295
    2d3a:	4770      	bx	lr
    2d3c:	20000954 	.word	0x20000954

00002d40 <_lseek>:
    2d40:	4b02      	ldr	r3, [pc, #8]	; (2d4c <_lseek+0xc>)
    2d42:	2258      	movs	r2, #88	; 0x58
    2d44:	601a      	str	r2, [r3, #0]
    2d46:	f04f 30ff 	mov.w	r0, #4294967295
    2d4a:	4770      	bx	lr
    2d4c:	20000954 	.word	0x20000954

00002d50 <__check_heap_overflow>:
    2d50:	4b04      	ldr	r3, [pc, #16]	; (2d64 <__check_heap_overflow+0x14>)
    2d52:	b123      	cbz	r3, 2d5e <__check_heap_overflow+0xe>
    2d54:	4298      	cmp	r0, r3
    2d56:	bf34      	ite	cc
    2d58:	2000      	movcc	r0, #0
    2d5a:	2001      	movcs	r0, #1
    2d5c:	4770      	bx	lr
    2d5e:	4618      	mov	r0, r3
    2d60:	4770      	bx	lr
    2d62:	bf00      	nop
    2d64:	20001964 	.word	0x20001964

00002d68 <__errno>:
    2d68:	4b01      	ldr	r3, [pc, #4]	; (2d70 <__errno+0x8>)
    2d6a:	6818      	ldr	r0, [r3, #0]
    2d6c:	4770      	bx	lr
    2d6e:	bf00      	nop
    2d70:	20000004 	.word	0x20000004

00002d74 <DMA0_IRQHandler>:
// your own handler routines in your application code. These routines call
// driver exception handlers or IntDefaultHandler() if no driver exception
// handler is included.
//*****************************************************************************
WEAK void DMA0_IRQHandler(void)
{   DMA0_DriverIRQHandler();
    2d74:	b508      	push	{r3, lr}
    2d76:	f7fd fa54 	bl	222 <ADC0_DriverIRQHandler>
}
    2d7a:	bd08      	pop	{r3, pc}

00002d7c <DMA1_IRQHandler>:

WEAK void DMA1_IRQHandler(void)
{   DMA1_DriverIRQHandler();
    2d7c:	b508      	push	{r3, lr}
    2d7e:	f7fd fa50 	bl	222 <ADC0_DriverIRQHandler>
}
    2d82:	bd08      	pop	{r3, pc}

00002d84 <DMA2_IRQHandler>:

WEAK void DMA2_IRQHandler(void)
{   DMA2_DriverIRQHandler();
    2d84:	b508      	push	{r3, lr}
    2d86:	f7fd fa4c 	bl	222 <ADC0_DriverIRQHandler>
}
    2d8a:	bd08      	pop	{r3, pc}

00002d8c <DMA3_IRQHandler>:

WEAK void DMA3_IRQHandler(void)
{   DMA3_DriverIRQHandler();
    2d8c:	b508      	push	{r3, lr}
    2d8e:	f7fd fa48 	bl	222 <ADC0_DriverIRQHandler>
}
    2d92:	bd08      	pop	{r3, pc}

00002d94 <DMA4_IRQHandler>:

WEAK void DMA4_IRQHandler(void)
{   DMA4_DriverIRQHandler();
    2d94:	b508      	push	{r3, lr}
    2d96:	f7fd fa44 	bl	222 <ADC0_DriverIRQHandler>
}
    2d9a:	bd08      	pop	{r3, pc}

00002d9c <DMA5_IRQHandler>:

WEAK void DMA5_IRQHandler(void)
{   DMA5_DriverIRQHandler();
    2d9c:	b508      	push	{r3, lr}
    2d9e:	f7fd fa40 	bl	222 <ADC0_DriverIRQHandler>
}
    2da2:	bd08      	pop	{r3, pc}

00002da4 <DMA6_IRQHandler>:

WEAK void DMA6_IRQHandler(void)
{   DMA6_DriverIRQHandler();
    2da4:	b508      	push	{r3, lr}
    2da6:	f7fd fa3c 	bl	222 <ADC0_DriverIRQHandler>
}
    2daa:	bd08      	pop	{r3, pc}

00002dac <DMA7_IRQHandler>:

WEAK void DMA7_IRQHandler(void)
{   DMA7_DriverIRQHandler();
    2dac:	b508      	push	{r3, lr}
    2dae:	f7fd fa38 	bl	222 <ADC0_DriverIRQHandler>
}
    2db2:	bd08      	pop	{r3, pc}

00002db4 <DMA8_IRQHandler>:

WEAK void DMA8_IRQHandler(void)
{   DMA8_DriverIRQHandler();
    2db4:	b508      	push	{r3, lr}
    2db6:	f7fd fa34 	bl	222 <ADC0_DriverIRQHandler>
}
    2dba:	bd08      	pop	{r3, pc}

00002dbc <DMA9_IRQHandler>:

WEAK void DMA9_IRQHandler(void)
{   DMA9_DriverIRQHandler();
    2dbc:	b508      	push	{r3, lr}
    2dbe:	f7fd fa30 	bl	222 <ADC0_DriverIRQHandler>
}
    2dc2:	bd08      	pop	{r3, pc}

00002dc4 <DMA10_IRQHandler>:

WEAK void DMA10_IRQHandler(void)
{   DMA10_DriverIRQHandler();
    2dc4:	b508      	push	{r3, lr}
    2dc6:	f7fd fa2c 	bl	222 <ADC0_DriverIRQHandler>
}
    2dca:	bd08      	pop	{r3, pc}

00002dcc <DMA11_IRQHandler>:

WEAK void DMA11_IRQHandler(void)
{   DMA11_DriverIRQHandler();
    2dcc:	b508      	push	{r3, lr}
    2dce:	f7fd fa28 	bl	222 <ADC0_DriverIRQHandler>
}
    2dd2:	bd08      	pop	{r3, pc}

00002dd4 <DMA12_IRQHandler>:

WEAK void DMA12_IRQHandler(void)
{   DMA12_DriverIRQHandler();
    2dd4:	b508      	push	{r3, lr}
    2dd6:	f7fd fa24 	bl	222 <ADC0_DriverIRQHandler>
}
    2dda:	bd08      	pop	{r3, pc}

00002ddc <DMA13_IRQHandler>:

WEAK void DMA13_IRQHandler(void)
{   DMA13_DriverIRQHandler();
    2ddc:	b508      	push	{r3, lr}
    2dde:	f7fd fa20 	bl	222 <ADC0_DriverIRQHandler>
}
    2de2:	bd08      	pop	{r3, pc}

00002de4 <DMA14_IRQHandler>:

WEAK void DMA14_IRQHandler(void)
{   DMA14_DriverIRQHandler();
    2de4:	b508      	push	{r3, lr}
    2de6:	f7fd fa1c 	bl	222 <ADC0_DriverIRQHandler>
}
    2dea:	bd08      	pop	{r3, pc}

00002dec <DMA15_IRQHandler>:

WEAK void DMA15_IRQHandler(void)
{   DMA15_DriverIRQHandler();
    2dec:	b508      	push	{r3, lr}
    2dee:	f7fd fa18 	bl	222 <ADC0_DriverIRQHandler>
}
    2df2:	bd08      	pop	{r3, pc}

00002df4 <DMA_Error_IRQHandler>:

WEAK void DMA_Error_IRQHandler(void)
{   DMA_Error_DriverIRQHandler();
    2df4:	b508      	push	{r3, lr}
    2df6:	f7fd fa14 	bl	222 <ADC0_DriverIRQHandler>
}
    2dfa:	bd08      	pop	{r3, pc}

00002dfc <MCM_IRQHandler>:

WEAK void MCM_IRQHandler(void)
{   MCM_DriverIRQHandler();
    2dfc:	b508      	push	{r3, lr}
    2dfe:	f7fd fa10 	bl	222 <ADC0_DriverIRQHandler>
}
    2e02:	bd08      	pop	{r3, pc}

00002e04 <FTF_IRQHandler>:

WEAK void FTF_IRQHandler(void)
{   FTF_DriverIRQHandler();
    2e04:	b508      	push	{r3, lr}
    2e06:	f7fd fa0c 	bl	222 <ADC0_DriverIRQHandler>
}
    2e0a:	bd08      	pop	{r3, pc}

00002e0c <Read_Collision_IRQHandler>:

WEAK void Read_Collision_IRQHandler(void)
{   Read_Collision_DriverIRQHandler();
    2e0c:	b508      	push	{r3, lr}
    2e0e:	f7fd fa08 	bl	222 <ADC0_DriverIRQHandler>
}
    2e12:	bd08      	pop	{r3, pc}

00002e14 <LVD_LVW_IRQHandler>:

WEAK void LVD_LVW_IRQHandler(void)
{   LVD_LVW_DriverIRQHandler();
    2e14:	b508      	push	{r3, lr}
    2e16:	f7fd fa04 	bl	222 <ADC0_DriverIRQHandler>
}
    2e1a:	bd08      	pop	{r3, pc}

00002e1c <LLWU_IRQHandler>:

WEAK void LLWU_IRQHandler(void)
{   LLWU_DriverIRQHandler();
    2e1c:	b508      	push	{r3, lr}
    2e1e:	f7fd fa00 	bl	222 <ADC0_DriverIRQHandler>
}
    2e22:	bd08      	pop	{r3, pc}

00002e24 <WDOG_EWM_IRQHandler>:

WEAK void WDOG_EWM_IRQHandler(void)
{   WDOG_EWM_DriverIRQHandler();
    2e24:	b508      	push	{r3, lr}
    2e26:	f7fd f9fc 	bl	222 <ADC0_DriverIRQHandler>
}
    2e2a:	bd08      	pop	{r3, pc}

00002e2c <RNG_IRQHandler>:

WEAK void RNG_IRQHandler(void)
{   RNG_DriverIRQHandler();
    2e2c:	b508      	push	{r3, lr}
    2e2e:	f7fd f9f8 	bl	222 <ADC0_DriverIRQHandler>
}
    2e32:	bd08      	pop	{r3, pc}

00002e34 <I2C0_IRQHandler>:

WEAK void I2C0_IRQHandler(void)
{   I2C0_DriverIRQHandler();
    2e34:	b508      	push	{r3, lr}
    2e36:	f7fd f9f4 	bl	222 <ADC0_DriverIRQHandler>
}
    2e3a:	bd08      	pop	{r3, pc}

00002e3c <I2C1_IRQHandler>:

WEAK void I2C1_IRQHandler(void)
{   I2C1_DriverIRQHandler();
    2e3c:	b508      	push	{r3, lr}
    2e3e:	f7fd f9f0 	bl	222 <ADC0_DriverIRQHandler>
}
    2e42:	bd08      	pop	{r3, pc}

00002e44 <SPI0_IRQHandler>:

WEAK void SPI0_IRQHandler(void)
{   SPI0_DriverIRQHandler();
    2e44:	b508      	push	{r3, lr}
    2e46:	f7fd f9ec 	bl	222 <ADC0_DriverIRQHandler>
}
    2e4a:	bd08      	pop	{r3, pc}

00002e4c <SPI1_IRQHandler>:

WEAK void SPI1_IRQHandler(void)
{   SPI1_DriverIRQHandler();
    2e4c:	b508      	push	{r3, lr}
    2e4e:	f7fd f9e8 	bl	222 <ADC0_DriverIRQHandler>
}
    2e52:	bd08      	pop	{r3, pc}

00002e54 <I2S0_Tx_IRQHandler>:

WEAK void I2S0_Tx_IRQHandler(void)
{   I2S0_Tx_DriverIRQHandler();
    2e54:	b508      	push	{r3, lr}
    2e56:	f7fd f9e4 	bl	222 <ADC0_DriverIRQHandler>
}
    2e5a:	bd08      	pop	{r3, pc}

00002e5c <I2S0_Rx_IRQHandler>:

WEAK void I2S0_Rx_IRQHandler(void)
{   I2S0_Rx_DriverIRQHandler();
    2e5c:	b508      	push	{r3, lr}
    2e5e:	f7fd f9e0 	bl	222 <ADC0_DriverIRQHandler>
}
    2e62:	bd08      	pop	{r3, pc}

00002e64 <LPUART0_IRQHandler>:

WEAK void LPUART0_IRQHandler(void)
{   LPUART0_DriverIRQHandler();
    2e64:	b508      	push	{r3, lr}
    2e66:	f7fd f9dc 	bl	222 <ADC0_DriverIRQHandler>
}
    2e6a:	bd08      	pop	{r3, pc}

00002e6c <UART2_RX_TX_IRQHandler>:
WEAK void UART1_ERR_IRQHandler(void)
{   UART1_ERR_DriverIRQHandler();
}

WEAK void UART2_RX_TX_IRQHandler(void)
{   UART2_RX_TX_DriverIRQHandler();
    2e6c:	b508      	push	{r3, lr}
    2e6e:	f7fd f9d8 	bl	222 <ADC0_DriverIRQHandler>
}
    2e72:	bd08      	pop	{r3, pc}

00002e74 <UART2_ERR_IRQHandler>:

WEAK void UART2_ERR_IRQHandler(void)
{   UART2_ERR_DriverIRQHandler();
    2e74:	b508      	push	{r3, lr}
    2e76:	f7fd f9d4 	bl	222 <ADC0_DriverIRQHandler>
}
    2e7a:	bd08      	pop	{r3, pc}

00002e7c <Reserved53_IRQHandler>:

WEAK void Reserved53_IRQHandler(void)
{   Reserved53_DriverIRQHandler();
    2e7c:	b508      	push	{r3, lr}
    2e7e:	f7fd f9d0 	bl	222 <ADC0_DriverIRQHandler>
}
    2e82:	bd08      	pop	{r3, pc}

00002e84 <Reserved54_IRQHandler>:

WEAK void Reserved54_IRQHandler(void)
{   Reserved54_DriverIRQHandler();
    2e84:	b508      	push	{r3, lr}
    2e86:	f7fd f9cc 	bl	222 <ADC0_DriverIRQHandler>
}
    2e8a:	bd08      	pop	{r3, pc}

00002e8c <ADC0_IRQHandler>:

WEAK void ADC0_IRQHandler(void)
{   ADC0_DriverIRQHandler();
    2e8c:	b508      	push	{r3, lr}
    2e8e:	f7fd f9c8 	bl	222 <ADC0_DriverIRQHandler>
}
    2e92:	bd08      	pop	{r3, pc}

00002e94 <CMP0_IRQHandler>:

WEAK void CMP0_IRQHandler(void)
{   CMP0_DriverIRQHandler();
    2e94:	b508      	push	{r3, lr}
    2e96:	f7fd f9c4 	bl	222 <ADC0_DriverIRQHandler>
}
    2e9a:	bd08      	pop	{r3, pc}

00002e9c <CMP1_IRQHandler>:

WEAK void CMP1_IRQHandler(void)
{   CMP1_DriverIRQHandler();
    2e9c:	b508      	push	{r3, lr}
    2e9e:	f7fd f9c0 	bl	222 <ADC0_DriverIRQHandler>
}
    2ea2:	bd08      	pop	{r3, pc}

00002ea4 <Reserved61_IRQHandler>:
WEAK void FTM2_IRQHandler(void)
{   FTM2_DriverIRQHandler();
}

WEAK void Reserved61_IRQHandler(void)
{   Reserved61_DriverIRQHandler();
    2ea4:	b508      	push	{r3, lr}
    2ea6:	f7fd f9bc 	bl	222 <ADC0_DriverIRQHandler>
}
    2eaa:	bd08      	pop	{r3, pc}

00002eac <RTC_IRQHandler>:

WEAK void RTC_IRQHandler(void)
{   RTC_DriverIRQHandler();
    2eac:	b508      	push	{r3, lr}
    2eae:	f7fd f9b8 	bl	222 <ADC0_DriverIRQHandler>
}
    2eb2:	bd08      	pop	{r3, pc}

00002eb4 <RTC_Seconds_IRQHandler>:

WEAK void RTC_Seconds_IRQHandler(void)
{   RTC_Seconds_DriverIRQHandler();
    2eb4:	b508      	push	{r3, lr}
    2eb6:	f7fd f9b4 	bl	222 <ADC0_DriverIRQHandler>
}
    2eba:	bd08      	pop	{r3, pc}

00002ebc <PIT0_IRQHandler>:

WEAK void PIT0_IRQHandler(void)
{   PIT0_DriverIRQHandler();
    2ebc:	b508      	push	{r3, lr}
    2ebe:	f7fd f9b0 	bl	222 <ADC0_DriverIRQHandler>
}
    2ec2:	bd08      	pop	{r3, pc}

00002ec4 <PIT1_IRQHandler>:

WEAK void PIT1_IRQHandler(void)
{   PIT1_DriverIRQHandler();
    2ec4:	b508      	push	{r3, lr}
    2ec6:	f7fd f9ac 	bl	222 <ADC0_DriverIRQHandler>
}
    2eca:	bd08      	pop	{r3, pc}

00002ecc <PIT2_IRQHandler>:

WEAK void PIT2_IRQHandler(void)
{   PIT2_DriverIRQHandler();
    2ecc:	b508      	push	{r3, lr}
    2ece:	f7fd f9a8 	bl	222 <ADC0_DriverIRQHandler>
}
    2ed2:	bd08      	pop	{r3, pc}

00002ed4 <PIT3_IRQHandler>:

WEAK void PIT3_IRQHandler(void)
{   PIT3_DriverIRQHandler();
    2ed4:	b508      	push	{r3, lr}
    2ed6:	f7fd f9a4 	bl	222 <ADC0_DriverIRQHandler>
}
    2eda:	bd08      	pop	{r3, pc}

00002edc <PDB0_IRQHandler>:

WEAK void PDB0_IRQHandler(void)
{   PDB0_DriverIRQHandler();
    2edc:	b508      	push	{r3, lr}
    2ede:	f7fd f9a0 	bl	222 <ADC0_DriverIRQHandler>
}
    2ee2:	bd08      	pop	{r3, pc}

00002ee4 <USB0_IRQHandler>:

WEAK void USB0_IRQHandler(void)
{   USB0_DriverIRQHandler();
    2ee4:	b508      	push	{r3, lr}
    2ee6:	f7fd f99c 	bl	222 <ADC0_DriverIRQHandler>
}
    2eea:	bd08      	pop	{r3, pc}

00002eec <Reserved70_IRQHandler>:

WEAK void Reserved70_IRQHandler(void)
{   Reserved70_DriverIRQHandler();
    2eec:	b508      	push	{r3, lr}
    2eee:	f7fd f998 	bl	222 <ADC0_DriverIRQHandler>
}
    2ef2:	bd08      	pop	{r3, pc}

00002ef4 <Reserved71_IRQHandler>:

WEAK void Reserved71_IRQHandler(void)
{   Reserved71_DriverIRQHandler();
    2ef4:	b508      	push	{r3, lr}
    2ef6:	f7fd f994 	bl	222 <ADC0_DriverIRQHandler>
}
    2efa:	bd08      	pop	{r3, pc}

00002efc <DAC0_IRQHandler>:

WEAK void DAC0_IRQHandler(void)
{   DAC0_DriverIRQHandler();
    2efc:	b508      	push	{r3, lr}
    2efe:	f7fd f990 	bl	222 <ADC0_DriverIRQHandler>
}
    2f02:	bd08      	pop	{r3, pc}

00002f04 <MCG_IRQHandler>:

WEAK void MCG_IRQHandler(void)
{   MCG_DriverIRQHandler();
    2f04:	b508      	push	{r3, lr}
    2f06:	f7fd f98c 	bl	222 <ADC0_DriverIRQHandler>
}
    2f0a:	bd08      	pop	{r3, pc}

00002f0c <LPTMR0_IRQHandler>:

WEAK void LPTMR0_IRQHandler(void)
{   LPTMR0_DriverIRQHandler();
    2f0c:	b508      	push	{r3, lr}
    2f0e:	f7fd f988 	bl	222 <ADC0_DriverIRQHandler>
}
    2f12:	bd08      	pop	{r3, pc}

00002f14 <PORTA_IRQHandler>:

WEAK void PORTA_IRQHandler(void)
{   PORTA_DriverIRQHandler();
    2f14:	b508      	push	{r3, lr}
    2f16:	f7fd f984 	bl	222 <ADC0_DriverIRQHandler>
}
    2f1a:	bd08      	pop	{r3, pc}

00002f1c <PORTB_IRQHandler>:

WEAK void PORTB_IRQHandler(void)
{   PORTB_DriverIRQHandler();
    2f1c:	b508      	push	{r3, lr}
    2f1e:	f7fd f980 	bl	222 <ADC0_DriverIRQHandler>
}
    2f22:	bd08      	pop	{r3, pc}

00002f24 <PORTC_IRQHandler>:

WEAK void PORTC_IRQHandler(void)
{   PORTC_DriverIRQHandler();
    2f24:	b508      	push	{r3, lr}
    2f26:	f7fd f97c 	bl	222 <ADC0_DriverIRQHandler>
}
    2f2a:	bd08      	pop	{r3, pc}

00002f2c <PORTD_IRQHandler>:

WEAK void PORTD_IRQHandler(void)
{   PORTD_DriverIRQHandler();
    2f2c:	b508      	push	{r3, lr}
    2f2e:	f7fd f978 	bl	222 <ADC0_DriverIRQHandler>
}
    2f32:	bd08      	pop	{r3, pc}

00002f34 <PORTE_IRQHandler>:

WEAK void PORTE_IRQHandler(void)
{   PORTE_DriverIRQHandler();
    2f34:	b508      	push	{r3, lr}
    2f36:	f7fd f974 	bl	222 <ADC0_DriverIRQHandler>
}
    2f3a:	bd08      	pop	{r3, pc}

00002f3c <SWI_IRQHandler>:

WEAK void SWI_IRQHandler(void)
{   SWI_DriverIRQHandler();
    2f3c:	b508      	push	{r3, lr}
    2f3e:	f7fd f970 	bl	222 <ADC0_DriverIRQHandler>
}
    2f42:	bd08      	pop	{r3, pc}

00002f44 <Reserved81_IRQHandler>:

WEAK void Reserved81_IRQHandler(void)
{   Reserved81_DriverIRQHandler();
    2f44:	b508      	push	{r3, lr}
    2f46:	f7fd f96c 	bl	222 <ADC0_DriverIRQHandler>
}
    2f4a:	bd08      	pop	{r3, pc}

00002f4c <Reserved82_IRQHandler>:

WEAK void Reserved82_IRQHandler(void)
{   Reserved82_DriverIRQHandler();
    2f4c:	b508      	push	{r3, lr}
    2f4e:	f7fd f968 	bl	222 <ADC0_DriverIRQHandler>
}
    2f52:	bd08      	pop	{r3, pc}

00002f54 <Reserved83_IRQHandler>:

WEAK void Reserved83_IRQHandler(void)
{   Reserved83_DriverIRQHandler();
    2f54:	b508      	push	{r3, lr}
    2f56:	f7fd f964 	bl	222 <ADC0_DriverIRQHandler>
}
    2f5a:	bd08      	pop	{r3, pc}

00002f5c <Reserved84_IRQHandler>:

WEAK void Reserved84_IRQHandler(void)
{   Reserved84_DriverIRQHandler();
    2f5c:	b508      	push	{r3, lr}
    2f5e:	f7fd f960 	bl	222 <ADC0_DriverIRQHandler>
}
    2f62:	bd08      	pop	{r3, pc}

00002f64 <Reserved85_IRQHandler>:

WEAK void Reserved85_IRQHandler(void)
{   Reserved85_DriverIRQHandler();
    2f64:	b508      	push	{r3, lr}
    2f66:	f7fd f95c 	bl	222 <ADC0_DriverIRQHandler>
}
    2f6a:	bd08      	pop	{r3, pc}

00002f6c <Reserved86_IRQHandler>:

WEAK void Reserved86_IRQHandler(void)
{   Reserved86_DriverIRQHandler();
    2f6c:	b508      	push	{r3, lr}
    2f6e:	f7fd f958 	bl	222 <ADC0_DriverIRQHandler>
}
    2f72:	bd08      	pop	{r3, pc}

00002f74 <DAC1_IRQHandler>:
WEAK void FTM3_IRQHandler(void)
{   FTM3_DriverIRQHandler();
}

WEAK void DAC1_IRQHandler(void)
{   DAC1_DriverIRQHandler();
    2f74:	b508      	push	{r3, lr}
    2f76:	f7fd f954 	bl	222 <ADC0_DriverIRQHandler>
}
    2f7a:	bd08      	pop	{r3, pc}

00002f7c <ADC1_IRQHandler>:

WEAK void ADC1_IRQHandler(void)
{   ADC1_DriverIRQHandler();
    2f7c:	b508      	push	{r3, lr}
    2f7e:	f7fd f950 	bl	222 <ADC0_DriverIRQHandler>
}
    2f82:	bd08      	pop	{r3, pc}

00002f84 <systemPostInit>:
{
    2f84:	b580      	push	{r7, lr}
    2f86:	af00      	add	r7, sp, #0
  BOARD_InitBootPins();
    2f88:	f000 f9f6 	bl	3378 <BOARD_InitBootPins>
  BOARD_InitBootClocks();
    2f8c:	f000 f9e1 	bl	3352 <BOARD_InitBootClocks>
  BOARD_InitBootPeripherals();
    2f90:	f000 f9ec 	bl	336c <BOARD_InitBootPeripherals>
}
    2f94:	bf00      	nop
    2f96:	bd80      	pop	{r7, pc}

00002f98 <HardFault_Handler>:
                                                                                  http://www.asciiworld.com/-Smiley,20-.html */

#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
__attribute__((naked)) void HardFault_Handler(void)
{
  __asm volatile (
    2f98:	2004      	movs	r0, #4
    2f9a:	4671      	mov	r1, lr
    2f9c:	4208      	tst	r0, r1
    2f9e:	d002      	beq.n	2fa6 <_MSP>
    2fa0:	f3ef 8009 	mrs	r0, PSP
    2fa4:	e001      	b.n	2faa <_GetPC>

00002fa6 <_MSP>:
    2fa6:	f3ef 8008 	mrs	r0, MSP

00002faa <_GetPC>:
    2faa:	6981      	ldr	r1, [r0, #24]
    2fac:	f7fd baa0 	b.w	4f0 <McuHardFault_HandlerC>
    " bx lr                       \n"  /* return from the exception handler back to the application */
#else
    " b McuHardFault_HandlerC   \n"  /* decode more information. R0 contains pointer to stack frame */
#endif
  );
}
    2fb0:	bf00      	nop

00002fb2 <Default_Handler_FTM0>:
{
    2fb2:	b480      	push	{r7}
    2fb4:	af00      	add	r7, sp, #0
  __asm("bkpt"); // Still a hacker? ;-)
    2fb6:	be00      	bkpt	0x0000
}
    2fb8:	bf00      	nop
    2fba:	46bd      	mov	sp, r7
    2fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fc0:	4770      	bx	lr

00002fc2 <Default_Handler_FTM3>:
{
    2fc2:	b480      	push	{r7}
    2fc4:	af00      	add	r7, sp, #0
  __asm("bkpt"); // Still a hacker? ;-)
    2fc6:	be00      	bkpt	0x0000
}
    2fc8:	bf00      	nop
    2fca:	46bd      	mov	sp, r7
    2fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fd0:	4770      	bx	lr

00002fd2 <mapRangeToAnother>:
 *    Max. possible value of the range the output value should be
 * @return
 *    The "value" mapped to the output range
 */
int32_t mapRangeToAnother(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
    2fd2:	b480      	push	{r7}
    2fd4:	b087      	sub	sp, #28
    2fd6:	af00      	add	r7, sp, #0
    2fd8:	60f8      	str	r0, [r7, #12]
    2fda:	60b9      	str	r1, [r7, #8]
    2fdc:	607a      	str	r2, [r7, #4]
    2fde:	603b      	str	r3, [r7, #0]
	int32_t divPrecision = 100;
    2fe0:	2364      	movs	r3, #100	; 0x64
    2fe2:	617b      	str	r3, [r7, #20]
	int32_t slope = (divPrecision * (out_max - out_min)) / (in_max - in_min);
    2fe4:	6a3a      	ldr	r2, [r7, #32]
    2fe6:	683b      	ldr	r3, [r7, #0]
    2fe8:	1ad3      	subs	r3, r2, r3
    2fea:	697a      	ldr	r2, [r7, #20]
    2fec:	fb02 f203 	mul.w	r2, r2, r3
    2ff0:	6879      	ldr	r1, [r7, #4]
    2ff2:	68bb      	ldr	r3, [r7, #8]
    2ff4:	1acb      	subs	r3, r1, r3
    2ff6:	fb92 f3f3 	sdiv	r3, r2, r3
    2ffa:	613b      	str	r3, [r7, #16]
	return out_min + (slope * (value - in_min) / divPrecision);
    2ffc:	68fa      	ldr	r2, [r7, #12]
    2ffe:	68bb      	ldr	r3, [r7, #8]
    3000:	1ad3      	subs	r3, r2, r3
    3002:	693a      	ldr	r2, [r7, #16]
    3004:	fb02 f203 	mul.w	r2, r2, r3
    3008:	697b      	ldr	r3, [r7, #20]
    300a:	fb92 f2f3 	sdiv	r2, r2, r3
    300e:	683b      	ldr	r3, [r7, #0]
    3010:	4413      	add	r3, r2
}
    3012:	4618      	mov	r0, r3
    3014:	371c      	adds	r7, #28
    3016:	46bd      	mov	sp, r7
    3018:	f85d 7b04 	ldr.w	r7, [sp], #4
    301c:	4770      	bx	lr

0000301e <utilScanDecimal16u>:
 *   EC_SUCCESS: parsing succeeded
 *   EC_OVERFLOW: to many digits
 *   EC_INVALID_ARG: string doesn't starts with a digit or spaces
 */
tError utilScanDecimal16u(const char **str, uint16_t *value)
{
    301e:	b480      	push	{r7}
    3020:	b085      	sub	sp, #20
    3022:	af00      	add	r7, sp, #0
    3024:	6078      	str	r0, [r7, #4]
    3026:	6039      	str	r1, [r7, #0]
  const char *p = *str;
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	681b      	ldr	r3, [r3, #0]
    302c:	60fb      	str	r3, [r7, #12]
  uint8_t nofDigits = 5+1;
    302e:	2306      	movs	r3, #6
    3030:	72fb      	strb	r3, [r7, #11]

  while (*p == ' ') p++;  // skip leading spaces
    3032:	e002      	b.n	303a <utilScanDecimal16u+0x1c>
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	3301      	adds	r3, #1
    3038:	60fb      	str	r3, [r7, #12]
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	781b      	ldrb	r3, [r3, #0]
    303e:	2b20      	cmp	r3, #32
    3040:	d0f8      	beq.n	3034 <utilScanDecimal16u+0x16>

  *value = 0;
    3042:	683b      	ldr	r3, [r7, #0]
    3044:	2200      	movs	r2, #0
    3046:	801a      	strh	r2, [r3, #0]
  while (*p >= '0' && *p <= '9' && nofDigits > 0) {
    3048:	e015      	b.n	3076 <utilScanDecimal16u+0x58>
    *value = (uint16_t)((*value) * 10 + *p-'0');
    304a:	683b      	ldr	r3, [r7, #0]
    304c:	881b      	ldrh	r3, [r3, #0]
    304e:	461a      	mov	r2, r3
    3050:	0092      	lsls	r2, r2, #2
    3052:	4413      	add	r3, r2
    3054:	005b      	lsls	r3, r3, #1
    3056:	b29a      	uxth	r2, r3
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	b29b      	uxth	r3, r3
    305e:	4413      	add	r3, r2
    3060:	b29b      	uxth	r3, r3
    3062:	3b30      	subs	r3, #48	; 0x30
    3064:	b29a      	uxth	r2, r3
    3066:	683b      	ldr	r3, [r7, #0]
    3068:	801a      	strh	r2, [r3, #0]
    nofDigits--;
    306a:	7afb      	ldrb	r3, [r7, #11]
    306c:	3b01      	subs	r3, #1
    306e:	72fb      	strb	r3, [r7, #11]
    p++;
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	3301      	adds	r3, #1
    3074:	60fb      	str	r3, [r7, #12]
  while (*p >= '0' && *p <= '9' && nofDigits > 0) {
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	2b2f      	cmp	r3, #47	; 0x2f
    307c:	d906      	bls.n	308c <utilScanDecimal16u+0x6e>
    307e:	68fb      	ldr	r3, [r7, #12]
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	2b39      	cmp	r3, #57	; 0x39
    3084:	d802      	bhi.n	308c <utilScanDecimal16u+0x6e>
    3086:	7afb      	ldrb	r3, [r7, #11]
    3088:	2b00      	cmp	r3, #0
    308a:	d1de      	bne.n	304a <utilScanDecimal16u+0x2c>
  }
  if (nofDigits == 0) return EC_OVERFLOW;
    308c:	7afb      	ldrb	r3, [r7, #11]
    308e:	2b00      	cmp	r3, #0
    3090:	d101      	bne.n	3096 <utilScanDecimal16u+0x78>
    3092:	2303      	movs	r3, #3
    3094:	e008      	b.n	30a8 <utilScanDecimal16u+0x8a>
  if (nofDigits == 5+1) return EC_INVALID_ARG; // no digits at all?
    3096:	7afb      	ldrb	r3, [r7, #11]
    3098:	2b06      	cmp	r3, #6
    309a:	d101      	bne.n	30a0 <utilScanDecimal16u+0x82>
    309c:	2302      	movs	r3, #2
    309e:	e003      	b.n	30a8 <utilScanDecimal16u+0x8a>
  *str = p;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	68fa      	ldr	r2, [r7, #12]
    30a4:	601a      	str	r2, [r3, #0]
  return EC_SUCCESS;
    30a6:	2300      	movs	r3, #0
}
    30a8:	4618      	mov	r0, r3
    30aa:	3714      	adds	r7, #20
    30ac:	46bd      	mov	sp, r7
    30ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    30b2:	4770      	bx	lr

000030b4 <termWrite>:
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b082      	sub	sp, #8
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
  if (str == NULL) return;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	2b00      	cmp	r3, #0
    30c0:	d00c      	beq.n	30dc <termWrite+0x28>
  while (*str != '\0') termWriteChar(*str++);
    30c2:	e006      	b.n	30d2 <termWrite+0x1e>
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	1c5a      	adds	r2, r3, #1
    30c8:	607a      	str	r2, [r7, #4]
    30ca:	781b      	ldrb	r3, [r3, #0]
    30cc:	4618      	mov	r0, r3
    30ce:	f7fd ffc1 	bl	1054 <termWriteChar>
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	781b      	ldrb	r3, [r3, #0]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d1f4      	bne.n	30c4 <termWrite+0x10>
    30da:	e000      	b.n	30de <termWrite+0x2a>
  if (str == NULL) return;
    30dc:	bf00      	nop
}
    30de:	3708      	adds	r7, #8
    30e0:	46bd      	mov	sp, r7
    30e2:	bd80      	pop	{r7, pc}

000030e4 <termWriteLine>:
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b082      	sub	sp, #8
    30e8:	af00      	add	r7, sp, #0
    30ea:	6078      	str	r0, [r7, #4]
  termWrite(str);
    30ec:	6878      	ldr	r0, [r7, #4]
    30ee:	f7ff ffe1 	bl	30b4 <termWrite>
  termWriteChar(NEW_LINE);
    30f2:	200a      	movs	r0, #10
    30f4:	f7fd ffae 	bl	1054 <termWriteChar>
}
    30f8:	bf00      	nop
    30fa:	3708      	adds	r7, #8
    30fc:	46bd      	mov	sp, r7
    30fe:	bd80      	pop	{r7, pc}

00003100 <termWriteSubString>:
{
    3100:	b580      	push	{r7, lr}
    3102:	b082      	sub	sp, #8
    3104:	af00      	add	r7, sp, #0
    3106:	6078      	str	r0, [r7, #4]
    3108:	460b      	mov	r3, r1
    310a:	70fb      	strb	r3, [r7, #3]
    310c:	4613      	mov	r3, r2
    310e:	70bb      	strb	r3, [r7, #2]
  str += start;
    3110:	78fb      	ldrb	r3, [r7, #3]
    3112:	687a      	ldr	r2, [r7, #4]
    3114:	4413      	add	r3, r2
    3116:	607b      	str	r3, [r7, #4]
  while(length--) termWriteChar(*str++);
    3118:	e006      	b.n	3128 <termWriteSubString+0x28>
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	1c5a      	adds	r2, r3, #1
    311e:	607a      	str	r2, [r7, #4]
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	4618      	mov	r0, r3
    3124:	f7fd ff96 	bl	1054 <termWriteChar>
    3128:	78bb      	ldrb	r3, [r7, #2]
    312a:	1e5a      	subs	r2, r3, #1
    312c:	70ba      	strb	r2, [r7, #2]
    312e:	2b00      	cmp	r3, #0
    3130:	d1f3      	bne.n	311a <termWriteSubString+0x1a>
}
    3132:	bf00      	nop
    3134:	3708      	adds	r7, #8
    3136:	46bd      	mov	sp, r7
    3138:	bd80      	pop	{r7, pc}

0000313a <NVIC_DisableIRQEx>:
 *   \n
 *   if it is necessary to ensure an interrupt will not be triggered after disabling it in the NVIC,
 *   add a DSB instruction and then an ISB instruction.
 */
__STATIC_INLINE void NVIC_DisableIRQEx(IRQn_Type IRQn)
{
    313a:	b580      	push	{r7, lr}
    313c:	b082      	sub	sp, #8
    313e:	af00      	add	r7, sp, #0
    3140:	4603      	mov	r3, r0
    3142:	71fb      	strb	r3, [r7, #7]
  NVIC_DisableIRQ(IRQn);
    3144:	f997 3007 	ldrsb.w	r3, [r7, #7]
    3148:	4618      	mov	r0, r3
    314a:	f7fe f8f1 	bl	1330 <__NVIC_DisableIRQ>
  __asm volatile("dsb");   // data synchronization barrier
    314e:	f3bf 8f4f 	dsb	sy
  __asm volatile("isb");   // instruction synchronization barrier
    3152:	f3bf 8f6f 	isb	sy
}
    3156:	bf00      	nop
    3158:	3708      	adds	r7, #8
    315a:	46bd      	mov	sp, r7
    315c:	bd80      	pop	{r7, pc}

0000315e <uart0ReadLine>:
{
    315e:	b580      	push	{r7, lr}
    3160:	b084      	sub	sp, #16
    3162:	af00      	add	r7, sp, #0
    3164:	6078      	str	r0, [r7, #4]
    3166:	460b      	mov	r3, r1
    3168:	807b      	strh	r3, [r7, #2]
  for (i=1; i<length; i++)
    316a:	2301      	movs	r3, #1
    316c:	81fb      	strh	r3, [r7, #14]
    316e:	e013      	b.n	3198 <uart0ReadLine+0x3a>
    *str = uart0ReadChar();
    3170:	f7fe f9e6 	bl	1540 <uart0ReadChar>
    3174:	4603      	mov	r3, r0
    3176:	461a      	mov	r2, r3
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	701a      	strb	r2, [r3, #0]
    if (*str == NEW_LINE)
    317c:	687b      	ldr	r3, [r7, #4]
    317e:	781b      	ldrb	r3, [r3, #0]
    3180:	2b0a      	cmp	r3, #10
    3182:	d103      	bne.n	318c <uart0ReadLine+0x2e>
      *str = '\0';
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	2200      	movs	r2, #0
    3188:	701a      	strb	r2, [r3, #0]
      break;
    318a:	e009      	b.n	31a0 <uart0ReadLine+0x42>
    str++;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	3301      	adds	r3, #1
    3190:	607b      	str	r3, [r7, #4]
  for (i=1; i<length; i++)
    3192:	89fb      	ldrh	r3, [r7, #14]
    3194:	3301      	adds	r3, #1
    3196:	81fb      	strh	r3, [r7, #14]
    3198:	89fa      	ldrh	r2, [r7, #14]
    319a:	887b      	ldrh	r3, [r7, #2]
    319c:	429a      	cmp	r2, r3
    319e:	d3e7      	bcc.n	3170 <uart0ReadLine+0x12>
  return i;
    31a0:	89fb      	ldrh	r3, [r7, #14]
}
    31a2:	4618      	mov	r0, r3
    31a4:	3710      	adds	r7, #16
    31a6:	46bd      	mov	sp, r7
    31a8:	bd80      	pop	{r7, pc}

000031aa <NVIC_DisableIRQEx>:
{
    31aa:	b580      	push	{r7, lr}
    31ac:	b082      	sub	sp, #8
    31ae:	af00      	add	r7, sp, #0
    31b0:	4603      	mov	r3, r0
    31b2:	71fb      	strb	r3, [r7, #7]
  NVIC_DisableIRQ(IRQn);
    31b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    31b8:	4618      	mov	r0, r3
    31ba:	f7fe fab1 	bl	1720 <__NVIC_DisableIRQ>
  __asm volatile("dsb");   // data synchronization barrier
    31be:	f3bf 8f4f 	dsb	sy
  __asm volatile("isb");   // instruction synchronization barrier
    31c2:	f3bf 8f6f 	isb	sy
}
    31c6:	bf00      	nop
    31c8:	3708      	adds	r7, #8
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}

000031ce <uart1ReadLine>:
{
    31ce:	b580      	push	{r7, lr}
    31d0:	b084      	sub	sp, #16
    31d2:	af00      	add	r7, sp, #0
    31d4:	6078      	str	r0, [r7, #4]
    31d6:	460b      	mov	r3, r1
    31d8:	807b      	strh	r3, [r7, #2]
  for (i=1; i<length; i++)
    31da:	2301      	movs	r3, #1
    31dc:	81fb      	strh	r3, [r7, #14]
    31de:	e013      	b.n	3208 <uart1ReadLine+0x3a>
    *str = uart1ReadChar();
    31e0:	f7fe fba6 	bl	1930 <uart1ReadChar>
    31e4:	4603      	mov	r3, r0
    31e6:	461a      	mov	r2, r3
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	701a      	strb	r2, [r3, #0]
    if (*str == NEW_LINE)
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	781b      	ldrb	r3, [r3, #0]
    31f0:	2b0a      	cmp	r3, #10
    31f2:	d103      	bne.n	31fc <uart1ReadLine+0x2e>
      *str = '\0';
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	2200      	movs	r2, #0
    31f8:	701a      	strb	r2, [r3, #0]
      break;
    31fa:	e009      	b.n	3210 <uart1ReadLine+0x42>
    str++;
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	3301      	adds	r3, #1
    3200:	607b      	str	r3, [r7, #4]
  for (i=1; i<length; i++)
    3202:	89fb      	ldrh	r3, [r7, #14]
    3204:	3301      	adds	r3, #1
    3206:	81fb      	strh	r3, [r7, #14]
    3208:	89fa      	ldrh	r2, [r7, #14]
    320a:	887b      	ldrh	r3, [r7, #2]
    320c:	429a      	cmp	r2, r3
    320e:	d3e7      	bcc.n	31e0 <uart1ReadLine+0x12>
  return i;
    3210:	89fb      	ldrh	r3, [r7, #14]
}
    3212:	4618      	mov	r0, r3
    3214:	3710      	adds	r7, #16
    3216:	46bd      	mov	sp, r7
    3218:	bd80      	pop	{r7, pc}

0000321a <_write>:
{
    321a:	b580      	push	{r7, lr}
    321c:	b086      	sub	sp, #24
    321e:	af00      	add	r7, sp, #0
    3220:	60f8      	str	r0, [r7, #12]
    3222:	60b9      	str	r1, [r7, #8]
    3224:	607a      	str	r2, [r7, #4]
  int i = count;
    3226:	687b      	ldr	r3, [r7, #4]
    3228:	617b      	str	r3, [r7, #20]
  while (i--) uart1WriteChar(*(uint8_t*)buf++);
    322a:	e006      	b.n	323a <_write+0x20>
    322c:	68bb      	ldr	r3, [r7, #8]
    322e:	1c5a      	adds	r2, r3, #1
    3230:	60ba      	str	r2, [r7, #8]
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	4618      	mov	r0, r3
    3236:	f7fe fb3b 	bl	18b0 <uart1WriteChar>
    323a:	697b      	ldr	r3, [r7, #20]
    323c:	1e5a      	subs	r2, r3, #1
    323e:	617a      	str	r2, [r7, #20]
    3240:	2b00      	cmp	r3, #0
    3242:	d1f3      	bne.n	322c <_write+0x12>
  return count;
    3244:	687b      	ldr	r3, [r7, #4]
}
    3246:	4618      	mov	r0, r3
    3248:	3718      	adds	r7, #24
    324a:	46bd      	mov	sp, r7
    324c:	bd80      	pop	{r7, pc}

0000324e <_read>:
{
    324e:	b580      	push	{r7, lr}
    3250:	b084      	sub	sp, #16
    3252:	af00      	add	r7, sp, #0
    3254:	60f8      	str	r0, [r7, #12]
    3256:	60b9      	str	r1, [r7, #8]
    3258:	607a      	str	r2, [r7, #4]
  *buf = uart1ReadChar();
    325a:	f7fe fb69 	bl	1930 <uart1ReadChar>
    325e:	4603      	mov	r3, r0
    3260:	461a      	mov	r2, r3
    3262:	68bb      	ldr	r3, [r7, #8]
    3264:	701a      	strb	r2, [r3, #0]
  return 1;
    3266:	2301      	movs	r3, #1
}
    3268:	4618      	mov	r0, r3
    326a:	3710      	adds	r7, #16
    326c:	46bd      	mov	sp, r7
    326e:	bd80      	pop	{r7, pc}

00003270 <OSC_SetExtRefClkConfig>:
 *
 * @param base   OSC peripheral address.
 * @param config Pointer to the configuration structure.
 */
static inline void OSC_SetExtRefClkConfig(OSC_Type *base, oscer_config_t const *config)
{
    3270:	b480      	push	{r7}
    3272:	b085      	sub	sp, #20
    3274:	af00      	add	r7, sp, #0
    3276:	6078      	str	r0, [r7, #4]
    3278:	6039      	str	r1, [r7, #0]
    uint8_t reg = base->CR;
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	781b      	ldrb	r3, [r3, #0]
    327e:	73fb      	strb	r3, [r7, #15]

    reg &= ~(OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK);
    3280:	7bfb      	ldrb	r3, [r7, #15]
    3282:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3286:	73fb      	strb	r3, [r7, #15]
    reg |= config->enableMode;
    3288:	683b      	ldr	r3, [r7, #0]
    328a:	781a      	ldrb	r2, [r3, #0]
    328c:	7bfb      	ldrb	r3, [r7, #15]
    328e:	4313      	orrs	r3, r2
    3290:	73fb      	strb	r3, [r7, #15]

    base->CR = reg;
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	7bfa      	ldrb	r2, [r7, #15]
    3296:	701a      	strb	r2, [r3, #0]

    base->DIV = OSC_DIV_ERPS(config->erclkDiv);
    3298:	683b      	ldr	r3, [r7, #0]
    329a:	785b      	ldrb	r3, [r3, #1]
    329c:	019b      	lsls	r3, r3, #6
    329e:	b2da      	uxtb	r2, r3
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	709a      	strb	r2, [r3, #2]
}
    32a4:	bf00      	nop
    32a6:	3714      	adds	r7, #20
    32a8:	46bd      	mov	sp, r7
    32aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    32ae:	4770      	bx	lr

000032b0 <OSC_SetCapLoad>:
   To enable only 2 pF and 8 pF capacitor load, please use like this.
   OSC_SetCapLoad(OSC, kOSC_Cap2P | kOSC_Cap8P);
   @endcode
 */
static inline void OSC_SetCapLoad(OSC_Type *base, uint8_t capLoad)
{
    32b0:	b480      	push	{r7}
    32b2:	b085      	sub	sp, #20
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
    32b8:	460b      	mov	r3, r1
    32ba:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = base->CR;
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	73fb      	strb	r3, [r7, #15]

    reg &= ~(OSC_CR_SC2P_MASK | OSC_CR_SC4P_MASK | OSC_CR_SC8P_MASK | OSC_CR_SC16P_MASK);
    32c2:	7bfb      	ldrb	r3, [r7, #15]
    32c4:	f023 030f 	bic.w	r3, r3, #15
    32c8:	73fb      	strb	r3, [r7, #15]
    reg |= capLoad;
    32ca:	7bfa      	ldrb	r2, [r7, #15]
    32cc:	78fb      	ldrb	r3, [r7, #3]
    32ce:	4313      	orrs	r3, r2
    32d0:	73fb      	strb	r3, [r7, #15]

    base->CR = reg;
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	7bfa      	ldrb	r2, [r7, #15]
    32d6:	701a      	strb	r2, [r3, #0]
}
    32d8:	bf00      	nop
    32da:	3714      	adds	r7, #20
    32dc:	46bd      	mov	sp, r7
    32de:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e2:	4770      	bx	lr

000032e4 <SMC_SetPowerModeHsrun>:
 *
 * param base SMC peripheral base address.
 * return SMC configuration error code.
 */
status_t SMC_SetPowerModeHsrun(SMC_Type *base)
{
    32e4:	b480      	push	{r7}
    32e6:	b085      	sub	sp, #20
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
    uint32_t reg;

    reg =(base->PMCTRL);
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	785b      	ldrb	r3, [r3, #1]
    32f0:	b2db      	uxtb	r3, r3
    32f2:	60fb      	str	r3, [r7, #12]
    /* configure High Speed RUN mode */
    reg &= ~SMC_PMCTRL_RUNM_MASK;
    32f4:	68fb      	ldr	r3, [r7, #12]
    32f6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    32fa:	60fb      	str	r3, [r7, #12]
    reg |= ((uint32_t)kSMC_Hsrun << SMC_PMCTRL_RUNM_SHIFT);
    32fc:	68fb      	ldr	r3, [r7, #12]
    32fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    3302:	60fb      	str	r3, [r7, #12]
    base->PMCTRL = reg;
    3304:	68fb      	ldr	r3, [r7, #12]
    3306:	b2da      	uxtb	r2, r3
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	705a      	strb	r2, [r3, #1]

    return kStatus_Success;
    330c:	2300      	movs	r3, #0
}
    330e:	4618      	mov	r0, r3
    3310:	3714      	adds	r7, #20
    3312:	46bd      	mov	sp, r7
    3314:	f85d 7b04 	ldr.w	r7, [sp], #4
    3318:	4770      	bx	lr

0000331a <SMC_SetPowerModeProtection>:
 *
 * @param base SMC peripheral base address.
 * @param allowedModes Bitmap of the allowed power modes.
 */
static inline void SMC_SetPowerModeProtection(SMC_Type *base, uint8_t allowedModes)
{
    331a:	b480      	push	{r7}
    331c:	b083      	sub	sp, #12
    331e:	af00      	add	r7, sp, #0
    3320:	6078      	str	r0, [r7, #4]
    3322:	460b      	mov	r3, r1
    3324:	70fb      	strb	r3, [r7, #3]
    base->PMPROT = allowedModes;
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	78fa      	ldrb	r2, [r7, #3]
    332a:	701a      	strb	r2, [r3, #0]
}
    332c:	bf00      	nop
    332e:	370c      	adds	r7, #12
    3330:	46bd      	mov	sp, r7
    3332:	f85d 7b04 	ldr.w	r7, [sp], #4
    3336:	4770      	bx	lr

00003338 <SMC_GetPowerModeState>:
 *
 * @param base SMC peripheral base address.
 * @return Current power mode status.
 */
static inline smc_power_state_t SMC_GetPowerModeState(SMC_Type *base)
{
    3338:	b480      	push	{r7}
    333a:	b083      	sub	sp, #12
    333c:	af00      	add	r7, sp, #0
    333e:	6078      	str	r0, [r7, #4]
    return (smc_power_state_t)base->PMSTAT;
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	78db      	ldrb	r3, [r3, #3]
    3344:	b2db      	uxtb	r3, r3
}
    3346:	4618      	mov	r0, r3
    3348:	370c      	adds	r7, #12
    334a:	46bd      	mov	sp, r7
    334c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3350:	4770      	bx	lr

00003352 <BOARD_InitBootClocks>:
{
    3352:	b580      	push	{r7, lr}
    3354:	af00      	add	r7, sp, #0
    BOARD_BootClockRUN();
    3356:	f7fe fe3f 	bl	1fd8 <BOARD_BootClockRUN>
}
    335a:	bf00      	nop
    335c:	bd80      	pop	{r7, pc}

0000335e <BOARD_InitPeripherals>:

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void BOARD_InitPeripherals(void)
{
    335e:	b480      	push	{r7}
    3360:	af00      	add	r7, sp, #0
}
    3362:	bf00      	nop
    3364:	46bd      	mov	sp, r7
    3366:	f85d 7b04 	ldr.w	r7, [sp], #4
    336a:	4770      	bx	lr

0000336c <BOARD_InitBootPeripherals>:

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void)
{
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
  BOARD_InitPeripherals();
    3370:	f7ff fff5 	bl	335e <BOARD_InitPeripherals>
}
    3374:	bf00      	nop
    3376:	bd80      	pop	{r7, pc}

00003378 <BOARD_InitBootPins>:
 * Function Name : BOARD_InitBootPins
 * Description   : Calls initialization functions.
 *
 * END ****************************************************************************************************************/
void BOARD_InitBootPins(void)
{
    3378:	b580      	push	{r7, lr}
    337a:	af00      	add	r7, sp, #0
    BOARD_InitPins();
    337c:	f000 f802 	bl	3384 <BOARD_InitPins>
}
    3380:	bf00      	nop
    3382:	bd80      	pop	{r7, pc}

00003384 <BOARD_InitPins>:
 * Function Name : BOARD_InitPins
 * Description   : Configures pin routing and optionally pin electrical features.
 *
 * END ****************************************************************************************************************/
void BOARD_InitPins(void)
{
    3384:	b480      	push	{r7}
    3386:	af00      	add	r7, sp, #0
}
    3388:	bf00      	nop
    338a:	46bd      	mov	sp, r7
    338c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3390:	4770      	bx	lr

00003392 <__sfputc_r>:
    3392:	6893      	ldr	r3, [r2, #8]
    3394:	3b01      	subs	r3, #1
    3396:	2b00      	cmp	r3, #0
    3398:	b410      	push	{r4}
    339a:	6093      	str	r3, [r2, #8]
    339c:	da08      	bge.n	33b0 <__sfputc_r+0x1e>
    339e:	6994      	ldr	r4, [r2, #24]
    33a0:	42a3      	cmp	r3, r4
    33a2:	db01      	blt.n	33a8 <__sfputc_r+0x16>
    33a4:	290a      	cmp	r1, #10
    33a6:	d103      	bne.n	33b0 <__sfputc_r+0x1e>
    33a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    33ac:	f7ff b972 	b.w	2694 <__swbuf_r>
    33b0:	6813      	ldr	r3, [r2, #0]
    33b2:	1c58      	adds	r0, r3, #1
    33b4:	6010      	str	r0, [r2, #0]
    33b6:	7019      	strb	r1, [r3, #0]
    33b8:	4608      	mov	r0, r1
    33ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    33be:	4770      	bx	lr

000033c0 <__sfputs_r>:
    33c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33c2:	4606      	mov	r6, r0
    33c4:	460f      	mov	r7, r1
    33c6:	4614      	mov	r4, r2
    33c8:	18d5      	adds	r5, r2, r3
    33ca:	42ac      	cmp	r4, r5
    33cc:	d101      	bne.n	33d2 <__sfputs_r+0x12>
    33ce:	2000      	movs	r0, #0
    33d0:	e007      	b.n	33e2 <__sfputs_r+0x22>
    33d2:	463a      	mov	r2, r7
    33d4:	f814 1b01 	ldrb.w	r1, [r4], #1
    33d8:	4630      	mov	r0, r6
    33da:	f7ff ffda 	bl	3392 <__sfputc_r>
    33de:	1c43      	adds	r3, r0, #1
    33e0:	d1f3      	bne.n	33ca <__sfputs_r+0xa>
    33e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000033e4 <_printf_common>:
    33e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33e8:	4691      	mov	r9, r2
    33ea:	461f      	mov	r7, r3
    33ec:	688a      	ldr	r2, [r1, #8]
    33ee:	690b      	ldr	r3, [r1, #16]
    33f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    33f4:	4293      	cmp	r3, r2
    33f6:	bfb8      	it	lt
    33f8:	4613      	movlt	r3, r2
    33fa:	f8c9 3000 	str.w	r3, [r9]
    33fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    3402:	4606      	mov	r6, r0
    3404:	460c      	mov	r4, r1
    3406:	b112      	cbz	r2, 340e <_printf_common+0x2a>
    3408:	3301      	adds	r3, #1
    340a:	f8c9 3000 	str.w	r3, [r9]
    340e:	6823      	ldr	r3, [r4, #0]
    3410:	0699      	lsls	r1, r3, #26
    3412:	bf42      	ittt	mi
    3414:	f8d9 3000 	ldrmi.w	r3, [r9]
    3418:	3302      	addmi	r3, #2
    341a:	f8c9 3000 	strmi.w	r3, [r9]
    341e:	6825      	ldr	r5, [r4, #0]
    3420:	f015 0506 	ands.w	r5, r5, #6
    3424:	d107      	bne.n	3436 <_printf_common+0x52>
    3426:	f104 0a19 	add.w	sl, r4, #25
    342a:	68e3      	ldr	r3, [r4, #12]
    342c:	f8d9 2000 	ldr.w	r2, [r9]
    3430:	1a9b      	subs	r3, r3, r2
    3432:	42ab      	cmp	r3, r5
    3434:	dc28      	bgt.n	3488 <_printf_common+0xa4>
    3436:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    343a:	6822      	ldr	r2, [r4, #0]
    343c:	3300      	adds	r3, #0
    343e:	bf18      	it	ne
    3440:	2301      	movne	r3, #1
    3442:	0692      	lsls	r2, r2, #26
    3444:	d42d      	bmi.n	34a2 <_printf_common+0xbe>
    3446:	f104 0243 	add.w	r2, r4, #67	; 0x43
    344a:	4639      	mov	r1, r7
    344c:	4630      	mov	r0, r6
    344e:	47c0      	blx	r8
    3450:	3001      	adds	r0, #1
    3452:	d020      	beq.n	3496 <_printf_common+0xb2>
    3454:	6823      	ldr	r3, [r4, #0]
    3456:	68e5      	ldr	r5, [r4, #12]
    3458:	f8d9 2000 	ldr.w	r2, [r9]
    345c:	f003 0306 	and.w	r3, r3, #6
    3460:	2b04      	cmp	r3, #4
    3462:	bf08      	it	eq
    3464:	1aad      	subeq	r5, r5, r2
    3466:	68a3      	ldr	r3, [r4, #8]
    3468:	6922      	ldr	r2, [r4, #16]
    346a:	bf0c      	ite	eq
    346c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3470:	2500      	movne	r5, #0
    3472:	4293      	cmp	r3, r2
    3474:	bfc4      	itt	gt
    3476:	1a9b      	subgt	r3, r3, r2
    3478:	18ed      	addgt	r5, r5, r3
    347a:	f04f 0900 	mov.w	r9, #0
    347e:	341a      	adds	r4, #26
    3480:	454d      	cmp	r5, r9
    3482:	d11a      	bne.n	34ba <_printf_common+0xd6>
    3484:	2000      	movs	r0, #0
    3486:	e008      	b.n	349a <_printf_common+0xb6>
    3488:	2301      	movs	r3, #1
    348a:	4652      	mov	r2, sl
    348c:	4639      	mov	r1, r7
    348e:	4630      	mov	r0, r6
    3490:	47c0      	blx	r8
    3492:	3001      	adds	r0, #1
    3494:	d103      	bne.n	349e <_printf_common+0xba>
    3496:	f04f 30ff 	mov.w	r0, #4294967295
    349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    349e:	3501      	adds	r5, #1
    34a0:	e7c3      	b.n	342a <_printf_common+0x46>
    34a2:	18e1      	adds	r1, r4, r3
    34a4:	1c5a      	adds	r2, r3, #1
    34a6:	2030      	movs	r0, #48	; 0x30
    34a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    34ac:	4422      	add	r2, r4
    34ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    34b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    34b6:	3302      	adds	r3, #2
    34b8:	e7c5      	b.n	3446 <_printf_common+0x62>
    34ba:	2301      	movs	r3, #1
    34bc:	4622      	mov	r2, r4
    34be:	4639      	mov	r1, r7
    34c0:	4630      	mov	r0, r6
    34c2:	47c0      	blx	r8
    34c4:	3001      	adds	r0, #1
    34c6:	d0e6      	beq.n	3496 <_printf_common+0xb2>
    34c8:	f109 0901 	add.w	r9, r9, #1
    34cc:	e7d8      	b.n	3480 <_printf_common+0x9c>

000034ce <strcat>:
    34ce:	b510      	push	{r4, lr}
    34d0:	4603      	mov	r3, r0
    34d2:	461a      	mov	r2, r3
    34d4:	f812 4b01 	ldrb.w	r4, [r2], #1
    34d8:	b93c      	cbnz	r4, 34ea <strcat+0x1c>
    34da:	3b01      	subs	r3, #1
    34dc:	f811 2b01 	ldrb.w	r2, [r1], #1
    34e0:	f803 2f01 	strb.w	r2, [r3, #1]!
    34e4:	2a00      	cmp	r2, #0
    34e6:	d1f9      	bne.n	34dc <strcat+0xe>
    34e8:	bd10      	pop	{r4, pc}
    34ea:	4613      	mov	r3, r2
    34ec:	e7f1      	b.n	34d2 <strcat+0x4>

000034ee <strcmp>:
    34ee:	f810 2b01 	ldrb.w	r2, [r0], #1
    34f2:	f811 3b01 	ldrb.w	r3, [r1], #1
    34f6:	2a01      	cmp	r2, #1
    34f8:	bf28      	it	cs
    34fa:	429a      	cmpcs	r2, r3
    34fc:	d0f7      	beq.n	34ee <strcmp>
    34fe:	1ad0      	subs	r0, r2, r3
    3500:	4770      	bx	lr

00003502 <strlen>:
    3502:	4603      	mov	r3, r0
    3504:	f813 2b01 	ldrb.w	r2, [r3], #1
    3508:	2a00      	cmp	r2, #0
    350a:	d1fb      	bne.n	3504 <strlen+0x2>
    350c:	1a18      	subs	r0, r3, r0
    350e:	3801      	subs	r0, #1
    3510:	4770      	bx	lr

00003512 <strncmp>:
    3512:	b510      	push	{r4, lr}
    3514:	b16a      	cbz	r2, 3532 <strncmp+0x20>
    3516:	3901      	subs	r1, #1
    3518:	1884      	adds	r4, r0, r2
    351a:	f810 3b01 	ldrb.w	r3, [r0], #1
    351e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3522:	4293      	cmp	r3, r2
    3524:	d103      	bne.n	352e <strncmp+0x1c>
    3526:	42a0      	cmp	r0, r4
    3528:	d001      	beq.n	352e <strncmp+0x1c>
    352a:	2b00      	cmp	r3, #0
    352c:	d1f5      	bne.n	351a <strncmp+0x8>
    352e:	1a98      	subs	r0, r3, r2
    3530:	bd10      	pop	{r4, pc}
    3532:	4610      	mov	r0, r2
    3534:	e7fc      	b.n	3530 <strncmp+0x1e>

00003536 <strncpy>:
    3536:	b510      	push	{r4, lr}
    3538:	3901      	subs	r1, #1
    353a:	4603      	mov	r3, r0
    353c:	b132      	cbz	r2, 354c <strncpy+0x16>
    353e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    3542:	f803 4b01 	strb.w	r4, [r3], #1
    3546:	3a01      	subs	r2, #1
    3548:	2c00      	cmp	r4, #0
    354a:	d1f7      	bne.n	353c <strncpy+0x6>
    354c:	441a      	add	r2, r3
    354e:	2100      	movs	r1, #0
    3550:	4293      	cmp	r3, r2
    3552:	d100      	bne.n	3556 <strncpy+0x20>
    3554:	bd10      	pop	{r4, pc}
    3556:	f803 1b01 	strb.w	r1, [r3], #1
    355a:	e7f9      	b.n	3550 <strncpy+0x1a>

0000355c <abort>:
    355c:	b508      	push	{r3, lr}
    355e:	2006      	movs	r0, #6
    3560:	f7ff fb26 	bl	2bb0 <raise>
    3564:	2001      	movs	r0, #1
    3566:	f000 f8d0 	bl	370a <_exit>

0000356a <__sfmoreglue>:
    356a:	b570      	push	{r4, r5, r6, lr}
    356c:	1e4a      	subs	r2, r1, #1
    356e:	2568      	movs	r5, #104	; 0x68
    3570:	4355      	muls	r5, r2
    3572:	460e      	mov	r6, r1
    3574:	f105 0174 	add.w	r1, r5, #116	; 0x74
    3578:	f7fe fde6 	bl	2148 <_malloc_r>
    357c:	4604      	mov	r4, r0
    357e:	b140      	cbz	r0, 3592 <__sfmoreglue+0x28>
    3580:	2100      	movs	r1, #0
    3582:	e9c0 1600 	strd	r1, r6, [r0]
    3586:	300c      	adds	r0, #12
    3588:	60a0      	str	r0, [r4, #8]
    358a:	f105 0268 	add.w	r2, r5, #104	; 0x68
    358e:	f000 f847 	bl	3620 <memset>
    3592:	4620      	mov	r0, r4
    3594:	bd70      	pop	{r4, r5, r6, pc}

00003596 <_fwalk_reent>:
    3596:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    359a:	4680      	mov	r8, r0
    359c:	4689      	mov	r9, r1
    359e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    35a2:	2600      	movs	r6, #0
    35a4:	b914      	cbnz	r4, 35ac <_fwalk_reent+0x16>
    35a6:	4630      	mov	r0, r6
    35a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    35ac:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    35b0:	3f01      	subs	r7, #1
    35b2:	d501      	bpl.n	35b8 <_fwalk_reent+0x22>
    35b4:	6824      	ldr	r4, [r4, #0]
    35b6:	e7f5      	b.n	35a4 <_fwalk_reent+0xe>
    35b8:	89ab      	ldrh	r3, [r5, #12]
    35ba:	2b01      	cmp	r3, #1
    35bc:	d907      	bls.n	35ce <_fwalk_reent+0x38>
    35be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    35c2:	3301      	adds	r3, #1
    35c4:	d003      	beq.n	35ce <_fwalk_reent+0x38>
    35c6:	4629      	mov	r1, r5
    35c8:	4640      	mov	r0, r8
    35ca:	47c8      	blx	r9
    35cc:	4306      	orrs	r6, r0
    35ce:	3568      	adds	r5, #104	; 0x68
    35d0:	e7ee      	b.n	35b0 <_fwalk_reent+0x1a>

000035d2 <__retarget_lock_init_recursive>:
    35d2:	4770      	bx	lr

000035d4 <__retarget_lock_acquire_recursive>:
    35d4:	4770      	bx	lr

000035d6 <__retarget_lock_release_recursive>:
    35d6:	4770      	bx	lr

000035d8 <__swhatbuf_r>:
    35d8:	b570      	push	{r4, r5, r6, lr}
    35da:	460e      	mov	r6, r1
    35dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    35e0:	2900      	cmp	r1, #0
    35e2:	b096      	sub	sp, #88	; 0x58
    35e4:	4614      	mov	r4, r2
    35e6:	461d      	mov	r5, r3
    35e8:	da07      	bge.n	35fa <__swhatbuf_r+0x22>
    35ea:	2300      	movs	r3, #0
    35ec:	602b      	str	r3, [r5, #0]
    35ee:	89b3      	ldrh	r3, [r6, #12]
    35f0:	061a      	lsls	r2, r3, #24
    35f2:	d410      	bmi.n	3616 <__swhatbuf_r+0x3e>
    35f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    35f8:	e00e      	b.n	3618 <__swhatbuf_r+0x40>
    35fa:	466a      	mov	r2, sp
    35fc:	f7ff fb14 	bl	2c28 <_fstat_r>
    3600:	2800      	cmp	r0, #0
    3602:	dbf2      	blt.n	35ea <__swhatbuf_r+0x12>
    3604:	9a01      	ldr	r2, [sp, #4]
    3606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    360a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    360e:	425a      	negs	r2, r3
    3610:	415a      	adcs	r2, r3
    3612:	602a      	str	r2, [r5, #0]
    3614:	e7ee      	b.n	35f4 <__swhatbuf_r+0x1c>
    3616:	2340      	movs	r3, #64	; 0x40
    3618:	2000      	movs	r0, #0
    361a:	6023      	str	r3, [r4, #0]
    361c:	b016      	add	sp, #88	; 0x58
    361e:	bd70      	pop	{r4, r5, r6, pc}

00003620 <memset>:
    3620:	4402      	add	r2, r0
    3622:	4603      	mov	r3, r0
    3624:	4293      	cmp	r3, r2
    3626:	d100      	bne.n	362a <memset+0xa>
    3628:	4770      	bx	lr
    362a:	f803 1b01 	strb.w	r1, [r3], #1
    362e:	e7f9      	b.n	3624 <memset+0x4>

00003630 <_raise_r>:
    3630:	291f      	cmp	r1, #31
    3632:	b538      	push	{r3, r4, r5, lr}
    3634:	4604      	mov	r4, r0
    3636:	460d      	mov	r5, r1
    3638:	d904      	bls.n	3644 <_raise_r+0x14>
    363a:	2316      	movs	r3, #22
    363c:	6003      	str	r3, [r0, #0]
    363e:	f04f 30ff 	mov.w	r0, #4294967295
    3642:	bd38      	pop	{r3, r4, r5, pc}
    3644:	6c42      	ldr	r2, [r0, #68]	; 0x44
    3646:	b112      	cbz	r2, 364e <_raise_r+0x1e>
    3648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    364c:	b94b      	cbnz	r3, 3662 <_raise_r+0x32>
    364e:	4620      	mov	r0, r4
    3650:	f000 f816 	bl	3680 <_getpid_r>
    3654:	462a      	mov	r2, r5
    3656:	4601      	mov	r1, r0
    3658:	4620      	mov	r0, r4
    365a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    365e:	f7ff baaf 	b.w	2bc0 <_kill_r>
    3662:	2b01      	cmp	r3, #1
    3664:	d00a      	beq.n	367c <_raise_r+0x4c>
    3666:	1c59      	adds	r1, r3, #1
    3668:	d103      	bne.n	3672 <_raise_r+0x42>
    366a:	2316      	movs	r3, #22
    366c:	6003      	str	r3, [r0, #0]
    366e:	2001      	movs	r0, #1
    3670:	e7e7      	b.n	3642 <_raise_r+0x12>
    3672:	2400      	movs	r4, #0
    3674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    3678:	4628      	mov	r0, r5
    367a:	4798      	blx	r3
    367c:	2000      	movs	r0, #0
    367e:	e7e0      	b.n	3642 <_raise_r+0x12>

00003680 <_getpid_r>:
    3680:	f7ff bb46 	b.w	2d10 <_getpid>

00003684 <__sread>:
    3684:	b510      	push	{r4, lr}
    3686:	460c      	mov	r4, r1
    3688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    368c:	f7ff fb00 	bl	2c90 <_read_r>
    3690:	2800      	cmp	r0, #0
    3692:	bfab      	itete	ge
    3694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3696:	89a3      	ldrhlt	r3, [r4, #12]
    3698:	181b      	addge	r3, r3, r0
    369a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    369e:	bfac      	ite	ge
    36a0:	6563      	strge	r3, [r4, #84]	; 0x54
    36a2:	81a3      	strhlt	r3, [r4, #12]
    36a4:	bd10      	pop	{r4, pc}

000036a6 <__swrite>:
    36a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36aa:	461f      	mov	r7, r3
    36ac:	898b      	ldrh	r3, [r1, #12]
    36ae:	05db      	lsls	r3, r3, #23
    36b0:	4605      	mov	r5, r0
    36b2:	460c      	mov	r4, r1
    36b4:	4616      	mov	r6, r2
    36b6:	d505      	bpl.n	36c4 <__swrite+0x1e>
    36b8:	2302      	movs	r3, #2
    36ba:	2200      	movs	r2, #0
    36bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    36c0:	f7ff fad4 	bl	2c6c <_lseek_r>
    36c4:	89a3      	ldrh	r3, [r4, #12]
    36c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    36ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    36ce:	81a3      	strh	r3, [r4, #12]
    36d0:	4632      	mov	r2, r6
    36d2:	463b      	mov	r3, r7
    36d4:	4628      	mov	r0, r5
    36d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36da:	f7ff ba83 	b.w	2be4 <_write_r>

000036de <__sseek>:
    36de:	b510      	push	{r4, lr}
    36e0:	460c      	mov	r4, r1
    36e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    36e6:	f7ff fac1 	bl	2c6c <_lseek_r>
    36ea:	1c43      	adds	r3, r0, #1
    36ec:	89a3      	ldrh	r3, [r4, #12]
    36ee:	bf15      	itete	ne
    36f0:	6560      	strne	r0, [r4, #84]	; 0x54
    36f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    36f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    36fa:	81a3      	strheq	r3, [r4, #12]
    36fc:	bf18      	it	ne
    36fe:	81a3      	strhne	r3, [r4, #12]
    3700:	bd10      	pop	{r4, pc}

00003702 <__sclose>:
    3702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3706:	f7ff ba7f 	b.w	2c08 <_close_r>

0000370a <_exit>:
    370a:	e7fe      	b.n	370a <_exit>
    370c:	706c6568 	.word	0x706c6568
    3710:	00000000 	.word	0x00000000
    3714:	20767273 	.word	0x20767273
    3718:	72657328 	.word	0x72657328
    371c:	20296f76 	.word	0x20296f76
    3720:	6d6d6f63 	.word	0x6d6d6f63
    3724:	73646e61 	.word	0x73646e61
    3728:	0000003a 	.word	0x0000003a
    372c:	65682020 	.word	0x65682020
    3730:	0000706c 	.word	0x0000706c
    3734:	74702020 	.word	0x74702020
    3738:	5b203461 	.word	0x5b203461
    373c:	312e2e30 	.word	0x312e2e30
    3740:	005d3038 	.word	0x005d3038
    3744:	74732020 	.word	0x74732020
    3748:	73757461 	.word	0x73757461
    374c:	00000000 	.word	0x00000000
    3750:	34617470 	.word	0x34617470
    3754:	00000000 	.word	0x00000000
    3758:	74617473 	.word	0x74617473
    375c:	00007375 	.word	0x00007375
    3760:	76726553 	.word	0x76726553
    3764:	5450206f 	.word	0x5450206f
    3768:	61203441 	.word	0x61203441
    376c:	00203a74 	.word	0x00203a74
    3770:	67656420 	.word	0x67656420
    3774:	73656572 	.word	0x73656572
    3778:	ffffff00 	.word	0xffffff00
    377c:	72657328 	.word	0x72657328
    3780:	00296f76 	.word	0x00296f76
    3784:	00767273 	.word	0x00767273

00003788 <quadTable>:
    3788:	0501ff05 ff050501 010505ff 05ff0105     ................
    3798:	ffff0020 203e3e3e 432d434d 76207261      ...>>> MC-Car v
    37a8:	65742032 6e696d72 72206c61 79646165     2 terminal ready
    37b8:	3c3c3c20 00000000 696c6176 6f632064      <<<....valid co
    37c8:	6e616d6d 61207364 003a6572 00002020     mmands are:.  ..
    37d8:	00203e2d 6f63203a 6e616d6d 6f6e2064     -> .: command no
    37e8:	6f662074 21646e75 00000000 6f727245     t found!....Erro
    37f8:	6f432072 203a6564 00000000 65746e45     r Code: ....Ente
    3808:	00272072 706c6568 6f662027 20612072     r '.help' for a 
    3818:	7473696c 20666f20 696c6176 6f632064     list of valid co
    3828:	6e616d6d 002e7364 432d434d 72207261     mmands..MC-Car r
    3838:	79646165 202e2e2e 00292d3a 796e6974     eady... :-).tiny
    3848:	2032326b 64616572 2e2e2e79 292d3a20     k22 ready... :-)
    3858:	ffffff00 21205530 5f67203d 6c617478     ....0U != g_xtal
    3868:	65724630 00000071 6c73662e 6f6c635f     0Freq....fsl_clo
    3878:	632e6b63 00000000 21205530 5f67203d     ck.c....0U != g_
    3888:	6c617478 72463233 ff007165 666e6f63     xtal32Freq..conf
    3898:	00006769                                ig..

0000389c <__func__.8178>:
    389c:	434f4c43 6e455f4b 656c6261 306c6c50     CLOCK_EnablePll0
    38ac:	ffffff00                                ....

000038b0 <__func__.8320>:
    38b0:	434f4c43 65535f4b 65625074 65646f4d     CLOCK_SetPbeMode
    38c0:	ffffff00                                ....

000038c4 <__func__.8387>:
    38c4:	434f4c43 6f425f4b 6f54746f 4d656550     CLOCK_BootToPeeM
    38d4:	0065646f                                ode.

000038d8 <mcgConfig_BOARD_BootClockRUN>:
    38d8:	01000007 00000000 ff060100              ............

000038e4 <simConfig_BOARD_BootClockRUN>:
    38e4:	00000000 01340000                       ......4.

000038ec <oscConfig_BOARD_BootClockRUN>:
    38ec:	007a1200 00000400                       ..z.....

000038f4 <_global_impure_ptr>:
    38f4:	20000008                                ... 

000038f8 <__sf_fake_stderr>:
	...

00003918 <__sf_fake_stdin>:
	...

00003938 <__sf_fake_stdout>:
	...
    3958:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
    3968:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
    3978:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
    3988:	20656e69 73256425 000a7325 2b302d23     ine %d%s%s..#-0+
    3998:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    39a8:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    39b8:	35343332 39383736 64636261 ff006665     23456789abcdef..
